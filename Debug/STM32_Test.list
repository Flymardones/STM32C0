
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003038  08003038  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003038  08003038  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  0800304c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800304c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf75  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207d  00000000  00000000  0002cfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad3  00000000  00000000  0002fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014a9b  00000000  00000000  0003093b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103c2  00000000  00000000  000453d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000848b2  00000000  00000000  00055798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003298  00000000  00000000  000da04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dd2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fe0 	.word	0x08002fe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002fe0 	.word	0x08002fe0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc94 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f825 	bl	8000276 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f972 	bl	8000514 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f8d0 	bl	80003d4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000234:	f000 f862 	bl	80002fc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000238:	f000 f90c 	bl	8000454 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Reset LEDs
  ws2812_spi_init();
 800023c:	f000 fc66 	bl	8000b0c <ws2812_spi_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    ws2812_set_led(0, 0, 0, 255);
 8000240:	23ff      	movs	r3, #255	; 0xff
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	2000      	movs	r0, #0
 8000248:	f000 fb8a 	bl	8000960 <ws2812_set_led>
    ws2812_spi_send();
 800024c:	f000 fc2e 	bl	8000aac <ws2812_send>

    HAL_Delay(500);
 8000250:	23fa      	movs	r3, #250	; 0xfa
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fcf9 	bl	8000c4c <HAL_Delay>

    ws2812_set_led(0, 0, 0, 0);
 800025a:	2300      	movs	r3, #0
 800025c:	2200      	movs	r2, #0
 800025e:	2100      	movs	r1, #0
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fb7d 	bl	8000960 <ws2812_set_led>
    ws2812_spi_send();
 8000266:	f000 fc21 	bl	8000aac <ws2812_send>

    HAL_Delay(500);
 800026a:	23fa      	movs	r3, #250	; 0xfa
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fcec 	bl	8000c4c <HAL_Delay>
    ws2812_set_led(0, 0, 0, 255);
 8000274:	e7e4      	b.n	8000240 <main+0x20>

08000276 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000276:	b590      	push	{r4, r7, lr}
 8000278:	b08d      	sub	sp, #52	; 0x34
 800027a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027c:	2414      	movs	r4, #20
 800027e:	193b      	adds	r3, r7, r4
 8000280:	0018      	movs	r0, r3
 8000282:	231c      	movs	r3, #28
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 fe7e 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	003b      	movs	r3, r7
 800028e:	0018      	movs	r0, r3
 8000290:	2314      	movs	r3, #20
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 fe77 	bl	8002f88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2202      	movs	r2, #2
 800029e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	2240      	movs	r2, #64	; 0x40
 80002b2:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fbb2 	bl	8001a20 <HAL_RCC_OscConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002c0:	f000 f9f2 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	003b      	movs	r3, r7
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ca:	003b      	movs	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002d6:	003b      	movs	r3, r7
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002dc:	003b      	movs	r3, r7
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e2:	003b      	movs	r3, r7
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 fd7e 	bl	8001de8 <HAL_RCC_ClockConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002f0:	f000 f9da 	bl	80006a8 <Error_Handler>
  }
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b00d      	add	sp, #52	; 0x34
 80002fa:	bd90      	pop	{r4, r7, pc}

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	230c      	movs	r3, #12
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 fe3c 	bl	8002f88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000312:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <MX_ADC1_Init+0xd0>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	05d2      	lsls	r2, r2, #23
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000344:	2200      	movs	r2, #0
 8000346:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800034a:	2201      	movs	r2, #1
 800034c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000350:	2220      	movs	r2, #32
 8000352:	2100      	movs	r1, #0
 8000354:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000364:	222c      	movs	r2, #44	; 0x2c
 8000366:	2100      	movs	r1, #0
 8000368:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800037e:	223c      	movs	r2, #60	; 0x3c
 8000380:	2100      	movs	r1, #0
 8000382:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_ADC1_Init+0xcc>)
 8000386:	2200      	movs	r2, #0
 8000388:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_ADC1_Init+0xcc>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fd8f 	bl	8000eb0 <HAL_ADC_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000396:	f000 f987 	bl	80006a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <MX_ADC1_Init+0xd4>)
 800039e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ac:	1d3a      	adds	r2, r7, #4
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_ADC1_Init+0xcc>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 ff22 	bl	80011fc <HAL_ADC_ConfigChannel>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003bc:	f000 f974 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b004      	add	sp, #16
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000028 	.word	0x20000028
 80003cc:	40012400 	.word	0x40012400
 80003d0:	20000100 	.word	0x20000100

080003d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <MX_SPI1_Init+0x78>)
 80003da:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_SPI1_Init+0x7c>)
 80003dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_SPI1_Init+0x78>)
 80003e0:	2282      	movs	r2, #130	; 0x82
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80003e6:	4b19      	ldr	r3, [pc, #100]	; (800044c <MX_SPI1_Init+0x78>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0212      	lsls	r2, r2, #8
 80003ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_SPI1_Init+0x78>)
 80003f0:	22e0      	movs	r2, #224	; 0xe0
 80003f2:	00d2      	lsls	r2, r2, #3
 80003f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_SPI1_Init+0x78>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_SPI1_Init+0x78>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_SPI1_Init+0x78>)
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0092      	lsls	r2, r2, #2
 8000408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_SPI1_Init+0x78>)
 800040c:	2218      	movs	r2, #24
 800040e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_SPI1_Init+0x78>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <MX_SPI1_Init+0x78>)
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_SPI1_Init+0x78>)
 800041e:	2200      	movs	r2, #0
 8000420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <MX_SPI1_Init+0x78>)
 8000424:	2207      	movs	r2, #7
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_SPI1_Init+0x78>)
 800042a:	2200      	movs	r2, #0
 800042c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <MX_SPI1_Init+0x78>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_SPI1_Init+0x78>)
 8000436:	0018      	movs	r0, r3
 8000438:	f001 ff10 	bl	800225c <HAL_SPI_Init>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000440:	f000 f932 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	20000124 	.word	0x20000124
 8000450:	40013000 	.word	0x40013000

08000454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	2310      	movs	r3, #16
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	0018      	movs	r0, r3
 8000460:	2310      	movs	r3, #16
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fd8f 	bl	8002f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	230c      	movs	r3, #12
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f002 fd88 	bl	8002f88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <MX_TIM1_Init+0xb4>)
 800047a:	4a24      	ldr	r2, [pc, #144]	; (800050c <MX_TIM1_Init+0xb8>)
 800047c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_TIM1_Init+0xb4>)
 8000480:	2230      	movs	r2, #48	; 0x30
 8000482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_TIM1_Init+0xb4>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM1_Init+0xb4>)
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <MX_TIM1_Init+0xbc>)
 800048e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_TIM1_Init+0xb4>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_TIM1_Init+0xb4>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM1_Init+0xb4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TIM1_Init+0xb4>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fa91 	bl	80029cc <HAL_TIM_Base_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80004ae:	f000 f8fb 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b2:	2110      	movs	r1, #16
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0152      	lsls	r2, r2, #5
 80004ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_TIM1_Init+0xb4>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fb20 	bl	8002b08 <HAL_TIM_ConfigClockSource>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004cc:	f000 f8ec 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004e2:	1d3a      	adds	r2, r7, #4
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_TIM1_Init+0xb4>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 fceb 	bl	8002ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80004f2:	f000 f8d9 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <MX_TIM1_Init+0xb4>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fabf 	bl	8002a7c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b008      	add	sp, #32
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	200000d8 	.word	0x200000d8
 800050c:	40012c00 	.word	0x40012c00
 8000510:	0000ffff 	.word	0x0000ffff

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	; 0x2c
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	2414      	movs	r4, #20
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fd2f 	bl	8002f88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <MX_GPIO_Init+0x184>)
 800052c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <MX_GPIO_Init+0x184>)
 8000530:	2120      	movs	r1, #32
 8000532:	430a      	orrs	r2, r1
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
 8000536:	4b58      	ldr	r3, [pc, #352]	; (8000698 <MX_GPIO_Init+0x184>)
 8000538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800053a:	2220      	movs	r2, #32
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b55      	ldr	r3, [pc, #340]	; (8000698 <MX_GPIO_Init+0x184>)
 8000544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000546:	4b54      	ldr	r3, [pc, #336]	; (8000698 <MX_GPIO_Init+0x184>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
 800054e:	4b52      	ldr	r3, [pc, #328]	; (8000698 <MX_GPIO_Init+0x184>)
 8000550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b4f      	ldr	r3, [pc, #316]	; (8000698 <MX_GPIO_Init+0x184>)
 800055c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055e:	4b4e      	ldr	r3, [pc, #312]	; (8000698 <MX_GPIO_Init+0x184>)
 8000560:	2102      	movs	r1, #2
 8000562:	430a      	orrs	r2, r1
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b4c      	ldr	r3, [pc, #304]	; (8000698 <MX_GPIO_Init+0x184>)
 8000568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056a:	2202      	movs	r2, #2
 800056c:	4013      	ands	r3, r2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b49      	ldr	r3, [pc, #292]	; (8000698 <MX_GPIO_Init+0x184>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b48      	ldr	r3, [pc, #288]	; (8000698 <MX_GPIO_Init+0x184>)
 8000578:	2104      	movs	r1, #4
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b46      	ldr	r3, [pc, #280]	; (8000698 <MX_GPIO_Init+0x184>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2204      	movs	r2, #4
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800058a:	4b44      	ldr	r3, [pc, #272]	; (800069c <MX_GPIO_Init+0x188>)
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fa27 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2204      	movs	r2, #4
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	4a3d      	ldr	r2, [pc, #244]	; (80006a0 <MX_GPIO_Init+0x18c>)
 80005ac:	0019      	movs	r1, r3
 80005ae:	0010      	movs	r0, r2
 80005b0:	f001 f8ae 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 f898 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	22c0      	movs	r2, #192	; 0xc0
 80005e6:	00d2      	lsls	r2, r2, #3
 80005e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	000c      	movs	r4, r1
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2202      	movs	r2, #2
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	193a      	adds	r2, r7, r4
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f001 f87f 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2240      	movs	r2, #64	; 0x40
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2201      	movs	r2, #1
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2203      	movs	r2, #3
 8000628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062a:	193b      	adds	r3, r7, r4
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <MX_GPIO_Init+0x188>)
 800062e:	0019      	movs	r1, r3
 8000630:	0010      	movs	r0, r2
 8000632:	f001 f86d 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2212      	movs	r2, #18
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	220e      	movs	r2, #14
 8000652:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	193b      	adds	r3, r7, r4
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <MX_GPIO_Init+0x188>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f001 f858 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000660:	0021      	movs	r1, r4
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	01d2      	lsls	r2, r2, #7
 8000668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2212      	movs	r2, #18
 800066e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	220e      	movs	r2, #14
 8000680:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	187b      	adds	r3, r7, r1
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <MX_GPIO_Init+0x190>)
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f001 f841 	bl	8001710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b00b      	add	sp, #44	; 0x2c
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	50000400 	.word	0x50000400
 80006a0:	50001400 	.word	0x50001400
 80006a4:	50000800 	.word	0x50000800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_MspInit+0x50>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_MspInit+0x50>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x50>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x50>)
 80006d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_MspInit+0x50>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0549      	lsls	r1, r1, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_MspInit+0x50>)
 80006e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	055b      	lsls	r3, r3, #21
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80006ee:	2008      	movs	r0, #8
 80006f0:	f000 fad0 	bl	8000c94 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80006f4:	2010      	movs	r0, #16
 80006f6:	f000 facd 	bl	8000c94 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	232c      	movs	r3, #44	; 0x2c
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 fc34 	bl	8002f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	2410      	movs	r4, #16
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	231c      	movs	r3, #28
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fc2c 	bl	8002f88 <memset>
  if(hadc->Instance==ADC1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <HAL_ADC_MspInit+0xb0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d13a      	bne.n	80007b0 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	01d2      	lsls	r2, r2, #7
 8000740:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	193b      	adds	r3, r7, r4
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fc98 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000754:	f7ff ffa8 	bl	80006a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 800075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0349      	lsls	r1, r1, #13
 8000762:	430a      	orrs	r2, r1
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 8000768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	035b      	lsls	r3, r3, #13
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 8000776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 800077a:	2101      	movs	r1, #1
 800077c:	430a      	orrs	r2, r1
 800077e:	635a      	str	r2, [r3, #52]	; 0x34
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_ADC_MspInit+0xb4>)
 8000782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000784:	2201      	movs	r2, #1
 8000786:	4013      	ands	r3, r2
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Pin;
 800078c:	212c      	movs	r1, #44	; 0x2c
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2203      	movs	r2, #3
 800079a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Joystick_GPIO_Port, &GPIO_InitStruct);
 80007a2:	187a      	adds	r2, r7, r1
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 ffb0 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b011      	add	sp, #68	; 0x44
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	40012400 	.word	0x40012400
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b091      	sub	sp, #68	; 0x44
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	232c      	movs	r3, #44	; 0x2c
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fbd8 	bl	8002f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	2410      	movs	r4, #16
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	231c      	movs	r3, #28
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f002 fbd0 	bl	8002f88 <memset>
  if(hspi->Instance==SPI1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a23      	ldr	r2, [pc, #140]	; (800087c <HAL_SPI_MspInit+0xbc>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d13f      	bne.n	8000872 <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	193b      	adds	r3, r7, r4
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fc3c 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800080c:	f7ff ff4c 	bl	80006a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 8000812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	0149      	lsls	r1, r1, #5
 800081a:	430a      	orrs	r2, r1
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 8000820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	015b      	lsls	r3, r3, #5
 8000826:	4013      	ands	r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 800082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 8000832:	2101      	movs	r1, #1
 8000834:	430a      	orrs	r2, r1
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_SPI_MspInit+0xc0>)
 800083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083c:	2201      	movs	r2, #1
 800083e:	4013      	ands	r3, r2
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000844:	212c      	movs	r1, #44	; 0x2c
 8000846:	187b      	adds	r3, r7, r1
 8000848:	22f0      	movs	r2, #240	; 0xf0
 800084a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	187a      	adds	r2, r7, r1
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 ff4f 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b011      	add	sp, #68	; 0x44
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40013000 	.word	0x40013000
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_TIM_Base_MspInit+0x38>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10d      	bne.n	80008b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0109      	lsls	r1, r1, #4
 80008a0:	430a      	orrs	r2, r1
 80008a2:	641a      	str	r2, [r3, #64]	; 0x40
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 80008a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b004      	add	sp, #16
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40012c00 	.word	0x40012c00
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f994 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <SystemInit+0x14>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0512      	lsls	r2, r2, #20
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000910:	f7ff fff0 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <LoopForever+0xa>)
  ldr r3, =_edata
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopForever+0xe>)
  adds r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopForever+0x12>)
  b LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000930:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000932:	3204      	adds	r2, #4

08000934 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LoopForever+0x16>)
  cmp r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800093a:	f002 fb2d 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fc6f 	bl	8000220 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000948:	08003040 	.word	0x08003040
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000954:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000958:	2000018c 	.word	0x2000018c

0800095c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>
	...

08000960 <ws2812_set_led>:
uint8_t led_data[ws2812_conf->led_num][3];
TIM_HandleTypeDef htim1;


// Stores all LEDs in memory (3 bytes per LED * ws2812_conf->led_num = 75 bytes)
void ws2812_set_led(uint8_t led, uint8_t red, uint8_t green, uint8_t blue) {
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	0005      	movs	r5, r0
 8000968:	000c      	movs	r4, r1
 800096a:	0010      	movs	r0, r2
 800096c:	0019      	movs	r1, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	1c2a      	adds	r2, r5, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	1c22      	adds	r2, r4, #0
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	1d7b      	adds	r3, r7, #5
 800097c:	1c02      	adds	r2, r0, #0
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	1c0a      	adds	r2, r1, #0
 8000984:	701a      	strb	r2, [r3, #0]

    if (led >= ws2812_conf->led_num) {
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b18      	cmp	r3, #24
 800098c:	d81f      	bhi.n	80009ce <ws2812_set_led+0x6e>
        return;
    }

    led_data[led][0] = green;
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	4911      	ldr	r1, [pc, #68]	; (80009d8 <ws2812_set_led+0x78>)
 8000994:	0013      	movs	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	189b      	adds	r3, r3, r2
 800099a:	1d7a      	adds	r2, r7, #5
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	545a      	strb	r2, [r3, r1]
    led_data[led][1] = red;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <ws2812_set_led+0x78>)
 80009a6:	0013      	movs	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	18cb      	adds	r3, r1, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	1dba      	adds	r2, r7, #6
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	701a      	strb	r2, [r3, #0]
    led_data[led][2] = blue;
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <ws2812_set_led+0x78>)
 80009bc:	0013      	movs	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	189b      	adds	r3, r3, r2
 80009c2:	18cb      	adds	r3, r1, r3
 80009c4:	3302      	adds	r3, #2
 80009c6:	1d3a      	adds	r2, r7, #4
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e000      	b.n	80009d0 <ws2812_set_led+0x70>
        return;
 80009ce:	46c0      	nop			; (mov r8, r8)
}
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	2000008c 	.word	0x2000008c

080009dc <ws2812_delay_us>:


void ws2812_delay_us(uint16_t us) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <ws2812_delay_us+0x30>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <ws2812_delay_us+0x30>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3f8      	bcc.n	80009f2 <ws2812_delay_us+0x16>
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	200000d8 	.word	0x200000d8

08000a10 <WS2812_Send_Spi>:
#include "ws2812_spi.h"
#include "string.h"

SPI_HandleTypeDef hspi1;

void WS2812_Send_Spi(uint8_t green, uint8_t red, uint8_t blue) {
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	; 0x2c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0004      	movs	r4, r0
 8000a18:	0008      	movs	r0, r1
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	1c22      	adds	r2, r4, #0
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	1c02      	adds	r2, r0, #0
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	1d7b      	adds	r3, r7, #5
 8000a2a:	1c0a      	adds	r2, r1, #0
 8000a2c:	701a      	strb	r2, [r3, #0]

	green = green * BRIGHTNESS / 100;
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	1dfa      	adds	r2, r7, #7
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	701a      	strb	r2, [r3, #0]
	red = red * BRIGHTNESS / 100;
 8000a36:	1dbb      	adds	r3, r7, #6
 8000a38:	1dba      	adds	r2, r7, #6
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
	blue = blue * BRIGHTNESS / 100;
 8000a3e:	1d7b      	adds	r3, r7, #5
 8000a40:	1d7a      	adds	r2, r7, #5
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	701a      	strb	r2, [r3, #0]

	uint32_t color = blue << 16 | red << 8 | green;
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	041a      	lsls	r2, r3, #16
 8000a4c:	1dbb      	adds	r3, r7, #6
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	431a      	orrs	r2, r3
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	623b      	str	r3, [r7, #32]
	uint8_t send_data[24];
	

	for (int i = 0; i < sizeof(send_data); i++) {
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a60:	e012      	b.n	8000a88 <WS2812_Send_Spi+0x78>
		send_data[i] = ((color >> i) & 0x01) ? 0b110 : 0b100;
 8000a62:	6a3a      	ldr	r2, [r7, #32]
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	40da      	lsrs	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d001      	beq.n	8000a74 <WS2812_Send_Spi+0x64>
 8000a70:	2106      	movs	r1, #6
 8000a72:	e000      	b.n	8000a76 <WS2812_Send_Spi+0x66>
 8000a74:	2104      	movs	r1, #4
 8000a76:	2308      	movs	r3, #8
 8000a78:	18fa      	adds	r2, r7, r3
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	1c0a      	adds	r2, r1, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(send_data); i++) {
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	3301      	adds	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	2b17      	cmp	r3, #23
 8000a8c:	d9e9      	bls.n	8000a62 <WS2812_Send_Spi+0x52>
	}

	HAL_SPI_Transmit(&hspi1, send_data, sizeof(send_data), HAL_MAX_DELAY);
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	2208      	movs	r2, #8
 8000a94:	18b9      	adds	r1, r7, r2
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <WS2812_Send_Spi+0x98>)
 8000a98:	2218      	movs	r2, #24
 8000a9a:	f001 fc97 	bl	80023cc <HAL_SPI_Transmit>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b00b      	add	sp, #44	; 0x2c
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000124 	.word	0x20000124

08000aac <ws2812_send>:

void ws2812_spi_send() {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
	for (int i = 0; i < ws2812_conf->led_num; i++) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e01c      	b.n	8000af2 <ws2812_send+0x46>
		WS2812_Send_Spi(led_data[i][0],led_data[i][1],led_data[i][2]);
 8000ab8:	4913      	ldr	r1, [pc, #76]	; (8000b08 <ws2812_send+0x5c>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	0013      	movs	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	189b      	adds	r3, r3, r2
 8000ac2:	5c58      	ldrb	r0, [r3, r1]
 8000ac4:	4910      	ldr	r1, [pc, #64]	; (8000b08 <ws2812_send+0x5c>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	0013      	movs	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	18cb      	adds	r3, r1, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	781c      	ldrb	r4, [r3, #0]
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <ws2812_send+0x5c>)
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	0013      	movs	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	18cb      	adds	r3, r1, r3
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	f7ff ff92 	bl	8000a10 <WS2812_Send_Spi>
	for (int i = 0; i < ws2812_conf->led_num; i++) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3301      	adds	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b18      	cmp	r3, #24
 8000af6:	dddf      	ble.n	8000ab8 <ws2812_send+0xc>
	}
    ws2812_delay_us(240);
 8000af8:	20f0      	movs	r0, #240	; 0xf0
 8000afa:	f7ff ff6f 	bl	80009dc <ws2812_delay_us>
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b003      	add	sp, #12
 8000b04:	bd90      	pop	{r4, r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	2000008c 	.word	0x2000008c

08000b0c <ws2812_spi_init>:

void ws2812_spi_init() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
    memset(led_data, 0, sizeof(led_data));
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <ws2812_spi_init+0x40>)
 8000b14:	224b      	movs	r2, #75	; 0x4b
 8000b16:	2100      	movs	r1, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fa35 	bl	8002f88 <memset>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e009      	b.n	8000b38 <ws2812_spi_init+0x2c>
        ws2812_set_led(i, 0, 0, 0);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	b2d8      	uxtb	r0, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f7ff ff17 	bl	8000960 <ws2812_set_led>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3301      	adds	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b18      	cmp	r3, #24
 8000b3c:	ddf2      	ble.n	8000b24 <ws2812_spi_init+0x18>
    }
    ws2812_spi_send();
 8000b3e:	f7ff ffb5 	bl	8000aac <ws2812_send>
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	2000008c 	.word	0x2000008c

08000b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f80f 	bl	8000b80 <HAL_InitTick>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e001      	b.n	8000b72 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6e:	f7ff fda1 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_InitTick+0x88>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d02b      	beq.n	8000bf0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_InitTick+0x8c>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_InitTick+0x88>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	0098      	lsls	r0, r3, #2
 8000ba6:	f7ff faaf 	bl	8000108 <__udivsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff faaa 	bl	8000108 <__udivsi3>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fd9d 	bl	80016f6 <HAL_SYSTICK_Config>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d112      	bne.n	8000be6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d80a      	bhi.n	8000bdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fd7c 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_InitTick+0x90>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e00d      	b.n	8000bf8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e008      	b.n	8000bf8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e003      	b.n	8000bf8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b005      	add	sp, #20
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000188 	.word	0x20000188

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000188 	.word	0x20000188

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	ff3fffff 	.word	0xff3fffff

08000cdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	23c0      	movs	r3, #192	; 0xc0
 8000cea:	041b      	lsls	r3, r3, #16
 8000cec:	4013      	ands	r3, r2
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	2104      	movs	r1, #4
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2104      	movs	r1, #4
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4099      	lsls	r1, r3
 8000d20:	000b      	movs	r3, r1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	2104      	movs	r1, #4
 8000d42:	400a      	ands	r2, r1
 8000d44:	2107      	movs	r1, #7
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2104      	movs	r1, #4
 8000d50:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d52:	40da      	lsrs	r2, r3
 8000d54:	0013      	movs	r3, r2
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	211f      	movs	r1, #31
 8000d72:	400a      	ands	r2, r1
 8000d74:	210f      	movs	r1, #15
 8000d76:	4091      	lsls	r1, r2
 8000d78:	000a      	movs	r2, r1
 8000d7a:	43d2      	mvns	r2, r2
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0e9b      	lsrs	r3, r3, #26
 8000d82:	210f      	movs	r1, #15
 8000d84:	4019      	ands	r1, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	201f      	movs	r0, #31
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	4099      	lsls	r1, r3
 8000d8e:	000b      	movs	r3, r1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	0a5b      	lsrs	r3, r3, #9
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	0252      	lsls	r2, r2, #9
 8000dd2:	0a52      	lsrs	r2, r2, #9
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	400b      	ands	r3, r1
 8000e04:	4904      	ldr	r1, [pc, #16]	; (8000e18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	7fffff00 	.word	0x7fffff00

08000e1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0552      	lsls	r2, r2, #21
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	6fffffe8 	.word	0x6fffffe8

08000e44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	055b      	lsls	r3, r3, #21
 8000e54:	401a      	ands	r2, r3
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	055b      	lsls	r3, r3, #21
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d101      	bne.n	8000e62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <LL_ADC_IsEnabled+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_ADC_IsEnabled+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d101      	bne.n	8000ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	231f      	movs	r3, #31
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e17e      	b.n	80011d4 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10a      	bne.n	8000ef4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fc11 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ffa3 	bl	8000e44 <LL_ADC_IsInternalRegulatorEnabled>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d114      	bne.n	8000f2c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff ff88 	bl	8000e1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f0c:	4bb3      	ldr	r3, [pc, #716]	; (80011dc <HAL_ADC_Init+0x32c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	49b3      	ldr	r1, [pc, #716]	; (80011e0 <HAL_ADC_Init+0x330>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff f8f8 	bl	8000108 <__udivsi3>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f1e:	e002      	b.n	8000f26 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f9      	bne.n	8000f20 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff ff87 	bl	8000e44 <LL_ADC_IsInternalRegulatorEnabled>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d10f      	bne.n	8000f5a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	2210      	movs	r2, #16
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f52:	231f      	movs	r3, #31
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff95 	bl	8000e8e <LL_ADC_REG_IsConversionOngoing>
 8000f64:	0003      	movs	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d000      	beq.n	8000f74 <HAL_ADC_Init+0xc4>
 8000f72:	e122      	b.n	80011ba <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d000      	beq.n	8000f7c <HAL_ADC_Init+0xcc>
 8000f7a:	e11e      	b.n	80011ba <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a98      	ldr	r2, [pc, #608]	; (80011e4 <HAL_ADC_Init+0x334>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	2202      	movs	r2, #2
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff6b 	bl	8000e6c <LL_ADC_IsEnabled>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d000      	beq.n	8000f9c <HAL_ADC_Init+0xec>
 8000f9a:	e0ad      	b.n	80010f8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e1b      	ldrb	r3, [r3, #24]
 8000fa4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fa6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e5b      	ldrb	r3, [r3, #25]
 8000fac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e9b      	ldrb	r3, [r3, #26]
 8000fb4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fb6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_ADC_Init+0x116>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	e000      	b.n	8000fc8 <HAL_ADC_Init+0x118>
 8000fc6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fc8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fce:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da04      	bge.n	8000fe2 <HAL_ADC_Init+0x132>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	e001      	b.n	8000fe6 <HAL_ADC_Init+0x136>
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fe6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	212c      	movs	r1, #44	; 0x2c
 8000fec:	5c5b      	ldrb	r3, [r3, r1]
 8000fee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ff0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	5c9b      	ldrb	r3, [r3, r2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d115      	bne.n	800102e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7e9b      	ldrb	r3, [r3, #26]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0252      	lsls	r2, r2, #9
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	e00b      	b.n	800102e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	2220      	movs	r2, #32
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	2201      	movs	r2, #1
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00a      	beq.n	800104c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800103a:	23e0      	movs	r3, #224	; 0xe0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001044:	4313      	orrs	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4a65      	ldr	r2, [pc, #404]	; (80011e8 <HAL_ADC_Init+0x338>)
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	430a      	orrs	r2, r1
 8001060:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	0f9b      	lsrs	r3, r3, #30
 8001068:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800106e:	4313      	orrs	r3, r2
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4313      	orrs	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	223c      	movs	r2, #60	; 0x3c
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d111      	bne.n	80010a4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	0f9b      	lsrs	r3, r3, #30
 8001086:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800108c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001092:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001098:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	2201      	movs	r2, #1
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	4a50      	ldr	r2, [pc, #320]	; (80011ec <HAL_ADC_Init+0x33c>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d018      	beq.n	80010f8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d012      	beq.n	80010f8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	429a      	cmp	r2, r3
 80010dc:	d00c      	beq.n	80010f8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_ADC_Init+0x340>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_ADC_Init+0x344>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	23f0      	movs	r3, #240	; 0xf0
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	401a      	ands	r2, r3
 80010f2:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <HAL_ADC_Init+0x340>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f7ff fdf7 	bl	8000cf6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	4939      	ldr	r1, [pc, #228]	; (80011f8 <HAL_ADC_Init+0x348>)
 8001112:	001a      	movs	r2, r3
 8001114:	f7ff fdef 	bl	8000cf6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2110      	movs	r1, #16
 800112c:	4249      	negs	r1, r1
 800112e:	430a      	orrs	r2, r1
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
 8001132:	e018      	b.n	8001166 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	039b      	lsls	r3, r3, #14
 800113c:	429a      	cmp	r2, r3
 800113e:	d112      	bne.n	8001166 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	3b01      	subs	r3, #1
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	221c      	movs	r2, #28
 8001150:	4013      	ands	r3, r2
 8001152:	2210      	movs	r2, #16
 8001154:	4252      	negs	r2, r2
 8001156:	409a      	lsls	r2, r3
 8001158:	0011      	movs	r1, r2
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2100      	movs	r1, #0
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff fddf 	bl	8000d30 <LL_ADC_GetSamplingTimeCommonChannels>
 8001172:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001178:	429a      	cmp	r2, r3
 800117a:	d10b      	bne.n	8001194 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	2203      	movs	r2, #3
 8001188:	4393      	bics	r3, r2
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001192:	e01c      	b.n	80011ce <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	2212      	movs	r2, #18
 800119a:	4393      	bics	r3, r2
 800119c:	2210      	movs	r2, #16
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2201      	movs	r2, #1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011b0:	231f      	movs	r3, #31
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011b8:	e009      	b.n	80011ce <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	2210      	movs	r2, #16
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011c6:	231f      	movs	r3, #31
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ce:	231f      	movs	r3, #31
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b008      	add	sp, #32
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	00030d40 	.word	0x00030d40
 80011e4:	fffffefd 	.word	0xfffffefd
 80011e8:	ffde0201 	.word	0xffde0201
 80011ec:	1ffffc02 	.word	0x1ffffc02
 80011f0:	40012708 	.word	0x40012708
 80011f4:	ffc3ffff 	.word	0xffc3ffff
 80011f8:	7fffff04 	.word	0x7fffff04

080011fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001206:	2317      	movs	r3, #23
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2254      	movs	r2, #84	; 0x54
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x24>
 800121c:	2302      	movs	r3, #2
 800121e:	e1be      	b.n	800159e <HAL_ADC_ConfigChannel+0x3a2>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2254      	movs	r2, #84	; 0x54
 8001224:	2101      	movs	r1, #1
 8001226:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff fe2e 	bl	8000e8e <LL_ADC_REG_IsConversionOngoing>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d000      	beq.n	8001238 <HAL_ADC_ConfigChannel+0x3c>
 8001236:	e1a1      	b.n	800157c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d100      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x46>
 8001240:	e152      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	061b      	lsls	r3, r3, #24
 800124a:	429a      	cmp	r2, r3
 800124c:	d004      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001252:	4ac2      	ldr	r2, [pc, #776]	; (800155c <HAL_ADC_ConfigChannel+0x360>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d108      	bne.n	800126a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0019      	movs	r1, r3
 8001262:	0010      	movs	r0, r2
 8001264:	f7ff fd9b 	bl	8000d9e <LL_ADC_REG_SetSequencerChAdd>
 8001268:	e0ed      	b.n	8001446 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	211f      	movs	r1, #31
 8001274:	400b      	ands	r3, r1
 8001276:	210f      	movs	r1, #15
 8001278:	4099      	lsls	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	43db      	mvns	r3, r3
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	0a5b      	lsrs	r3, r3, #9
 800128a:	d105      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x9c>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0e9b      	lsrs	r3, r3, #26
 8001292:	221f      	movs	r2, #31
 8001294:	4013      	ands	r3, r2
 8001296:	e0bc      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	d000      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0xa8>
 80012a2:	e0b5      	b.n	8001410 <HAL_ADC_ConfigChannel+0x214>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d000      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0xb4>
 80012ae:	e0ad      	b.n	800140c <HAL_ADC_ConfigChannel+0x210>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2204      	movs	r2, #4
 80012b6:	4013      	ands	r3, r2
 80012b8:	d000      	beq.n	80012bc <HAL_ADC_ConfigChannel+0xc0>
 80012ba:	e0a5      	b.n	8001408 <HAL_ADC_ConfigChannel+0x20c>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2208      	movs	r2, #8
 80012c2:	4013      	ands	r3, r2
 80012c4:	d000      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0xcc>
 80012c6:	e09d      	b.n	8001404 <HAL_ADC_ConfigChannel+0x208>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2210      	movs	r2, #16
 80012ce:	4013      	ands	r3, r2
 80012d0:	d000      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0xd8>
 80012d2:	e095      	b.n	8001400 <HAL_ADC_ConfigChannel+0x204>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2220      	movs	r2, #32
 80012da:	4013      	ands	r3, r2
 80012dc:	d000      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0xe4>
 80012de:	e08d      	b.n	80013fc <HAL_ADC_ConfigChannel+0x200>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	4013      	ands	r3, r2
 80012e8:	d000      	beq.n	80012ec <HAL_ADC_ConfigChannel+0xf0>
 80012ea:	e085      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1fc>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	4013      	ands	r3, r2
 80012f4:	d000      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0xfc>
 80012f6:	e07d      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x1f8>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d000      	beq.n	8001306 <HAL_ADC_ConfigChannel+0x10a>
 8001304:	e074      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1f4>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d000      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x118>
 8001312:	e06b      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1f0>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4013      	ands	r3, r2
 800131e:	d000      	beq.n	8001322 <HAL_ADC_ConfigChannel+0x126>
 8001320:	e062      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x1ec>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x134>
 800132e:	e059      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x1e8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	015b      	lsls	r3, r3, #5
 8001338:	4013      	ands	r3, r2
 800133a:	d151      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1e4>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	019b      	lsls	r3, r3, #6
 8001344:	4013      	ands	r3, r2
 8001346:	d149      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1e0>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	4013      	ands	r3, r2
 8001352:	d141      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1dc>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4013      	ands	r3, r2
 800135e:	d139      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1d8>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	4013      	ands	r3, r2
 800136a:	d131      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1d4>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d129      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d0>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	02db      	lsls	r3, r3, #11
 8001380:	4013      	ands	r3, r2
 8001382:	d121      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1cc>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	031b      	lsls	r3, r3, #12
 800138c:	4013      	ands	r3, r2
 800138e:	d119      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1c8>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	4013      	ands	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1c4>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	039b      	lsls	r3, r3, #14
 80013a4:	4013      	ands	r3, r2
 80013a6:	d109      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c0>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	03db      	lsls	r3, r3, #15
 80013b0:	4013      	ands	r3, r2
 80013b2:	d001      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x1bc>
 80013b4:	2316      	movs	r3, #22
 80013b6:	e02c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e02a      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013bc:	2315      	movs	r3, #21
 80013be:	e028      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013c0:	2314      	movs	r3, #20
 80013c2:	e026      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013c4:	2313      	movs	r3, #19
 80013c6:	e024      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013c8:	2312      	movs	r3, #18
 80013ca:	e022      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013cc:	2311      	movs	r3, #17
 80013ce:	e020      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013d0:	2310      	movs	r3, #16
 80013d2:	e01e      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013d4:	230f      	movs	r3, #15
 80013d6:	e01c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013d8:	230e      	movs	r3, #14
 80013da:	e01a      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013dc:	230d      	movs	r3, #13
 80013de:	e018      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013e0:	230c      	movs	r3, #12
 80013e2:	e016      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013e4:	230b      	movs	r3, #11
 80013e6:	e014      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013e8:	230a      	movs	r3, #10
 80013ea:	e012      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013ec:	2309      	movs	r3, #9
 80013ee:	e010      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013f0:	2308      	movs	r3, #8
 80013f2:	e00e      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013f4:	2307      	movs	r3, #7
 80013f6:	e00c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013f8:	2306      	movs	r3, #6
 80013fa:	e00a      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e008      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 8001400:	2304      	movs	r3, #4
 8001402:	e006      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 8001404:	2303      	movs	r3, #3
 8001406:	e004      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_ADC_ConfigChannel+0x216>
 8001410:	2300      	movs	r3, #0
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	6852      	ldr	r2, [r2, #4]
 8001416:	201f      	movs	r0, #31
 8001418:	4002      	ands	r2, r0
 800141a:	4093      	lsls	r3, r2
 800141c:	000a      	movs	r2, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	d808      	bhi.n	8001446 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	001a      	movs	r2, r3
 8001442:	f7ff fc8c 	bl	8000d5e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	001a      	movs	r2, r3
 8001454:	f7ff fcc6 	bl	8000de4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db00      	blt.n	8001462 <HAL_ADC_ConfigChannel+0x266>
 8001460:	e096      	b.n	8001590 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff fc39 	bl	8000cdc <LL_ADC_GetCommonPathInternalCh>
 800146a:	0003      	movs	r3, r0
 800146c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3c      	ldr	r2, [pc, #240]	; (8001564 <HAL_ADC_ConfigChannel+0x368>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d123      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001480:	d11e      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0412      	lsls	r2, r2, #16
 8001488:	4313      	orrs	r3, r2
 800148a:	4a35      	ldr	r2, [pc, #212]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f7ff fc10 	bl	8000cb4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <HAL_ADC_ConfigChannel+0x36c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4934      	ldr	r1, [pc, #208]	; (800156c <HAL_ADC_ConfigChannel+0x370>)
 800149a:	0018      	movs	r0, r3
 800149c:	f7fe fe34 	bl	8000108 <__udivsi3>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	189b      	adds	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014be:	e067      	b.n	8001590 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ADC_ConfigChannel+0x374>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d162      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	03db      	lsls	r3, r3, #15
 80014d0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014d2:	d15d      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	03d2      	lsls	r2, r2, #15
 80014da:	4313      	orrs	r3, r2
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 80014de:	0019      	movs	r1, r3
 80014e0:	0010      	movs	r0, r2
 80014e2:	f7ff fbe7 	bl	8000cb4 <LL_ADC_SetCommonPathInternalCh>
 80014e6:	e053      	b.n	8001590 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d004      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_ADC_ConfigChannel+0x360>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d107      	bne.n	800150e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0019      	movs	r1, r3
 8001508:	0010      	movs	r0, r2
 800150a:	f7ff fc59 	bl	8000dc0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da3c      	bge.n	8001590 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fbdf 	bl	8000cdc <LL_ADC_GetCommonPathInternalCh>
 800151e:	0003      	movs	r3, r0
 8001520:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_ADC_ConfigChannel+0x368>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d108      	bne.n	800153e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_ADC_ConfigChannel+0x378>)
 8001530:	4013      	ands	r3, r2
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 8001534:	0019      	movs	r1, r3
 8001536:	0010      	movs	r0, r2
 8001538:	f7ff fbbc 	bl	8000cb4 <LL_ADC_SetCommonPathInternalCh>
 800153c:	e028      	b.n	8001590 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_ADC_ConfigChannel+0x374>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d123      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_ADC_ConfigChannel+0x37c>)
 800154c:	4013      	ands	r3, r2
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_ADC_ConfigChannel+0x364>)
 8001550:	0019      	movs	r1, r3
 8001552:	0010      	movs	r0, r2
 8001554:	f7ff fbae 	bl	8000cb4 <LL_ADC_SetCommonPathInternalCh>
 8001558:	e01a      	b.n	8001590 <HAL_ADC_ConfigChannel+0x394>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	80000004 	.word	0x80000004
 8001560:	40012708 	.word	0x40012708
 8001564:	a4000200 	.word	0xa4000200
 8001568:	20000000 	.word	0x20000000
 800156c:	00030d40 	.word	0x00030d40
 8001570:	a8000400 	.word	0xa8000400
 8001574:	ff7fffff 	.word	0xff7fffff
 8001578:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	2220      	movs	r2, #32
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001588:	2317      	movs	r3, #23
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2254      	movs	r2, #84	; 0x54
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001598:	2317      	movs	r3, #23
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b006      	add	sp, #24
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b7f      	cmp	r3, #127	; 0x7f
 80015bc:	d828      	bhi.n	8001610 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015be:	4a2f      	ldr	r2, [pc, #188]	; (800167c <__NVIC_SetPriority+0xd4>)
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	33c0      	adds	r3, #192	; 0xc0
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	589b      	ldr	r3, [r3, r2]
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	0011      	movs	r1, r2
 80015d4:	2203      	movs	r2, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	21ff      	movs	r1, #255	; 0xff
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	43d2      	mvns	r2, r2
 80015e2:	401a      	ands	r2, r3
 80015e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	22ff      	movs	r2, #255	; 0xff
 80015ec:	401a      	ands	r2, r3
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	2303      	movs	r3, #3
 80015f6:	4003      	ands	r3, r0
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	481f      	ldr	r0, [pc, #124]	; (800167c <__NVIC_SetPriority+0xd4>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	430a      	orrs	r2, r1
 8001608:	33c0      	adds	r3, #192	; 0xc0
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800160e:	e031      	b.n	8001674 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <__NVIC_SetPriority+0xd8>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0019      	movs	r1, r3
 8001618:	230f      	movs	r3, #15
 800161a:	400b      	ands	r3, r1
 800161c:	3b08      	subs	r3, #8
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3306      	adds	r3, #6
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	18d3      	adds	r3, r2, r3
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	0011      	movs	r1, r2
 8001630:	2203      	movs	r2, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	43d2      	mvns	r2, r2
 800163e:	401a      	ands	r2, r3
 8001640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	401a      	ands	r2, r3
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	2303      	movs	r3, #3
 8001652:	4003      	ands	r3, r0
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <__NVIC_SetPriority+0xd8>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	001c      	movs	r4, r3
 8001660:	230f      	movs	r3, #15
 8001662:	4023      	ands	r3, r4
 8001664:	3b08      	subs	r3, #8
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	430a      	orrs	r2, r1
 800166a:	3306      	adds	r3, #6
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	18c3      	adds	r3, r0, r3
 8001670:	3304      	adds	r3, #4
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b003      	add	sp, #12
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	045b      	lsls	r3, r3, #17
 8001694:	429a      	cmp	r2, r3
 8001696:	d301      	bcc.n	800169c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001698:	2301      	movs	r3, #1
 800169a:	e010      	b.n	80016be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <SysTick_Config+0x44>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	3a01      	subs	r2, #1
 80016a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a4:	2301      	movs	r3, #1
 80016a6:	425b      	negs	r3, r3
 80016a8:	2103      	movs	r1, #3
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7ff ff7c 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x44>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x44>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	210f      	movs	r1, #15
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	1c02      	adds	r2, r0, #0
 80016dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ffbf 	bl	8001684 <SysTick_Config>
 8001706:	0003      	movs	r3, r0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800171e:	e14d      	b.n	80019bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4091      	lsls	r1, r2
 800172a:	000a      	movs	r2, r1
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <HAL_GPIO_Init+0x28>
 8001736:	e13e      	b.n	80019b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x38>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d125      	bne.n	8001794 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	58d3      	ldr	r3, [r2, r3]
 8001754:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2207      	movs	r2, #7
 800175a:	4013      	ands	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	409a      	lsls	r2, r3
 8001762:	0013      	movs	r3, r2
 8001764:	43da      	mvns	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	4013      	ands	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	220f      	movs	r2, #15
 8001772:	401a      	ands	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2107      	movs	r1, #7
 8001778:	400b      	ands	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4313      	orrs	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	6979      	ldr	r1, [r7, #20]
 8001792:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	409a      	lsls	r2, r3
 80017a2:	0013      	movs	r3, r2
 80017a4:	43da      	mvns	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	401a      	ands	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	4313      	orrs	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d00b      	beq.n	80017e8 <HAL_GPIO_Init+0xd8>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d130      	bne.n	800184a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	43da      	mvns	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	4013      	ands	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4313      	orrs	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181e:	2201      	movs	r2, #1
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4013      	ands	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	2201      	movs	r2, #1
 8001836:	401a      	ands	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	4013      	ands	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4313      	orrs	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	055b      	lsls	r3, r3, #21
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_GPIO_Init+0x180>
 800188e:	e092      	b.n	80019b6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3318      	adds	r3, #24
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	589b      	ldr	r3, [r3, r2]
 800189c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	220f      	movs	r2, #15
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	43da      	mvns	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	23a0      	movs	r3, #160	; 0xa0
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x1d6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x1d2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x1ce>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a43      	ldr	r2, [pc, #268]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x1ca>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018da:	2306      	movs	r3, #6
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018e6:	2300      	movs	r3, #0
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	2103      	movs	r1, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4093      	lsls	r3, r2
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018f8:	4936      	ldr	r1, [pc, #216]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3318      	adds	r3, #24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001906:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	58d3      	ldr	r3, [r2, r3]
 800190c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800192c:	4929      	ldr	r1, [pc, #164]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001936:	2384      	movs	r3, #132	; 0x84
 8001938:	58d3      	ldr	r3, [r2, r3]
 800193a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43da      	mvns	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4013      	ands	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	029b      	lsls	r3, r3, #10
 800194e:	4013      	ands	r3, r2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800195a:	491e      	ldr	r1, [pc, #120]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 800195c:	2284      	movs	r2, #132	; 0x84
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4013      	ands	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3301      	adds	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	40da      	lsrs	r2, r3
 80019c4:	1e13      	subs	r3, r2, #0
 80019c6:	d000      	beq.n	80019ca <HAL_GPIO_Init+0x2ba>
 80019c8:	e6aa      	b.n	8001720 <HAL_GPIO_Init+0x10>
  }
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b006      	add	sp, #24
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021800 	.word	0x40021800
 80019d8:	50000400 	.word	0x50000400
 80019dc:	50000800 	.word	0x50000800
 80019e0:	50001400 	.word	0x50001400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	0008      	movs	r0, r1
 80019ee:	0011      	movs	r1, r2
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	1c02      	adds	r2, r0, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	1c7b      	adds	r3, r7, #1
 80019f8:	1c0a      	adds	r2, r1, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	1c7b      	adds	r3, r7, #1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	881a      	ldrh	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1d0      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_OscConfig+0x1e>
 8001a3c:	e069      	b.n	8001b12 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3e:	4bc8      	ldr	r3, [pc, #800]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	4013      	ands	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d15d      	bne.n	8001b12 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1bc      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_OscConfig+0x56>
 8001a66:	4bbe      	ldr	r3, [pc, #760]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4bbd      	ldr	r3, [pc, #756]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	0249      	lsls	r1, r1, #9
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e020      	b.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	23a0      	movs	r3, #160	; 0xa0
 8001a7c:	02db      	lsls	r3, r3, #11
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d10e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x80>
 8001a82:	4bb7      	ldr	r3, [pc, #732]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4bb6      	ldr	r3, [pc, #728]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	02c9      	lsls	r1, r1, #11
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	4bb3      	ldr	r3, [pc, #716]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4bb2      	ldr	r3, [pc, #712]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0249      	lsls	r1, r1, #9
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001aa0:	4baf      	ldr	r3, [pc, #700]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4bae      	ldr	r3, [pc, #696]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001aa6:	49af      	ldr	r1, [pc, #700]	; (8001d64 <HAL_RCC_OscConfig+0x344>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	4bac      	ldr	r3, [pc, #688]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4bab      	ldr	r3, [pc, #684]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001ab2:	49ad      	ldr	r1, [pc, #692]	; (8001d68 <HAL_RCC_OscConfig+0x348>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d014      	beq.n	8001aea <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8ba 	bl	8000c38 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001aca:	f7ff f8b5 	bl	8000c38 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e17b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001adc:	4ba0      	ldr	r3, [pc, #640]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0xaa>
 8001ae8:	e013      	b.n	8001b12 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f8a5 	bl	8000c38 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f8a0 	bl	8000c38 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e166      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	4b96      	ldr	r3, [pc, #600]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <HAL_RCC_OscConfig+0xfe>
 8001b1c:	e086      	b.n	8001c2c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b90      	ldr	r3, [pc, #576]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2238      	movs	r2, #56	; 0x38
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d12f      	bne.n	8001b8e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e14c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a8b      	ldr	r2, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x34c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	021a      	lsls	r2, r3, #8
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a85      	ldr	r2, [pc, #532]	; (8001d70 <HAL_RCC_OscConfig+0x350>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b6a:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0adb      	lsrs	r3, r3, #11
 8001b70:	2207      	movs	r2, #7
 8001b72:	4013      	ands	r3, r2
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x354>)
 8001b76:	40da      	lsrs	r2, r3
 8001b78:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x358>)
 8001b7a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x35c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7fe fffd 	bl	8000b80 <HAL_InitTick>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d050      	beq.n	8001c2c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e122      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d030      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a75      	ldr	r2, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x350>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0049      	lsls	r1, r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f83e 	bl	8000c38 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f839 	bl	8000c38 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ff      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a61      	ldr	r2, [pc, #388]	; (8001d6c <HAL_RCC_OscConfig+0x34c>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	021a      	lsls	r2, r3, #8
 8001bf0:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	e019      	b.n	8001c2c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001bfe:	4960      	ldr	r1, [pc, #384]	; (8001d80 <HAL_RCC_OscConfig+0x360>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f818 	bl	8000c38 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f813 	bl	8000c38 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0d9      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2208      	movs	r2, #8
 8001c32:	4013      	ands	r3, r2
 8001c34:	d042      	beq.n	8001cbc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2238      	movs	r2, #56	; 0x38
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b18      	cmp	r3, #24
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d138      	bne.n	8001cbc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0c2      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d019      	beq.n	8001c8a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c56:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7fe ffe9 	bl	8000c38 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c6c:	f7fe ffe4 	bl	8000c38 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0aa      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	2202      	movs	r2, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f1      	beq.n	8001c6c <HAL_RCC_OscConfig+0x24c>
 8001c88:	e018      	b.n	8001cbc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	438a      	bics	r2, r1
 8001c94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7fe ffcf 	bl	8000c38 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ca0:	f7fe ffca 	bl	8000c38 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e090      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d1f1      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d100      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2a8>
 8001cc6:	e084      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2238      	movs	r2, #56	; 0x38
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d000      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2c6>
 8001ce4:	e075      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e074      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2e0>
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cfe:	e01c      	b.n	8001d3a <HAL_RCC_OscConfig+0x31a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x302>
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d0e:	2104      	movs	r1, #4
 8001d10:	430a      	orrs	r2, r1
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x31a>
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x340>)
 8001d34:	2104      	movs	r1, #4
 8001d36:	438a      	bics	r2, r1
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d028      	beq.n	8001d94 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff79 	bl	8000c38 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7fe ff74 	bl	8000c38 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x364>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d915      	bls.n	8001d88 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e039      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	fffbffff 	.word	0xfffbffff
 8001d6c:	ffff80ff 	.word	0xffff80ff
 8001d70:	ffffc7ff 	.word	0xffffc7ff
 8001d74:	02dc6c00 	.word	0x02dc6c00
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	fffffeff 	.word	0xfffffeff
 8001d84:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_RCC_OscConfig+0x3bc>)
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0dc      	beq.n	8001d4c <HAL_RCC_OscConfig+0x32c>
 8001d92:	e013      	b.n	8001dbc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff50 	bl	8000c38 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ff4b 	bl	8000c38 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x3c0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e010      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x3bc>)
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_OscConfig+0x3bc>)
 8001dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_RCC_OscConfig+0x3bc>)
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x3c4>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b006      	add	sp, #24
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0e9      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4013      	ands	r3, r2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d91e      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4393      	bics	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe ff0c 	bl	8000c38 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7fe ff07 	bl	8000c38 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x1f4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0ca      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d017      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a60      	ldr	r2, [pc, #384]	; (8001fe4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e62:	401a      	ands	r2, r3
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	21b0      	movs	r1, #176	; 0xb0
 8001e68:	0109      	lsls	r1, r1, #4
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_ClockConfig+0x200>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d055      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	221c      	movs	r2, #28
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	029b      	lsls	r3, r3, #10
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d11f      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e08b      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d113      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e07f      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e074      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e06d      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f08:	f7fe fe96 	bl	8000c38 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f10:	e009      	b.n	8001f26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f12:	f7fe fe91 	bl	8000c38 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e054      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2238      	movs	r2, #56	; 0x38
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1ec      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	4013      	ands	r3, r2
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d21e      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f58:	f7fe fe6e 	bl	8000c38 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe fe69 	bl	8000c38 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e02c      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <HAL_RCC_ClockConfig+0x204>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fa2:	f000 f82b 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fa6:	0001      	movs	r1, r0
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	220f      	movs	r2, #15
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_RCC_ClockConfig+0x208>)
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	58d3      	ldr	r3, [r2, r3]
 8001fb8:	221f      	movs	r2, #31
 8001fba:	4013      	ands	r3, r2
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_ClockConfig+0x20c>)
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_ClockConfig+0x210>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fdd9 	bl	8000b80 <HAL_InitTick>
 8001fce:	0003      	movs	r3, r0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	ffff84ff 	.word	0xffff84ff
 8001fe8:	fffff0ff 	.word	0xfffff0ff
 8001fec:	ffff8fff 	.word	0xffff8fff
 8001ff0:	08002ff8 	.word	0x08002ff8
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_RCC_GetSysClockFreq+0x78>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	; 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x78>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0adb      	lsrs	r3, r3, #11
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4815      	ldr	r0, [pc, #84]	; (8002078 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002022:	f7fe f871 	bl	8000108 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	e01e      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_GetSysClockFreq+0x78>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	; 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_RCC_GetSysClockFreq+0x80>)
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e015      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_GetSysClockFreq+0x78>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2238      	movs	r2, #56	; 0x38
 8002044:	4013      	ands	r3, r2
 8002046:	2b20      	cmp	r3, #32
 8002048:	d103      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e00b      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_GetSysClockFreq+0x78>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2238      	movs	r2, #56	; 0x38
 8002058:	4013      	ands	r3, r2
 800205a:	2b18      	cmp	r3, #24
 800205c:	d103      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800205e:	23fa      	movs	r3, #250	; 0xfa
 8002060:	01db      	lsls	r3, r3, #7
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	02dc6c00 	.word	0x02dc6c00
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002088:	2313      	movs	r3, #19
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002090:	2312      	movs	r3, #18
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	d100      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020a4:	e079      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2011      	movs	r0, #17
 80020a8:	183b      	adds	r3, r7, r0
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	055b      	lsls	r3, r3, #21
 80020b6:	4013      	ands	r3, r2
 80020b8:	d110      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020be:	4b60      	ldr	r3, [pc, #384]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0549      	lsls	r1, r1, #21
 80020c4:	430a      	orrs	r2, r1
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020c8:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e0:	23c0      	movs	r3, #192	; 0xc0
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d014      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80020f8:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002102:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0249      	lsls	r1, r1, #9
 800210c:	430a      	orrs	r2, r1
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002116:	494c      	ldr	r1, [pc, #304]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002118:	400a      	ands	r2, r1
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800211c:	4b48      	ldr	r3, [pc, #288]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	d016      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fd85 	bl	8000c38 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002132:	e00c      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fd80 	bl	8000c38 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d904      	bls.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002144:	2313      	movs	r3, #19
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2203      	movs	r2, #3
 800214a:	701a      	strb	r2, [r3, #0]
          break;
 800214c:	e004      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d0ed      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002158:	2313      	movs	r3, #19
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	4a37      	ldr	r2, [pc, #220]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002172:	430a      	orrs	r2, r1
 8002174:	65da      	str	r2, [r3, #92]	; 0x5c
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	2312      	movs	r3, #18
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2213      	movs	r2, #19
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002184:	2311      	movs	r3, #17
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002194:	492e      	ldr	r1, [pc, #184]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	400a      	ands	r2, r1
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2203      	movs	r2, #3
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	01db      	lsls	r3, r3, #7
 80021de:	4013      	ands	r3, r2
 80021e0:	d008      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	0899      	lsrs	r1, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002210:	430a      	orrs	r2, r1
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	da09      	bge.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	22e0      	movs	r2, #224	; 0xe0
 8002222:	4393      	bics	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002230:	2312      	movs	r3, #18
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	781b      	ldrb	r3, [r3, #0]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	fffffcff 	.word	0xfffffcff
 8002248:	fffeffff 	.word	0xfffeffff
 800224c:	00001388 	.word	0x00001388
 8002250:	efffffff 	.word	0xefffffff
 8002254:	ffffcfff 	.word	0xffffcfff
 8002258:	ffff3fff 	.word	0xffff3fff

0800225c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0a8      	b.n	80023c0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	2382      	movs	r3, #130	; 0x82
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	429a      	cmp	r2, r3
 8002280:	d009      	beq.n	8002296 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
 8002288:	e005      	b.n	8002296 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	225d      	movs	r2, #93	; 0x5d
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	225c      	movs	r2, #92	; 0x5c
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7fe fa84 	bl	80007c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	225d      	movs	r2, #93	; 0x5d
 80022bc:	2102      	movs	r1, #2
 80022be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2140      	movs	r1, #64	; 0x40
 80022cc:	438a      	bics	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	23e0      	movs	r3, #224	; 0xe0
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d902      	bls.n	80022e2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e002      	b.n	80022e8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	23f0      	movs	r3, #240	; 0xf0
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d008      	beq.n	8002306 <HAL_SPI_Init+0xaa>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	23e0      	movs	r3, #224	; 0xe0
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	2382      	movs	r3, #130	; 0x82
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	2384      	movs	r3, #132	; 0x84
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	400b      	ands	r3, r1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2102      	movs	r1, #2
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2101      	movs	r1, #1
 800232c:	400b      	ands	r3, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6999      	ldr	r1, [r3, #24]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	400b      	ands	r3, r1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2138      	movs	r1, #56	; 0x38
 8002342:	400b      	ands	r3, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	400b      	ands	r3, r1
 800234e:	431a      	orrs	r2, r3
 8002350:	0011      	movs	r1, r2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	2204      	movs	r2, #4
 800236c:	401a      	ands	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2110      	movs	r1, #16
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	2108      	movs	r1, #8
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68d9      	ldr	r1, [r3, #12]
 8002386:	23f0      	movs	r3, #240	; 0xf0
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	400b      	ands	r3, r1
 800238c:	431a      	orrs	r2, r3
 800238e:	0011      	movs	r1, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4907      	ldr	r1, [pc, #28]	; (80023c8 <HAL_SPI_Init+0x16c>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	225d      	movs	r2, #93	; 0x5d
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	fffff7ff 	.word	0xfffff7ff

080023cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023dc:	231f      	movs	r3, #31
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	225c      	movs	r2, #92	; 0x5c
 80023e8:	5c9b      	ldrb	r3, [r3, r2]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_SPI_Transmit+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e171      	b.n	80026d6 <HAL_SPI_Transmit+0x30a>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	225c      	movs	r2, #92	; 0x5c
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023fa:	f7fe fc1d 	bl	8000c38 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002402:	2316      	movs	r3, #22
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	1dba      	adds	r2, r7, #6
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	225d      	movs	r2, #93	; 0x5d
 8002410:	5c9b      	ldrb	r3, [r3, r2]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d004      	beq.n	8002422 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002418:	231f      	movs	r3, #31
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002420:	e14e      	b.n	80026c0 <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_SPI_Transmit+0x64>
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002430:	231f      	movs	r3, #31
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
    goto error;
 8002438:	e142      	b.n	80026c0 <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	225d      	movs	r2, #93	; 0x5d
 800243e:	2103      	movs	r1, #3
 8002440:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1dba      	adds	r2, r7, #6
 8002452:	8812      	ldrh	r2, [r2, #0]
 8002454:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1dba      	adds	r2, r7, #6
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2244      	movs	r2, #68	; 0x44
 8002468:	2100      	movs	r1, #0
 800246a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2246      	movs	r2, #70	; 0x46
 8002470:	2100      	movs	r1, #0
 8002472:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	429a      	cmp	r2, r3
 800248a:	d110      	bne.n	80024ae <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d007      	beq.n	80024cc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	23e0      	movs	r3, #224	; 0xe0
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d94e      	bls.n	8002576 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_SPI_Transmit+0x11e>
 80024e0:	2316      	movs	r3, #22
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d13f      	bne.n	800256a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800250e:	e02c      	b.n	800256a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d112      	bne.n	8002544 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	1c9a      	adds	r2, r3, #2
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002542:	e012      	b.n	800256a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002544:	f7fe fb78 	bl	8000c38 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d802      	bhi.n	800255a <HAL_SPI_Transmit+0x18e>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_SPI_Transmit+0x194>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002560:	231f      	movs	r3, #31
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]
          goto error;
 8002568:	e0aa      	b.n	80026c0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1cd      	bne.n	8002510 <HAL_SPI_Transmit+0x144>
 8002574:	e080      	b.n	8002678 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_SPI_Transmit+0x1be>
 800257e:	2316      	movs	r3, #22
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d000      	beq.n	800258a <HAL_SPI_Transmit+0x1be>
 8002588:	e071      	b.n	800266e <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d912      	bls.n	80025ba <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b02      	subs	r3, #2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025b8:	e059      	b.n	800266e <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025e0:	e045      	b.n	800266e <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d12b      	bne.n	8002648 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d912      	bls.n	8002620 <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	1c9a      	adds	r2, r3, #2
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b02      	subs	r3, #2
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800261e:	e026      	b.n	800266e <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002646:	e012      	b.n	800266e <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002648:	f7fe faf6 	bl	8000c38 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d802      	bhi.n	800265e <HAL_SPI_Transmit+0x292>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x298>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2203      	movs	r2, #3
 800266a:	701a      	strb	r2, [r3, #0]
          goto error;
 800266c:	e028      	b.n	80026c0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1b4      	bne.n	80025e2 <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f95e 	bl	8002940 <SPI_EndRxTxTransaction>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d002      	beq.n	800268e <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 80026b4:	231f      	movs	r3, #31
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_SPI_Transmit+0x2f4>
  }

error:
 80026be:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	225d      	movs	r2, #93	; 0x5d
 80026c4:	2101      	movs	r1, #1
 80026c6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	225c      	movs	r2, #92	; 0x5c
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b008      	add	sp, #32
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f0:	f7fe faa2 	bl	8000c38 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002700:	f7fe fa9a 	bl	8000c38 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002708:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	015b      	lsls	r3, r3, #5
 800270e:	0d1b      	lsrs	r3, r3, #20
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	4353      	muls	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002716:	e058      	b.n	80027ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	d055      	beq.n	80027ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800271e:	f7fe fa8b 	bl	8000c38 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	429a      	cmp	r2, r3
 800272c:	d902      	bls.n	8002734 <SPI_WaitFlagStateUntilTimeout+0x54>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d142      	bne.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	21e0      	movs	r1, #224	; 0xe0
 8002740:	438a      	bics	r2, r1
 8002742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	2382      	movs	r3, #130	; 0x82
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	429a      	cmp	r2, r3
 800274e:	d113      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	429a      	cmp	r2, r3
 800275a:	d005      	beq.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2140      	movs	r1, #64	; 0x40
 8002774:	438a      	bics	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	429a      	cmp	r2, r3
 8002782:	d110      	bne.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002790:	400a      	ands	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0189      	lsls	r1, r1, #6
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	225d      	movs	r2, #93	; 0x5d
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	225c      	movs	r2, #92	; 0x5c
 80027b2:	2100      	movs	r1, #0
 80027b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e017      	b.n	80027ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	425a      	negs	r2, r3
 80027da:	4153      	adcs	r3, r2
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	001a      	movs	r2, r3
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d197      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b008      	add	sp, #32
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20000000 	.word	0x20000000
 80027f8:	ffffdfff 	.word	0xffffdfff

080027fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800280a:	2317      	movs	r3, #23
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002812:	f7fe fa11 	bl	8000c38 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002822:	f7fe fa09 	bl	8000c38 <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	0013      	movs	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	189b      	adds	r3, r3, r2
 800283c:	00da      	lsls	r2, r3, #3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	0d1b      	lsrs	r3, r3, #20
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	4353      	muls	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002848:	e068      	b.n	800291c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	429a      	cmp	r2, r3
 8002852:	d10a      	bne.n	800286a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	2117      	movs	r1, #23
 8002862:	187b      	adds	r3, r7, r1
 8002864:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002866:	187b      	adds	r3, r7, r1
 8002868:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	d055      	beq.n	800291c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002870:	f7fe f9e2 	bl	8000c38 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	429a      	cmp	r2, r3
 800287e:	d902      	bls.n	8002886 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	d142      	bne.n	800290c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	21e0      	movs	r1, #224	; 0xe0
 8002892:	438a      	bics	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	2382      	movs	r3, #130	; 0x82
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	429a      	cmp	r2, r3
 80028a0:	d113      	bne.n	80028ca <SPI_WaitFifoStateUntilTimeout+0xce>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d005      	beq.n	80028ba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d107      	bne.n	80028ca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d110      	bne.n	80028f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0189      	lsls	r1, r1, #6
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	225d      	movs	r2, #93	; 0x5d
 80028fc:	2101      	movs	r1, #1
 80028fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	225c      	movs	r2, #92	; 0x5c
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e010      	b.n	800292e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3b01      	subs	r3, #1
 800291a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d18e      	bne.n	800284a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b00a      	add	sp, #40	; 0x28
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000000 	.word	0x20000000
 800293c:	ffffdfff 	.word	0xffffdfff

08002940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	0159      	lsls	r1, r3, #5
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	0013      	movs	r3, r2
 800295a:	2200      	movs	r2, #0
 800295c:	f7ff ff4e 	bl	80027fc <SPI_WaitFifoStateUntilTimeout>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d007      	beq.n	8002974 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	2220      	movs	r2, #32
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e027      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	0013      	movs	r3, r2
 800297e:	2200      	movs	r2, #0
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	f7ff fead 	bl	80026e0 <SPI_WaitFlagStateUntilTimeout>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d007      	beq.n	800299a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	2220      	movs	r2, #32
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e014      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	00d9      	lsls	r1, r3, #3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	0013      	movs	r3, r2
 80029a8:	2200      	movs	r2, #0
 80029aa:	f7ff ff27 	bl	80027fc <SPI_WaitFifoStateUntilTimeout>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d007      	beq.n	80029c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	2220      	movs	r2, #32
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e000      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04a      	b.n	8002a74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	; 0x3d
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223c      	movs	r2, #60	; 0x3c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7fd ff45 	bl	8000884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223d      	movs	r2, #61	; 0x3d
 80029fe:	2102      	movs	r1, #2
 8002a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 f951 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2248      	movs	r2, #72	; 0x48
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223e      	movs	r2, #62	; 0x3e
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223f      	movs	r2, #63	; 0x3f
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2241      	movs	r2, #65	; 0x41
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2242      	movs	r2, #66	; 0x42
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2243      	movs	r2, #67	; 0x43
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2244      	movs	r2, #68	; 0x44
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2245      	movs	r2, #69	; 0x45
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2246      	movs	r2, #70	; 0x46
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2247      	movs	r2, #71	; 0x47
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	; 0x3d
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	223d      	movs	r2, #61	; 0x3d
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e02f      	b.n	8002af4 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	; 0x3d
 8002a98:	2102      	movs	r1, #2
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_TIM_Base_Start+0x80>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIM_Base_Start+0x34>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <HAL_TIM_Base_Start+0x84>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d116      	bne.n	8002ade <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_TIM_Base_Start+0x88>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d016      	beq.n	8002af0 <HAL_TIM_Base_Start+0x74>
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d011      	beq.n	8002af0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	e008      	b.n	8002af0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e000      	b.n	8002af2 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b004      	add	sp, #16
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	00010007 	.word	0x00010007

08002b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	230f      	movs	r3, #15
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223c      	movs	r2, #60	; 0x3c
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIM_ConfigClockSource+0x20>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0bc      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	223c      	movs	r2, #60	; 0x3c
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	223d      	movs	r2, #61	; 0x3d
 8002b34:	2102      	movs	r1, #2
 8002b36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0192      	lsls	r2, r2, #6
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d040      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0xde>
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0192      	lsls	r2, r2, #6
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d900      	bls.n	8002b6e <HAL_TIM_ConfigClockSource+0x66>
 8002b6c:	e088      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0152      	lsls	r2, r2, #5
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d100      	bne.n	8002b78 <HAL_TIM_ConfigClockSource+0x70>
 8002b76:	e088      	b.n	8002c8a <HAL_TIM_ConfigClockSource+0x182>
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0152      	lsls	r2, r2, #5
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d900      	bls.n	8002b82 <HAL_TIM_ConfigClockSource+0x7a>
 8002b80:	e07e      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002b82:	2b70      	cmp	r3, #112	; 0x70
 8002b84:	d018      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0xb0>
 8002b86:	d900      	bls.n	8002b8a <HAL_TIM_ConfigClockSource+0x82>
 8002b88:	e07a      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002b8a:	2b60      	cmp	r3, #96	; 0x60
 8002b8c:	d04f      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x126>
 8002b8e:	d900      	bls.n	8002b92 <HAL_TIM_ConfigClockSource+0x8a>
 8002b90:	e076      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002b92:	2b50      	cmp	r3, #80	; 0x50
 8002b94:	d03b      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x106>
 8002b96:	d900      	bls.n	8002b9a <HAL_TIM_ConfigClockSource+0x92>
 8002b98:	e072      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d057      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x146>
 8002b9e:	d900      	bls.n	8002ba2 <HAL_TIM_ConfigClockSource+0x9a>
 8002ba0:	e06e      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002ba2:	2b30      	cmp	r3, #48	; 0x30
 8002ba4:	d063      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x166>
 8002ba6:	d86b      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d060      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x166>
 8002bac:	d868      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d05d      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x166>
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d05b      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x166>
 8002bb6:	e063      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bc8:	f000 f95c 	bl	8002e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2277      	movs	r2, #119	; 0x77
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]
      break;
 8002be4:	e052      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	f000 f945 	bl	8002e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	01c9      	lsls	r1, r1, #7
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
      break;
 8002c0c:	e03e      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	f000 f8b6 	bl	8002d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2150      	movs	r1, #80	; 0x50
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f910 	bl	8002e4c <TIM_ITRx_SetConfig>
      break;
 8002c2c:	e02e      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	f000 f8d4 	bl	8002de8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2160      	movs	r1, #96	; 0x60
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f900 	bl	8002e4c <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e01e      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	f000 f896 	bl	8002d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f8f0 	bl	8002e4c <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e00e      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0019      	movs	r1, r3
 8002c78:	0010      	movs	r0, r2
 8002c7a:	f000 f8e7 	bl	8002e4c <TIM_ITRx_SetConfig>
      break;
 8002c7e:	e005      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c80:	230f      	movs	r3, #15
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
      break;
 8002c88:	e000      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c8a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223d      	movs	r2, #61	; 0x3d
 8002c90:	2101      	movs	r1, #1
 8002c92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	223c      	movs	r2, #60	; 0x3c
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	ffceff88 	.word	0xffceff88
 8002cb0:	ffff00ff 	.word	0xffff00ff

08002cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x20>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <TIM_Base_SetConfig+0xc4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2270      	movs	r2, #112	; 0x70
 8002cd8:	4393      	bics	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00f      	beq.n	8002d0e <TIM_Base_SetConfig+0x5a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <TIM_Base_SetConfig+0xc4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x5a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <TIM_Base_SetConfig+0xc8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x5a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <TIM_Base_SetConfig+0xcc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x5a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <TIM_Base_SetConfig+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <TIM_Base_SetConfig+0xd4>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	4393      	bics	r3, r2
 8002d26:	001a      	movs	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <TIM_Base_SetConfig+0xaa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <TIM_Base_SetConfig+0xcc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <TIM_Base_SetConfig+0xaa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <TIM_Base_SetConfig+0xd0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d103      	bne.n	8002d66 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	615a      	str	r2, [r3, #20]
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40002000 	.word	0x40002000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	fffffcff 	.word	0xfffffcff

08002d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4393      	bics	r3, r2
 8002da6:	001a      	movs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	22f0      	movs	r2, #240	; 0xf0
 8002db6:	4393      	bics	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	220a      	movs	r2, #10
 8002dc8:	4393      	bics	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b006      	add	sp, #24
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	4393      	bics	r3, r2
 8002e02:	001a      	movs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <TIM_TI2_ConfigInputStage+0x60>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	031b      	lsls	r3, r3, #12
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	22a0      	movs	r2, #160	; 0xa0
 8002e24:	4393      	bics	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	ffff0fff 	.word	0xffff0fff

08002e4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <TIM_ITRx_SetConfig+0x34>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	ffcfff8f 	.word	0xffcfff8f

08002e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <TIM_ETR_SetConfig+0x3c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b006      	add	sp, #24
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	ffff00ff 	.word	0xffff00ff

08002ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	223c      	movs	r2, #60	; 0x3c
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e04a      	b.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	223c      	movs	r2, #60	; 0x3c
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223d      	movs	r2, #61	; 0x3d
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2270      	movs	r2, #112	; 0x70
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223d      	movs	r2, #61	; 0x3d
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	223c      	movs	r2, #60	; 0x3c
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	ff0fffff 	.word	0xff0fffff
 8002f84:	40000400 	.word	0x40000400

08002f88 <memset>:
 8002f88:	0003      	movs	r3, r0
 8002f8a:	1882      	adds	r2, r0, r2
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	7019      	strb	r1, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	4c0c      	ldr	r4, [pc, #48]	; (8002fd0 <__libc_init_array+0x38>)
 8002f9e:	4d0d      	ldr	r5, [pc, #52]	; (8002fd4 <__libc_init_array+0x3c>)
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	2600      	movs	r6, #0
 8002faa:	f000 f819 	bl	8002fe0 <_init>
 8002fae:	4c0a      	ldr	r4, [pc, #40]	; (8002fd8 <__libc_init_array+0x40>)
 8002fb0:	4d0a      	ldr	r5, [pc, #40]	; (8002fdc <__libc_init_array+0x44>)
 8002fb2:	1b64      	subs	r4, r4, r5
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	00b3      	lsls	r3, r6, #2
 8002fbe:	58eb      	ldr	r3, [r5, r3]
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	00b3      	lsls	r3, r6, #2
 8002fc8:	58eb      	ldr	r3, [r5, r3]
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003038 	.word	0x08003038
 8002fd4:	08003038 	.word	0x08003038
 8002fd8:	0800303c 	.word	0x0800303c
 8002fdc:	08003038 	.word	0x08003038

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
