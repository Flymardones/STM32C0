
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d4  080076d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080076d4  080076d4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d4  080076d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080076dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000068  08007744  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08007744  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014861  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d66  00000000  00000000  00034934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000376a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7e  00000000  00000000  000387e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015c15  00000000  00000000  0003955e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016769  00000000  00000000  0004f173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082dc2  00000000  00000000  000658dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000485c  00000000  00000000  000e86a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ecefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007360 	.word	0x08007360

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08007360 	.word	0x08007360

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <HAL_TIM_PWM_PulseFinishedCallback>:
    }
}
#endif

#if PWM
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    // This function will be called when a PWM pulse is finished

    // Check if this is the TIM peripheral we're interested in
    // HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
    // transferDone = 1;
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <HAL_UARTEx_RxEventCallback>:
#endif


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	000a      	movs	r2, r1
 8000436:	1cbb      	adds	r3, r7, #2
 8000438:	801a      	strh	r2, [r3, #0]
    // This function will be called when a UART receive event is complete

    // Check if this is the UART peripheral we're interested in
    if (huart == &huart1) {
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_UARTEx_RxEventCallback+0x3c>)
 800043e:	429a      	cmp	r2, r3
 8000440:	d10d      	bne.n	800045e <HAL_UARTEx_RxEventCallback+0x32>

      uartData.dataReceived = true;
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_UARTEx_RxEventCallback+0x40>)
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
      uartData.dataSize = Size;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_UARTEx_RxEventCallback+0x40>)
 800044a:	1cba      	adds	r2, r7, #2
 800044c:	8812      	ldrh	r2, [r2, #0]
 800044e:	805a      	strh	r2, [r3, #2]
      HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuff, RX_BUFF_SIZE);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	005a      	lsls	r2, r3, #1
 8000454:	4906      	ldr	r1, [pc, #24]	; (8000470 <HAL_UARTEx_RxEventCallback+0x44>)
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f005 fdd3 	bl	8006004 <HAL_UARTEx_ReceiveToIdle_DMA>

    }
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000238 	.word	0x20000238
 800046c:	20000440 	.word	0x20000440
 8000470:	2000032c 	.word	0x2000032c

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f001 fc6e 	bl	8001d58 <HAL_Init>
  ws2812_spi.dma = 1;
  #endif


  #if PWM
  ws2812_pwm.dma = 1;
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <main+0x88>)
 800047e:	2201      	movs	r2, #1
 8000480:	741a      	strb	r2, [r3, #16]
  #endif
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f849 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 fa87 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 800048a:	f000 fa5f 	bl	800094c <MX_DMA_Init>
  MX_SPI1_Init();
 800048e:	f000 f887 	bl	80005a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000492:	f000 f8c3 	bl	800061c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000496:	f000 f9b1 	bl	80007fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800049a:	f000 fa09 	bl	80008b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuff, RX_BUFF_SIZE);
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	005a      	lsls	r2, r3, #1
 80004a2:	4917      	ldr	r1, [pc, #92]	; (8000500 <main+0x8c>)
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <main+0x90>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f005 fdac 	bl	8006004 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <main+0x94>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <main+0x94>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2104      	movs	r1, #4
 80004b8:	438a      	bics	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]

    #endif


    #if PWM
      if (fade_flag) {
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <main+0x98>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d007      	beq.n	80004d4 <main+0x60>
        ws2812_pwm_fade(&ws2812_pwm, fade_time);
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <main+0x9c>)
 80004c6:	881a      	ldrh	r2, [r3, #0]
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <main+0x88>)
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fe21 	bl	8001114 <ws2812_pwm_fade>
 80004d2:	e003      	b.n	80004dc <main+0x68>
      }
      else {
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2000      	movs	r0, #0
 80004d8:	f002 fa68 	bl	80029ac <HAL_PWR_EnterSLEEPMode>
      }
    #endif
    
    // Check if the DMA has gotten data from UART
    if (uartData.dataReceived) {
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <main+0xa0>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0eb      	beq.n	80004bc <main+0x48>
      ws2812_uart_commands(rxBuff, uartData.dataSize);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0xa0>)
 80004e6:	885a      	ldrh	r2, [r3, #2]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <main+0x8c>)
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 f9e7 	bl	80018c0 <ws2812_uart_commands>
      uartData.dataReceived = false;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <main+0xa0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
      if (fade_flag) {
 80004f8:	e7e0      	b.n	80004bc <main+0x48>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	2000042c 	.word	0x2000042c
 8000500:	2000032c 	.word	0x2000032c
 8000504:	20000238 	.word	0x20000238
 8000508:	200002cc 	.word	0x200002cc
 800050c:	20000444 	.word	0x20000444
 8000510:	20000446 	.word	0x20000446
 8000514:	20000440 	.word	0x20000440

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b08d      	sub	sp, #52	; 0x34
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	2414      	movs	r4, #20
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	231c      	movs	r3, #28
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f006 f8a1 	bl	8006670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	003b      	movs	r3, r7
 8000530:	0018      	movs	r0, r3
 8000532:	2314      	movs	r3, #20
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f006 f89a 	bl	8006670 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2240      	movs	r2, #64	; 0x40
 8000554:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	f002 fa43 	bl	80029e4 <HAL_RCC_OscConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000562:	f000 fa2f 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	003b      	movs	r3, r7
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	003b      	movs	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800057e:	003b      	movs	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	003b      	movs	r3, r7
 8000586:	2101      	movs	r1, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fc0f 	bl	8002dac <HAL_RCC_ClockConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000592:	f000 fa17 	bl	80009c4 <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00d      	add	sp, #52	; 0x34
 800059c:	bd90      	pop	{r4, r7, pc}
	...

080005a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_SPI1_Init+0x74>)
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <MX_SPI1_Init+0x78>)
 80005a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_SPI1_Init+0x74>)
 80005ac:	2282      	movs	r2, #130	; 0x82
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_SPI1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_SPI1_Init+0x74>)
 80005ba:	22e0      	movs	r2, #224	; 0xe0
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_SPI1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_SPI1_Init+0x74>)
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_SPI1_Init+0x74>)
 80005d6:	2218      	movs	r2, #24
 80005d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_SPI1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_SPI1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_SPI1_Init+0x74>)
 80005ee:	2207      	movs	r2, #7
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_SPI1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_SPI1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_SPI1_Init+0x74>)
 8000600:	0018      	movs	r0, r3
 8000602:	f002 fe2f 	bl	8003264 <HAL_SPI_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800060a:	f000 f9db 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000084 	.word	0x20000084
 8000618:	40013000 	.word	0x40013000

0800061c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	; 0x70
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	2360      	movs	r3, #96	; 0x60
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	2310      	movs	r3, #16
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f006 f81f 	bl	8006670 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	2354      	movs	r3, #84	; 0x54
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	0018      	movs	r0, r3
 8000638:	230c      	movs	r3, #12
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f006 f817 	bl	8006670 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	2338      	movs	r3, #56	; 0x38
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	231c      	movs	r3, #28
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f006 f80f 	bl	8006670 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	0018      	movs	r0, r3
 8000656:	2334      	movs	r3, #52	; 0x34
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f006 f808 	bl	8006670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000660:	4b63      	ldr	r3, [pc, #396]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000662:	4a64      	ldr	r2, [pc, #400]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 8000664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b60      	ldr	r3, [pc, #384]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 8000672:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000674:	223b      	movs	r2, #59	; 0x3b
 8000676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067e:	4b5c      	ldr	r3, [pc, #368]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800068a:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fea1 	bl	80033d4 <HAL_TIM_Base_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000696:	f000 f995 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	2160      	movs	r1, #96	; 0x60
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	0152      	lsls	r2, r2, #5
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a4:	187a      	adds	r2, r7, r1
 80006a6:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f003 fbde 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006b4:	f000 f986 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b8:	4b4d      	ldr	r3, [pc, #308]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 ff28 	bl	8003510 <HAL_TIM_PWM_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 f97e 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2154      	movs	r1, #84	; 0x54
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f004 f944 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80006ec:	f000 f96a 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f0:	2138      	movs	r1, #56	; 0x38
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2260      	movs	r2, #96	; 0x60
 80006f6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	1879      	adds	r1, r7, r1
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f003 faa2 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800072c:	f000 f94a 	bl	80009c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0192      	lsls	r2, r2, #6
 8000754:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0492      	lsls	r2, r2, #18
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f004 f953 	bl	8004a34 <HAL_TIMEx_ConfigBreakDeadTime>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000792:	f000 f917 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  if (!ws2812_pwm.dma) {
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_TIM1_Init+0x1dc>)
 8000798:	7c1b      	ldrb	r3, [r3, #16]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d11f      	bne.n	80007de <MX_TIM1_Init+0x1c2>
    TIM1->CR1 |= TIM_CR1_OPM;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007a4:	2108      	movs	r1, #8
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
    TIM1->CCER |= TIM_CCER_CC1P;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007ac:	6a1a      	ldr	r2, [r3, #32]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007b0:	2102      	movs	r1, #2
 80007b2:	430a      	orrs	r2, r1
 80007b4:	621a      	str	r2, [r3, #32]
    TIM1->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007bc:	2108      	movs	r1, #8
 80007be:	438a      	bics	r2, r1
 80007c0:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= TIM_CCMR1_OC1FE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007c8:	2104      	movs	r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	619a      	str	r2, [r3, #24]
    HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 f9d4 	bl	8003b80 <HAL_TIM_OnePulse_Start>
    TIM1->CCR1 = 1;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_TIM1_Init+0x1d8>)
 80007da:	2201      	movs	r2, #1
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  
  
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <MX_TIM1_Init+0x1d4>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fa11 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b01c      	add	sp, #112	; 0x70
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000144 	.word	0x20000144
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	2000042c 	.word	0x2000042c

080007fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	2310      	movs	r3, #16
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2310      	movs	r3, #16
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f005 ff2f 	bl	8006670 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	230c      	movs	r3, #12
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f005 ff28 	bl	8006670 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_TIM3_Init+0xac>)
 8000824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48 - 1;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000828:	222f      	movs	r2, #47	; 0x2f
 800082a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_TIM3_Init+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <MX_TIM3_Init+0xb0>)
 8000836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_TIM3_Init+0xa8>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 fdc4 	bl	80033d4 <HAL_TIM_Base_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000850:	f000 f8b8 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	2110      	movs	r1, #16
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0152      	lsls	r2, r2, #5
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	187a      	adds	r2, r7, r1
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f003 fb01 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800086e:	f000 f8a9 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f004 f873 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800088e:	f000 f899 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  HAL_TIM_Base_Start(&htim3);
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <MX_TIM3_Init+0xa8>)
 8000894:	0018      	movs	r0, r3
 8000896:	f002 fdf5 	bl	8003484 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b008      	add	sp, #32
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000190 	.word	0x20000190
 80008a8:	40000400 	.word	0x40000400
 80008ac:	0000ffff 	.word	0x0000ffff

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <MX_USART1_UART_Init+0x98>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008bc:	22e1      	movs	r2, #225	; 0xe1
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f004 f940 	bl	8004b80 <HAL_UART_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f85e 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800090a:	2100      	movs	r1, #0
 800090c:	0018      	movs	r0, r3
 800090e:	f005 faf7 	bl	8005f00 <HAL_UARTEx_SetTxFifoThreshold>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f855 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f005 fb2e 	bl	8005f80 <HAL_UARTEx_SetRxFifoThreshold>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f84c 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800092e:	0018      	movs	r0, r3
 8000930:	f005 faac 	bl	8005e8c <HAL_UARTEx_DisableFifoMode>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f844 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000238 	.word	0x20000238
 8000948:	40013800 	.word	0x40013800

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_DMA_Init+0x48>)
 8000954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_DMA_Init+0x48>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_DMA_Init+0x48>)
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2009      	movs	r0, #9
 8000970:	f001 fb50 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000974:	2009      	movs	r0, #9
 8000976:	f001 fb62 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200a      	movs	r0, #10
 8000980:	f001 fb48 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000984:	200a      	movs	r0, #10
 8000986:	f001 fb5a 	bl	800203e <HAL_NVIC_EnableIRQ>

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_GPIO_Init+0x28>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_GPIO_Init+0x28>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x28>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021000 	.word	0x40021000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x50>)
 80009d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_MspInit+0x50>)
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x50>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x50>)
 80009f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_MspInit+0x50>)
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	0549      	lsls	r1, r1, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x50>)
 80009fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	4013      	ands	r3, r2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	f001 fa46 	bl	8001e9c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8000a10:	2010      	movs	r0, #16
 8000a12:	f001 fa43 	bl	8001e9c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b091      	sub	sp, #68	; 0x44
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	232c      	movs	r3, #44	; 0x2c
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	0018      	movs	r0, r3
 8000a32:	2314      	movs	r3, #20
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f005 fe1a 	bl	8006670 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	2410      	movs	r4, #16
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	231c      	movs	r3, #28
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f005 fe12 	bl	8006670 <memset>
  if(hspi->Instance==SPI1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a38      	ldr	r2, [pc, #224]	; (8000b34 <HAL_SPI_MspInit+0x110>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d169      	bne.n	8000b2a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fb0e 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000a70:	f7ff ffa8 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0149      	lsls	r1, r1, #5
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	015b      	lsls	r3, r3, #5
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_SPI_MspInit+0x114>)
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aa8:	212c      	movs	r1, #44	; 0x2c
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fe01 	bl	80026d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_SPI_MspInit+0x11c>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000ade:	2211      	movs	r2, #17
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0152      	lsls	r2, r2, #5
 8000b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fab1 	bl	8002078 <HAL_DMA_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8000b1a:	f7ff ff53 	bl	80009c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000b22:	655a      	str	r2, [r3, #84]	; 0x54
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_SPI_MspInit+0x118>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b011      	add	sp, #68	; 0x44
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40013000 	.word	0x40013000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	200000e8 	.word	0x200000e8
 8000b40:	40020008 	.word	0x40020008

08000b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <HAL_TIM_Base_MspInit+0xb0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d138      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0109      	lsls	r1, r1, #4
 8000b60:	430a      	orrs	r2, r1
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel3;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_TIM_Base_MspInit+0xbc>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b7a:	2214      	movs	r2, #20
 8000b7c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b80:	2210      	movs	r2, #16
 8000b82:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	0052      	lsls	r2, r2, #1
 8000b96:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fa63 	bl	8002078 <HAL_DMA_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000bb6:	f7ff ff05 	bl	80009c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bc6:	e010      	b.n	8000bea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_TIM_Base_MspInit+0xc0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10b      	bne.n	8000bea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000bd8:	2102      	movs	r1, #2
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	2202      	movs	r2, #2
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b004      	add	sp, #16
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	200001dc 	.word	0x200001dc
 8000c00:	40020030 	.word	0x40020030
 8000c04:	40000400 	.word	0x40000400

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	240c      	movs	r4, #12
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	2314      	movs	r3, #20
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f005 fd28 	bl	8006670 <memset>
  if(htim->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_TIM_MspPostInit+0x70>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d122      	bne.n	8000c70 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2202      	movs	r2, #2
 8000c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2205      	movs	r2, #5
 8000c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fd34 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b009      	add	sp, #36	; 0x24
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	40012c00 	.word	0x40012c00
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b091      	sub	sp, #68	; 0x44
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	232c      	movs	r3, #44	; 0x2c
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2314      	movs	r3, #20
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f005 fcec 	bl	8006670 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	2410      	movs	r4, #16
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	231c      	movs	r3, #28
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f005 fce4 	bl	8006670 <memset>
  if(huart->Instance==USART1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <HAL_UART_MspInit+0x120>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d171      	bne.n	8000d96 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f002 f9e1 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff fe7b 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	01c9      	lsls	r1, r1, #7
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	01db      	lsls	r3, r3, #7
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d02:	212c      	movs	r1, #44	; 0x2c
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	22c0      	movs	r2, #192	; 0xc0
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2202      	movs	r2, #2
 8000d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2201      	movs	r2, #1
 8000d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	187a      	adds	r2, r7, r1
 8000d26:	23a0      	movs	r3, #160	; 0xa0
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f001 fcd3 	bl	80026d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_UART_MspInit+0x12c>)
 8000d36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d3a:	2232      	movs	r2, #50	; 0x32
 8000d3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 f984 	bl	8002078 <HAL_DMA_Init>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000d74:	f7ff fe26 	bl	80009c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d7e:	505a      	str	r2, [r3, r1]
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_UART_MspInit+0x128>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201b      	movs	r0, #27
 8000d8c:	f001 f942 	bl	8002014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d90:	201b      	movs	r0, #27
 8000d92:	f001 f954 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b011      	add	sp, #68	; 0x44
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40021000 	.word	0x40021000
 8000da8:	200002cc 	.word	0x200002cc
 8000dac:	4002001c 	.word	0x4002001c

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f001 f822 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <DMA1_Channel1_IRQHandler+0x14>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fb34 	bl	8002454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	200000e8 	.word	0x200000e8

08000df8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  // STOP PWM DMA and clear flag
  if ((0U != (DMA1->ISR & (DMA_FLAG_TC1 << (hdma_tim1_ch1.ChannelIndex & 0x1cU)))) && (0U != (hdma_tim1_ch1.Instance->CCR & DMA_IT_TC))) {
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <DMA1_Channel2_3_IRQHandler+0x5c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <DMA1_Channel2_3_IRQHandler+0x60>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	211c      	movs	r1, #28
 8000e06:	400b      	ands	r3, r1
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4099      	lsls	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d014      	beq.n	8000e3c <DMA1_Channel2_3_IRQHandler+0x44>
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <DMA1_Channel2_3_IRQHandler+0x60>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2202      	movs	r2, #2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d00e      	beq.n	8000e3c <DMA1_Channel2_3_IRQHandler+0x44>
      __HAL_DMA_CLEAR_FLAG(&hdma_tim1_ch1, DMA_FLAG_TC3);
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <DMA1_Channel2_3_IRQHandler+0x5c>)
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <DMA1_Channel2_3_IRQHandler+0x5c>)
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	0089      	lsls	r1, r1, #2
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	605a      	str	r2, [r3, #4]
      HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <DMA1_Channel2_3_IRQHandler+0x64>)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f002 fdbb 	bl	80039ac <HAL_TIM_PWM_Stop_DMA>
      transferDone = 1;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <DMA1_Channel2_3_IRQHandler+0x68>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <DMA1_Channel2_3_IRQHandler+0x6c>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 fb08 	bl	8002454 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <DMA1_Channel2_3_IRQHandler+0x60>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 fb04 	bl	8002454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40020000 	.word	0x40020000
 8000e58:	200001dc 	.word	0x200001dc
 8000e5c:	20000144 	.word	0x20000144
 8000e60:	20000328 	.word	0x20000328
 8000e64:	200002cc 	.word	0x200002cc

08000e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <USART1_IRQHandler+0x14>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f003 fedc 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000238 	.word	0x20000238

08000e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  return 1;
 8000e84:	2301      	movs	r3, #1
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_kill>:

int _kill(int pid, int sig)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e96:	f005 fcb7 	bl	8006808 <__errno>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	2216      	movs	r2, #22
 8000e9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_exit>:

void _exit (int status)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425a      	negs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ffe5 	bl	8000e8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ec2:	e7fe      	b.n	8000ec2 <_exit+0x16>

08000ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed6:	e000      	b.n	8000eda <_read+0x16>
 8000ed8:	bf00      	nop
 8000eda:	0001      	movs	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
  }

  return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b006      	add	sp, #24
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e000      	b.n	8000f1e <_write+0x20>
 8000f1c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x12>
  }
  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b006      	add	sp, #24
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:

int _close(int file)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	425b      	negs	r3, r3
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	0192      	lsls	r2, r2, #6
 8000f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f005 fc22 	bl	8006808 <__errno>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	18d2      	adds	r2, r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20001800 	.word	0x20001800
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	20000448 	.word	0x20000448
 8000ff8:	200005d0 	.word	0x200005d0

08000ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <SystemInit+0x14>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	0512      	lsls	r2, r2, #20
 8001006:	609a      	str	r2, [r3, #8]
#endif
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff fff0 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800101c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800101e:	e003      	b.n	8001028 <LoopCopyDataInit>

08001020 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001022:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001024:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001026:	3104      	adds	r1, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <LoopForever+0xa>)
  ldr r3, =_edata
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <LoopForever+0xe>)
  adds r2, r0, r1
 800102c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800102e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001030:	d3f6      	bcc.n	8001020 <CopyDataInit>
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  b LoopFillZerobss
 8001034:	e002      	b.n	800103c <LoopFillZerobss>

08001036 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  str  r3, [r2]
 8001038:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103a:	3204      	adds	r2, #4

0800103c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <LoopForever+0x16>)
  cmp r2, r3
 800103e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001040:	d3f9      	bcc.n	8001036 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001042:	f005 fbe7 	bl	8006814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fa15 	bl	8000474 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001050:	080076dc 	.word	0x080076dc
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001058:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 800105c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001060:	200005d0 	.word	0x200005d0

08001064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_IRQHandler>

08001066 <ws2812_set_led>:

#include "ws2812.h"


// Stores all LEDs in memory (3 bytes per LED * ws2812_conf->led_num = 75 bytes)
void ws2812_set_led(ws2812_configuration* ws2812_conf, uint8_t led, uint8_t red, uint8_t green, uint8_t blue) {
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	000c      	movs	r4, r1
 8001070:	0010      	movs	r0, r2
 8001072:	0019      	movs	r1, r3
 8001074:	1cfb      	adds	r3, r7, #3
 8001076:	1c22      	adds	r2, r4, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	1cbb      	adds	r3, r7, #2
 800107c:	1c02      	adds	r2, r0, #0
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	1c7b      	adds	r3, r7, #1
 8001082:	1c0a      	adds	r2, r1, #0
 8001084:	701a      	strb	r2, [r3, #0]

    if (led >= ws2812_conf->led_num) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	791b      	ldrb	r3, [r3, #4]
 800108a:	1cfa      	adds	r2, r7, #3
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d222      	bcs.n	80010d8 <ws2812_set_led+0x72>
        return;
    }
    uint8_t (*led_data)[3] = ws2812_conf->buffer;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	60fb      	str	r3, [r7, #12]

    led_data[led][0] = green;
 8001098:	1cfb      	adds	r3, r7, #3
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	0013      	movs	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	189b      	adds	r3, r3, r2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	18d3      	adds	r3, r2, r3
 80010a6:	1c7a      	adds	r2, r7, #1
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	701a      	strb	r2, [r3, #0]
    led_data[led][1] = red;
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	0013      	movs	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	189b      	adds	r3, r3, r2
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	1cba      	adds	r2, r7, #2
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	705a      	strb	r2, [r3, #1]
    led_data[led][2] = blue;
 80010c0:	1cfb      	adds	r3, r7, #3
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	0013      	movs	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	189b      	adds	r3, r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	18d2      	adds	r2, r2, r3
 80010ce:	2320      	movs	r3, #32
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	7093      	strb	r3, [r2, #2]
 80010d6:	e000      	b.n	80010da <ws2812_set_led+0x74>
        return;
 80010d8:	46c0      	nop			; (mov r8, r8)
}
 80010da:	46bd      	mov	sp, r7
 80010dc:	b005      	add	sp, #20
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <ws2812_delay_us>:


void ws2812_delay_us(uint16_t us) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	0002      	movs	r2, r0
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <ws2812_delay_us+0x30>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <ws2812_delay_us+0x30>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fc:	1dbb      	adds	r3, r7, #6
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f8      	bcc.n	80010f6 <ws2812_delay_us+0x16>
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000190 	.word	0x20000190

08001114 <ws2812_pwm_fade>:
    }
    ws2812_delay_us(280);
}

// #pragma GCC optimize ("O3")
void ws2812_pwm_fade(ws2812_configuration* ws2812_conf, uint16_t fade_time_ms) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	; 0x2c
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	000a      	movs	r2, r1
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	801a      	strh	r2, [r3, #0]

  uint16_t fade_delay = 0;
 8001122:	230e      	movs	r3, #14
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]
  uint8_t (*led_data)[3] = (uint8_t(*)[3])ws2812_conf->buffer;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	60bb      	str	r3, [r7, #8]
  
  /* Do nothing */
  if (fade_time_ms < ws2812_conf->brightness) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	795b      	ldrb	r3, [r3, #5]
 8001134:	b29b      	uxth	r3, r3
 8001136:	1cba      	adds	r2, r7, #2
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d200      	bcs.n	8001140 <ws2812_pwm_fade+0x2c>
 800113e:	e084      	b.n	800124a <ws2812_pwm_fade+0x136>
	return;
  }
  
  fade_delay = (fade_time_ms / ws2812_conf->brightness) / 2;
 8001140:	1cbb      	adds	r3, r7, #2
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	795b      	ldrb	r3, [r3, #5]
 8001148:	0019      	movs	r1, r3
 800114a:	0010      	movs	r0, r2
 800114c:	f7ff f87a 	bl	8000244 <__divsi3>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	da00      	bge.n	8001156 <ws2812_pwm_fade+0x42>
 8001154:	3301      	adds	r3, #1
 8001156:	105b      	asrs	r3, r3, #1
 8001158:	001a      	movs	r2, r3
 800115a:	230e      	movs	r3, #14
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	801a      	strh	r2, [r3, #0]
  
  for (int fade = ws2812_conf->brightness; fade >= 0; fade -= 2) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e031      	b.n	80011cc <ws2812_pwm_fade+0xb8>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e01f      	b.n	80011ae <ws2812_pwm_fade+0x9a>
        ws2812_pwm_data(ws2812_conf, led_data[i][GREEN],led_data[i][RED],led_data[i][BLUE], fade);
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	0013      	movs	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	189b      	adds	r3, r3, r2
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	7819      	ldrb	r1, [r3, #0]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	0013      	movs	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	189b      	adds	r3, r3, r2
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	18d3      	adds	r3, r2, r3
 8001188:	785c      	ldrb	r4, [r3, #1]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	0013      	movs	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	189b      	adds	r3, r3, r2
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	789a      	ldrb	r2, [r3, #2]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	0013      	movs	r3, r2
 80011a2:	0022      	movs	r2, r4
 80011a4:	f000 f856 	bl	8001254 <ws2812_pwm_data>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	3301      	adds	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	001a      	movs	r2, r3
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dbd9      	blt.n	800116e <ws2812_pwm_fade+0x5a>
    }
	HAL_Delay(fade_delay);
 80011ba:	230e      	movs	r3, #14
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 fe47 	bl	8001e54 <HAL_Delay>
  for (int fade = ws2812_conf->brightness; fade >= 0; fade -= 2) {
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b02      	subs	r3, #2
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	daca      	bge.n	8001168 <ws2812_pwm_fade+0x54>
  }
  
  for (int fade = 0; fade < ws2812_conf->brightness; fade += 2) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e031      	b.n	800123c <ws2812_pwm_fade+0x128>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	e01f      	b.n	800121e <ws2812_pwm_fade+0x10a>
        ws2812_pwm_data(ws2812_conf, led_data[i][GREEN],led_data[i][RED],led_data[i][BLUE], fade);
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	0013      	movs	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	189b      	adds	r3, r3, r2
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	7819      	ldrb	r1, [r3, #0]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	0013      	movs	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	18d3      	adds	r3, r2, r3
 80011f8:	785c      	ldrb	r4, [r3, #1]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	0013      	movs	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	189b      	adds	r3, r3, r2
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	789a      	ldrb	r2, [r3, #2]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	0013      	movs	r3, r2
 8001212:	0022      	movs	r2, r4
 8001214:	f000 f81e 	bl	8001254 <ws2812_pwm_data>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	3301      	adds	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	791b      	ldrb	r3, [r3, #4]
 8001222:	001a      	movs	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4293      	cmp	r3, r2
 8001228:	dbd9      	blt.n	80011de <ws2812_pwm_fade+0xca>
    }
	HAL_Delay(fade_delay);
 800122a:	230e      	movs	r3, #14
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fe0f 	bl	8001e54 <HAL_Delay>
  for (int fade = 0; fade < ws2812_conf->brightness; fade += 2) {
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3302      	adds	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	795b      	ldrb	r3, [r3, #5]
 8001240:	001a      	movs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4293      	cmp	r3, r2
 8001246:	dbc7      	blt.n	80011d8 <ws2812_pwm_fade+0xc4>
 8001248:	e000      	b.n	800124c <ws2812_pwm_fade+0x138>
	return;
 800124a:	46c0      	nop			; (mov r8, r8)
  }
}
 800124c:	46bd      	mov	sp, r7
 800124e:	b009      	add	sp, #36	; 0x24
 8001250:	bd90      	pop	{r4, r7, pc}
	...

08001254 <ws2812_pwm_data>:

// #pragma GCC optimize ("O3")
void ws2812_pwm_data(ws2812_configuration* ws2812_conf, uint8_t green, uint8_t red, uint8_t blue, uint8_t brightness) {
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b08d      	sub	sp, #52	; 0x34
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	000c      	movs	r4, r1
 800125e:	0010      	movs	r0, r2
 8001260:	0019      	movs	r1, r3
 8001262:	1cfb      	adds	r3, r7, #3
 8001264:	1c22      	adds	r2, r4, #0
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	1c7b      	adds	r3, r7, #1
 8001270:	1c0a      	adds	r2, r1, #0
 8001272:	701a      	strb	r2, [r3, #0]

	green = green * brightness / 100;
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	2440      	movs	r4, #64	; 0x40
 800127a:	193b      	adds	r3, r7, r4
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4353      	muls	r3, r2
 8001280:	2164      	movs	r1, #100	; 0x64
 8001282:	0018      	movs	r0, r3
 8001284:	f7fe ffde 	bl	8000244 <__divsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	001a      	movs	r2, r3
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	701a      	strb	r2, [r3, #0]
	red = red * brightness / 100;
 8001290:	1cbb      	adds	r3, r7, #2
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	193b      	adds	r3, r7, r4
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4353      	muls	r3, r2
 800129a:	2164      	movs	r1, #100	; 0x64
 800129c:	0018      	movs	r0, r3
 800129e:	f7fe ffd1 	bl	8000244 <__divsi3>
 80012a2:	0003      	movs	r3, r0
 80012a4:	001a      	movs	r2, r3
 80012a6:	1cbb      	adds	r3, r7, #2
 80012a8:	701a      	strb	r2, [r3, #0]
	blue = blue * brightness / 100;
 80012aa:	1c7b      	adds	r3, r7, #1
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4353      	muls	r3, r2
 80012b4:	2164      	movs	r1, #100	; 0x64
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7fe ffc4 	bl	8000244 <__divsi3>
 80012bc:	0003      	movs	r3, r0
 80012be:	001a      	movs	r2, r3
 80012c0:	1c7b      	adds	r3, r7, #1
 80012c2:	701a      	strb	r2, [r3, #0]

    if (ws2812_conf->dma) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7c1b      	ldrb	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d067      	beq.n	800139c <ws2812_pwm_data+0x148>
        uint8_t *send_data = ws2812_conf->ping_pong ? &ping_pong_data[0] : &ping_pong_data[24];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7c5b      	ldrb	r3, [r3, #17]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <ws2812_pwm_data+0x84>
 80012d4:	4b64      	ldr	r3, [pc, #400]	; (8001468 <ws2812_pwm_data+0x214>)
 80012d6:	e000      	b.n	80012da <ws2812_pwm_data+0x86>
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <ws2812_pwm_data+0x218>)
 80012da:	623b      	str	r3, [r7, #32]
        // uint16_t *send_data = ws2812_conf->ping_pong ? &ping_data[0] : &pong_data[0];
        

        for (int i = 0; i < 8; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e0:	e03a      	b.n	8001358 <ws2812_pwm_data+0x104>
            send_data[i] = (green & (1 << (7 - i))) ? 36 : 16;
 80012e2:	1cfb      	adds	r3, r7, #3
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	2107      	movs	r1, #7
 80012ea:	1acb      	subs	r3, r1, r3
 80012ec:	411a      	asrs	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	d001      	beq.n	80012fa <ws2812_pwm_data+0xa6>
 80012f6:	2124      	movs	r1, #36	; 0x24
 80012f8:	e000      	b.n	80012fc <ws2812_pwm_data+0xa8>
 80012fa:	2110      	movs	r1, #16
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	18d3      	adds	r3, r2, r3
 8001302:	1c0a      	adds	r2, r1, #0
 8001304:	701a      	strb	r2, [r3, #0]
            send_data[i + 8] = (red & (1 << (7 - i))) ? 36 : 16;
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	2107      	movs	r1, #7
 800130e:	1acb      	subs	r3, r1, r3
 8001310:	411a      	asrs	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	2201      	movs	r2, #1
 8001316:	4013      	ands	r3, r2
 8001318:	d001      	beq.n	800131e <ws2812_pwm_data+0xca>
 800131a:	2124      	movs	r1, #36	; 0x24
 800131c:	e000      	b.n	8001320 <ws2812_pwm_data+0xcc>
 800131e:	2110      	movs	r1, #16
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	3308      	adds	r3, #8
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	1c0a      	adds	r2, r1, #0
 800132a:	701a      	strb	r2, [r3, #0]
            send_data[i + 16] = (blue & (1 << (7 - i))) ? 36 : 16;
 800132c:	1c7b      	adds	r3, r7, #1
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	2107      	movs	r1, #7
 8001334:	1acb      	subs	r3, r1, r3
 8001336:	411a      	asrs	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	d001      	beq.n	8001344 <ws2812_pwm_data+0xf0>
 8001340:	2124      	movs	r1, #36	; 0x24
 8001342:	e000      	b.n	8001346 <ws2812_pwm_data+0xf2>
 8001344:	2110      	movs	r1, #16
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	3310      	adds	r3, #16
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	1c0a      	adds	r2, r1, #0
 8001350:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 8; i++) {
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	3301      	adds	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	2b07      	cmp	r3, #7
 800135c:	ddc1      	ble.n	80012e2 <ws2812_pwm_data+0x8e>
        }

        // Wait for DMA to finish
        while(!transferDone){}; 
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <ws2812_pwm_data+0x21c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0fa      	beq.n	8001360 <ws2812_pwm_data+0x10c>
        
        HAL_TIM_PWM_Start_DMA(ws2812_conf->handle, TIM_CHANNEL_1, (uint32_t*)send_data, 24);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	6a3a      	ldr	r2, [r7, #32]
 8001370:	2318      	movs	r3, #24
 8001372:	2100      	movs	r1, #0
 8001374:	f002 f92c 	bl	80035d0 <HAL_TIM_PWM_Start_DMA>
        transferDone = 0;
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <ws2812_pwm_data+0x21c>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
        ws2812_conf->ping_pong = !ws2812_conf->ping_pong;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7c5b      	ldrb	r3, [r3, #17]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	4193      	sbcs	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2201      	movs	r2, #1
 800138a:	4053      	eors	r3, r2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	1c1a      	adds	r2, r3, #0
 8001390:	2301      	movs	r3, #1
 8001392:	4013      	ands	r3, r2
 8001394:	b2da      	uxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	745a      	strb	r2, [r3, #17]

        }
        
      
    }
}
 800139a:	e061      	b.n	8001460 <ws2812_pwm_data+0x20c>
        for (int i = 0; i < 8; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a0:	e039      	b.n	8001416 <ws2812_pwm_data+0x1c2>
            send_data[i] = (green & (1 << (7 - i))) ? 20 : 44;
 80013a2:	1cfb      	adds	r3, r7, #3
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	2107      	movs	r1, #7
 80013aa:	1acb      	subs	r3, r1, r3
 80013ac:	411a      	asrs	r2, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d001      	beq.n	80013ba <ws2812_pwm_data+0x166>
 80013b6:	2114      	movs	r1, #20
 80013b8:	e000      	b.n	80013bc <ws2812_pwm_data+0x168>
 80013ba:	212c      	movs	r1, #44	; 0x2c
 80013bc:	2308      	movs	r3, #8
 80013be:	18fa      	adds	r2, r7, r3
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	1c0a      	adds	r2, r1, #0
 80013c6:	701a      	strb	r2, [r3, #0]
            send_data[i + 8] = (red & (1 << (7 - i))) ? 20 : 44;
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	2107      	movs	r1, #7
 80013d0:	1acb      	subs	r3, r1, r3
 80013d2:	411a      	asrs	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	d001      	beq.n	80013e0 <ws2812_pwm_data+0x18c>
 80013dc:	2114      	movs	r1, #20
 80013de:	e000      	b.n	80013e2 <ws2812_pwm_data+0x18e>
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	3308      	adds	r3, #8
 80013e6:	2208      	movs	r2, #8
 80013e8:	18ba      	adds	r2, r7, r2
 80013ea:	54d1      	strb	r1, [r2, r3]
            send_data[i + 16] = (blue & (1 << (7 - i))) ? 20 : 44;
 80013ec:	1c7b      	adds	r3, r7, #1
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	2107      	movs	r1, #7
 80013f4:	1acb      	subs	r3, r1, r3
 80013f6:	411a      	asrs	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d001      	beq.n	8001404 <ws2812_pwm_data+0x1b0>
 8001400:	2114      	movs	r1, #20
 8001402:	e000      	b.n	8001406 <ws2812_pwm_data+0x1b2>
 8001404:	212c      	movs	r1, #44	; 0x2c
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	3310      	adds	r3, #16
 800140a:	2208      	movs	r2, #8
 800140c:	18ba      	adds	r2, r7, r2
 800140e:	54d1      	strb	r1, [r2, r3]
        for (int i = 0; i < 8; i++) {
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	3301      	adds	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	2b07      	cmp	r3, #7
 800141a:	ddc2      	ble.n	80013a2 <ws2812_pwm_data+0x14e>
        for (int i = 0; i < 24; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	e01b      	b.n	800145a <ws2812_pwm_data+0x206>
            TIM1->CCR1 = send_data[i];
 8001422:	2308      	movs	r3, #8
 8001424:	18fa      	adds	r2, r7, r3
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <ws2812_pwm_data+0x220>)
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CR1 |= TIM_CR1_CEN;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <ws2812_pwm_data+0x220>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <ws2812_pwm_data+0x220>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
            while(!(TIM1->SR & TIM_SR_CC1IF)) {}; // Wait for the update event
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <ws2812_pwm_data+0x220>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d0fa      	beq.n	800143e <ws2812_pwm_data+0x1ea>
            TIM1->SR &= ~TIM_SR_CC1IF; // Clear the update event flag
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <ws2812_pwm_data+0x220>)
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <ws2812_pwm_data+0x220>)
 800144e:	2102      	movs	r1, #2
 8001450:	438a      	bics	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
        for (int i = 0; i < 24; i++) {
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3301      	adds	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	2b17      	cmp	r3, #23
 800145e:	dde0      	ble.n	8001422 <ws2812_pwm_data+0x1ce>
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b00d      	add	sp, #52	; 0x34
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	2000044c 	.word	0x2000044c
 800146c:	20000464 	.word	0x20000464
 8001470:	20000328 	.word	0x20000328
 8001474:	40012c00 	.word	0x40012c00

08001478 <ws2812_pwm_send_single>:

void ws2812_pwm_send_single(ws2812_configuration* ws2812_conf) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
    uint8_t (*led_data)[3] = (uint8_t(*)[3])ws2812_conf->buffer;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
    
    if (ws2812_conf->dma) {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c1b      	ldrb	r3, [r3, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <ws2812_pwm_send_single+0x1c>
        transferDone = 1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <ws2812_pwm_send_single+0x80>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
    }
    
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e01f      	b.n	80014da <ws2812_pwm_send_single+0x62>
        ws2812_pwm_data(ws2812_conf, led_data[i][GREEN],led_data[i][RED],led_data[i][BLUE], ws2812_conf->brightness);
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	0013      	movs	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	189b      	adds	r3, r3, r2
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	0013      	movs	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	189b      	adds	r3, r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	18d3      	adds	r3, r2, r3
 80014b4:	785c      	ldrb	r4, [r3, #1]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	0013      	movs	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	18d3      	adds	r3, r2, r3
 80014c2:	789a      	ldrb	r2, [r3, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	795b      	ldrb	r3, [r3, #5]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	0013      	movs	r3, r2
 80014ce:	0022      	movs	r2, r4
 80014d0:	f7ff fec0 	bl	8001254 <ws2812_pwm_data>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	001a      	movs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4293      	cmp	r3, r2
 80014e4:	dbd9      	blt.n	800149a <ws2812_pwm_send_single+0x22>

    }

    ws2812_delay_us(280);
 80014e6:	238c      	movs	r3, #140	; 0x8c
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fdf8 	bl	80010e0 <ws2812_delay_us>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b005      	add	sp, #20
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	20000328 	.word	0x20000328

080014fc <ws2812_pwm_send>:

// #pragma GCC optimize ("O3")
void ws2812_pwm_send(ws2812_configuration* ws2812_conf) {
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b093      	sub	sp, #76	; 0x4c
 8001500:	af00      	add	r7, sp, #0
 8001502:	61f8      	str	r0, [r7, #28]
 8001504:	4669      	mov	r1, sp
 8001506:	000e      	movs	r6, r1

    uint8_t (*led_data)[3] = (uint8_t(*)[3])ws2812_conf->buffer;
 8001508:	69f9      	ldr	r1, [r7, #28]
 800150a:	68c9      	ldr	r1, [r1, #12]
 800150c:	6379      	str	r1, [r7, #52]	; 0x34
    uint8_t send_data[ws2812_conf->led_num * 24];
 800150e:	69f9      	ldr	r1, [r7, #28]
 8001510:	7909      	ldrb	r1, [r1, #4]
 8001512:	0008      	movs	r0, r1
 8001514:	0001      	movs	r1, r0
 8001516:	0049      	lsls	r1, r1, #1
 8001518:	1809      	adds	r1, r1, r0
 800151a:	00c9      	lsls	r1, r1, #3
 800151c:	1e48      	subs	r0, r1, #1
 800151e:	6338      	str	r0, [r7, #48]	; 0x30
 8001520:	0008      	movs	r0, r1
 8001522:	6138      	str	r0, [r7, #16]
 8001524:	2000      	movs	r0, #0
 8001526:	6178      	str	r0, [r7, #20]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	0010      	movs	r0, r2
 800152e:	0f40      	lsrs	r0, r0, #29
 8001530:	613a      	str	r2, [r7, #16]
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	00dd      	lsls	r5, r3, #3
 8001536:	4305      	orrs	r5, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	00dc      	lsls	r4, r3, #3
 800153c:	0008      	movs	r0, r1
 800153e:	6038      	str	r0, [r7, #0]
 8001540:	2000      	movs	r0, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	683c      	ldr	r4, [r7, #0]
 8001546:	687d      	ldr	r5, [r7, #4]
 8001548:	0023      	movs	r3, r4
 800154a:	0f58      	lsrs	r0, r3, #29
 800154c:	002b      	movs	r3, r5
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4303      	orrs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	0023      	movs	r3, r4
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	000b      	movs	r3, r1
 8001560:	3307      	adds	r3, #7
 8001562:	08db      	lsrs	r3, r3, #3
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	466a      	mov	r2, sp
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	469d      	mov	sp, r3
 800156c:	466b      	mov	r3, sp
 800156e:	3300      	adds	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t green, red, blue;


   	for (int i = 0; i < ws2812_conf->led_num; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
 8001576:	e0e7      	b.n	8001748 <ws2812_pwm_send+0x24c>
        green = led_data[i][GREEN] * ws2812_conf->brightness / 100;
 8001578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800157a:	0013      	movs	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	189b      	adds	r3, r3, r2
 8001580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001582:	18d3      	adds	r3, r2, r3
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	001a      	movs	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	4353      	muls	r3, r2
 800158e:	2164      	movs	r1, #100	; 0x64
 8001590:	0018      	movs	r0, r3
 8001592:	f7fe fe57 	bl	8000244 <__divsi3>
 8001596:	0003      	movs	r3, r0
 8001598:	001a      	movs	r2, r3
 800159a:	2313      	movs	r3, #19
 800159c:	2118      	movs	r1, #24
 800159e:	185b      	adds	r3, r3, r1
 80015a0:	19db      	adds	r3, r3, r7
 80015a2:	701a      	strb	r2, [r3, #0]
        red = led_data[i][RED] * ws2812_conf->brightness / 100;
 80015a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015a6:	0013      	movs	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ae:	18d3      	adds	r3, r2, r3
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	001a      	movs	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	795b      	ldrb	r3, [r3, #5]
 80015b8:	4353      	muls	r3, r2
 80015ba:	2164      	movs	r1, #100	; 0x64
 80015bc:	0018      	movs	r0, r3
 80015be:	f7fe fe41 	bl	8000244 <__divsi3>
 80015c2:	0003      	movs	r3, r0
 80015c4:	001a      	movs	r2, r3
 80015c6:	2312      	movs	r3, #18
 80015c8:	2118      	movs	r1, #24
 80015ca:	185b      	adds	r3, r3, r1
 80015cc:	19db      	adds	r3, r3, r7
 80015ce:	701a      	strb	r2, [r3, #0]
        blue = led_data[i][BLUE] * ws2812_conf->brightness / 100;
 80015d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015d2:	0013      	movs	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015da:	18d3      	adds	r3, r2, r3
 80015dc:	789b      	ldrb	r3, [r3, #2]
 80015de:	001a      	movs	r2, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	4353      	muls	r3, r2
 80015e6:	2164      	movs	r1, #100	; 0x64
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7fe fe2b 	bl	8000244 <__divsi3>
 80015ee:	0003      	movs	r3, r0
 80015f0:	001a      	movs	r2, r3
 80015f2:	2311      	movs	r3, #17
 80015f4:	2118      	movs	r1, #24
 80015f6:	185b      	adds	r3, r3, r1
 80015f8:	19db      	adds	r3, r3, r7
 80015fa:	701a      	strb	r2, [r3, #0]

        if (ws2812_conf->dma) {
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	7c1b      	ldrb	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d04f      	beq.n	80016a4 <ws2812_pwm_send+0x1a8>
            for (int j = 0; j < 8; j++) {
 8001604:	2300      	movs	r3, #0
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
 8001608:	e048      	b.n	800169c <ws2812_pwm_send+0x1a0>
                int index = i * 24 + j;
 800160a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800160c:	0013      	movs	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	189b      	adds	r3, r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	001a      	movs	r2, r3
 8001616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001618:	189b      	adds	r3, r3, r2
 800161a:	623b      	str	r3, [r7, #32]
                send_data[index] = (green & (1 << (7 - j))) ? 36 : 16;
 800161c:	2313      	movs	r3, #19
 800161e:	2218      	movs	r2, #24
 8001620:	189b      	adds	r3, r3, r2
 8001622:	19db      	adds	r3, r3, r7
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001628:	2107      	movs	r1, #7
 800162a:	1acb      	subs	r3, r1, r3
 800162c:	411a      	asrs	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	d001      	beq.n	800163a <ws2812_pwm_send+0x13e>
 8001636:	2124      	movs	r1, #36	; 0x24
 8001638:	e000      	b.n	800163c <ws2812_pwm_send+0x140>
 800163a:	2110      	movs	r1, #16
 800163c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	1c0a      	adds	r2, r1, #0
 8001644:	701a      	strb	r2, [r3, #0]
                send_data[index + 8] = (red & (1 << (7 - j))) ? 36 : 16;
 8001646:	2312      	movs	r3, #18
 8001648:	2218      	movs	r2, #24
 800164a:	189b      	adds	r3, r3, r2
 800164c:	19db      	adds	r3, r3, r7
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001652:	2107      	movs	r1, #7
 8001654:	1acb      	subs	r3, r1, r3
 8001656:	411a      	asrs	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d001      	beq.n	8001664 <ws2812_pwm_send+0x168>
 8001660:	2124      	movs	r1, #36	; 0x24
 8001662:	e000      	b.n	8001666 <ws2812_pwm_send+0x16a>
 8001664:	2110      	movs	r1, #16
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	3308      	adds	r3, #8
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	54d1      	strb	r1, [r2, r3]
                send_data[index + 16] = (blue & (1 << (7 - j))) ? 36 : 16;
 800166e:	2311      	movs	r3, #17
 8001670:	2218      	movs	r2, #24
 8001672:	189b      	adds	r3, r3, r2
 8001674:	19db      	adds	r3, r3, r7
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800167a:	2107      	movs	r1, #7
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	411a      	asrs	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d001      	beq.n	800168c <ws2812_pwm_send+0x190>
 8001688:	2124      	movs	r1, #36	; 0x24
 800168a:	e000      	b.n	800168e <ws2812_pwm_send+0x192>
 800168c:	2110      	movs	r1, #16
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	3310      	adds	r3, #16
 8001692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001694:	54d1      	strb	r1, [r2, r3]
            for (int j = 0; j < 8; j++) {
 8001696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001698:	3301      	adds	r3, #1
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
 800169c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800169e:	2b07      	cmp	r3, #7
 80016a0:	ddb3      	ble.n	800160a <ws2812_pwm_send+0x10e>
 80016a2:	e04e      	b.n	8001742 <ws2812_pwm_send+0x246>
            }
        }
        else {
            for (int j = 0; j < 8; j++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a8:	e048      	b.n	800173c <ws2812_pwm_send+0x240>
                int index = i * 24 + j;
 80016aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016ac:	0013      	movs	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	001a      	movs	r2, r3
 80016b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b8:	189b      	adds	r3, r3, r2
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
                send_data[index] = (green & (1 << (7 - j))) ? 36 : 16;
 80016bc:	2313      	movs	r3, #19
 80016be:	2218      	movs	r2, #24
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	19db      	adds	r3, r3, r7
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c8:	2107      	movs	r1, #7
 80016ca:	1acb      	subs	r3, r1, r3
 80016cc:	411a      	asrs	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	d001      	beq.n	80016da <ws2812_pwm_send+0x1de>
 80016d6:	2124      	movs	r1, #36	; 0x24
 80016d8:	e000      	b.n	80016dc <ws2812_pwm_send+0x1e0>
 80016da:	2110      	movs	r1, #16
 80016dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	1c0a      	adds	r2, r1, #0
 80016e4:	701a      	strb	r2, [r3, #0]
                send_data[index + 8] = (red & (1 << (7 - j))) ? 36 : 16;
 80016e6:	2312      	movs	r3, #18
 80016e8:	2218      	movs	r2, #24
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	19db      	adds	r3, r3, r7
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f2:	2107      	movs	r1, #7
 80016f4:	1acb      	subs	r3, r1, r3
 80016f6:	411a      	asrs	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d001      	beq.n	8001704 <ws2812_pwm_send+0x208>
 8001700:	2124      	movs	r1, #36	; 0x24
 8001702:	e000      	b.n	8001706 <ws2812_pwm_send+0x20a>
 8001704:	2110      	movs	r1, #16
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3308      	adds	r3, #8
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	54d1      	strb	r1, [r2, r3]
                send_data[index + 16] = (blue & (1 << (7 - j))) ? 36 : 16;
 800170e:	2311      	movs	r3, #17
 8001710:	2218      	movs	r2, #24
 8001712:	189b      	adds	r3, r3, r2
 8001714:	19db      	adds	r3, r3, r7
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800171a:	2107      	movs	r1, #7
 800171c:	1acb      	subs	r3, r1, r3
 800171e:	411a      	asrs	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	d001      	beq.n	800172c <ws2812_pwm_send+0x230>
 8001728:	2124      	movs	r1, #36	; 0x24
 800172a:	e000      	b.n	800172e <ws2812_pwm_send+0x232>
 800172c:	2110      	movs	r1, #16
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3310      	adds	r3, #16
 8001732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001734:	54d1      	strb	r1, [r2, r3]
            for (int j = 0; j < 8; j++) {
 8001736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001738:	3301      	adds	r3, #1
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173e:	2b07      	cmp	r3, #7
 8001740:	ddb3      	ble.n	80016aa <ws2812_pwm_send+0x1ae>
   	for (int i = 0; i < ws2812_conf->led_num; i++) {
 8001742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001744:	3301      	adds	r3, #1
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	001a      	movs	r2, r3
 800174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001750:	4293      	cmp	r3, r2
 8001752:	da00      	bge.n	8001756 <ws2812_pwm_send+0x25a>
 8001754:	e710      	b.n	8001578 <ws2812_pwm_send+0x7c>
            }
        }
    }

    if (ws2812_conf->dma) {
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	7c1b      	ldrb	r3, [r3, #16]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <ws2812_pwm_send+0x28e>
        HAL_TIM_PWM_Start_DMA(ws2812_conf->handle, TIM_CHANNEL_1, (uint32_t *) send_data, ws2812_conf->led_num*24);
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	b29b      	uxth	r3, r3
 8001768:	2218      	movs	r2, #24
 800176a:	4353      	muls	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001770:	2100      	movs	r1, #0
 8001772:	f001 ff2d 	bl	80035d0 <HAL_TIM_PWM_Start_DMA>
        // while(!__HAL_DMA_GET_FLAG(&hdma_tim1_ch1, DMA_FLAG_TC3)) {};
        while(!transferDone){};
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <ws2812_pwm_send+0x2e8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0fa      	beq.n	8001778 <ws2812_pwm_send+0x27c>
        transferDone = 0;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <ws2812_pwm_send+0x2e8>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e022      	b.n	80017d0 <ws2812_pwm_send+0x2d4>
    }
    else {
        for (int i = 0; i < (ws2812_conf->led_num * 24); i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
 800178e:	e014      	b.n	80017ba <ws2812_pwm_send+0x2be>
            TIM1->CCR1 = (uint32_t)send_data[i];
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <ws2812_pwm_send+0x2ec>)
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CR1 |= TIM_CR1_CEN;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <ws2812_pwm_send+0x2ec>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <ws2812_pwm_send+0x2ec>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
            while(!(TIM1->SR & TIM_SR_CC1IF)) {}; // Wait for the update event
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <ws2812_pwm_send+0x2ec>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d0fa      	beq.n	80017aa <ws2812_pwm_send+0x2ae>
        for (int i = 0; i < (ws2812_conf->led_num * 24); i++) {
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	3301      	adds	r3, #1
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	001a      	movs	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	001a      	movs	r2, r3
 80017ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017cc:	4293      	cmp	r3, r2
 80017ce:	dbdf      	blt.n	8001790 <ws2812_pwm_send+0x294>
        }
    }
    ws2812_delay_us(280);
 80017d0:	238c      	movs	r3, #140	; 0x8c
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff fc83 	bl	80010e0 <ws2812_delay_us>
 80017da:	46b5      	mov	sp, r6
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b013      	add	sp, #76	; 0x4c
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e4:	20000328 	.word	0x20000328
 80017e8:	40012c00 	.word	0x40012c00

080017ec <ws2812_pwm_clear>:

void ws2812_pwm_clear(ws2812_configuration* ws2812_conf) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e00b      	b.n	8001812 <ws2812_pwm_clear+0x26>
        ws2812_set_led(ws2812_conf, i, 0, 0, 0);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b2d9      	uxtb	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	2300      	movs	r3, #0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	2200      	movs	r2, #0
 8001808:	f7ff fc2d 	bl	8001066 <ws2812_set_led>
    for (int i = 0; i < ws2812_conf->led_num; i++) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	001a      	movs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4293      	cmp	r3, r2
 800181c:	dbed      	blt.n	80017fa <ws2812_pwm_clear+0xe>
    }
    // ws2812_pwm_send(ws2812_conf);
    ws2812_pwm_send_single(ws2812_conf);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fe29 	bl	8001478 <ws2812_pwm_send_single>
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b004      	add	sp, #16
 800182c:	bd80      	pop	{r7, pc}

0800182e <ws2812_pwm_init>:


bool ws2812_pwm_init(ws2812_configuration* ws2812_conf) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

    uint8_t (*led_data)[3] = malloc(ws2812_conf->led_num * sizeof(*led_data));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	001a      	movs	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	189b      	adds	r3, r3, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f004 fcaa 	bl	800619c <malloc>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]

    if (led_data == NULL) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <ws2812_pwm_init+0x28>
        return false;
 8001852:	2300      	movs	r3, #0
 8001854:	e013      	b.n	800187e <ws2812_pwm_init+0x50>
    }
    
    ws2812_conf->buffer = led_data;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	60da      	str	r2, [r3, #12]
    memset(ws2812_conf->buffer, 0, ws2812_conf->led_num * sizeof(*led_data));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68d8      	ldr	r0, [r3, #12]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	791b      	ldrb	r3, [r3, #4]
 8001864:	001a      	movs	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	189b      	adds	r3, r3, r2
 800186c:	001a      	movs	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f004 fefe 	bl	8006670 <memset>

    ws2812_pwm_send(ws2812_conf);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff fe40 	bl	80014fc <ws2812_pwm_send>
    //ws2812_pwm_send_single(ws2812_conf);

    return true;
 800187c:	2301      	movs	r3, #1
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}

08001886 <ws2812_pwm_deinit>:

void ws2812_pwm_deinit(ws2812_configuration* ws2812_conf) {
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]

    free(ws2812_conf->buffer);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	0018      	movs	r0, r3
 8001894:	f004 fc8c 	bl	80061b0 <free>
    ws2812_conf->buffer = NULL;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
	ws2812_conf->handle = NULL;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
	ws2812_conf->led_num = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	711a      	strb	r2, [r3, #4]
	ws2812_conf->brightness = 0;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	715a      	strb	r2, [r3, #5]
	ws2812_conf->dma = 0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	741a      	strb	r2, [r3, #16]
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <ws2812_uart_commands>:
#define MAX_COMMAND_SIZE 10


uint8_t initialized = 0;

void ws2812_uart_commands(uint8_t* data, uint16_t size) {
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b093      	sub	sp, #76	; 0x4c
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	000a      	movs	r2, r1
 80018ca:	1cbb      	adds	r3, r7, #2
 80018cc:	801a      	strh	r2, [r3, #0]

    char *token;
    char *tokenizedInput[MAX_COMMAND_SIZE];
    int i = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38


    token = strtok((char*)data, ",");
 80018d2:	4ad6      	ldr	r2, [pc, #856]	; (8001c2c <ws2812_uart_commands+0x36c>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f004 fed1 	bl	8006680 <strtok>
 80018de:	0003      	movs	r3, r0
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (token != NULL) {
 80018e2:	e00e      	b.n	8001902 <ws2812_uart_commands+0x42>
        tokenizedInput[i++] = token;
 80018e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80018ea:	2208      	movs	r2, #8
 80018ec:	18ba      	adds	r2, r7, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018f2:	5099      	str	r1, [r3, r2]
        token = strtok(NULL, ",");
 80018f4:	4bcd      	ldr	r3, [pc, #820]	; (8001c2c <ws2812_uart_commands+0x36c>)
 80018f6:	0019      	movs	r1, r3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f004 fec1 	bl	8006680 <strtok>
 80018fe:	0003      	movs	r3, r0
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (token != NULL) {
 8001902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ed      	bne.n	80018e4 <ws2812_uart_commands+0x24>
    }

    if (strcmp(tokenizedInput[0], "INIT") == 0) {
 8001908:	2308      	movs	r3, #8
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4ac8      	ldr	r2, [pc, #800]	; (8001c30 <ws2812_uart_commands+0x370>)
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f7fe fbf8 	bl	8000108 <strcmp>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d137      	bne.n	800198c <ws2812_uart_commands+0xcc>
            initialized = 1;
        }
        #endif

        #if PWM
        if (initialized) {
 800191c:	4bc5      	ldr	r3, [pc, #788]	; (8001c34 <ws2812_uart_commands+0x374>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <ws2812_uart_commands+0x7e>
            ws2812_pwm_deinit(&ws2812_pwm);
 8001924:	4bc4      	ldr	r3, [pc, #784]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff ffad 	bl	8001886 <ws2812_pwm_deinit>
            initialized = 0;
 800192c:	4bc1      	ldr	r3, [pc, #772]	; (8001c34 <ws2812_uart_commands+0x374>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
            fade_flag = 0;
 8001932:	4bc2      	ldr	r3, [pc, #776]	; (8001c3c <ws2812_uart_commands+0x37c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
            fade_time = 0;
 8001938:	4bc1      	ldr	r3, [pc, #772]	; (8001c40 <ws2812_uart_commands+0x380>)
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]
        }
        ws2812_pwm.handle = &htim1;
 800193e:	4bbe      	ldr	r3, [pc, #760]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001940:	4ac0      	ldr	r2, [pc, #768]	; (8001c44 <ws2812_uart_commands+0x384>)
 8001942:	601a      	str	r2, [r3, #0]
        ws2812_pwm.led_num = atoi(tokenizedInput[1]);
 8001944:	2408      	movs	r4, #8
 8001946:	193b      	adds	r3, r7, r4
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f004 fc20 	bl	8006190 <atoi>
 8001950:	0003      	movs	r3, r0
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4bb8      	ldr	r3, [pc, #736]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001956:	711a      	strb	r2, [r3, #4]
        ws2812_pwm.brightness = atoi(tokenizedInput[2]);
 8001958:	193b      	adds	r3, r7, r4
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	0018      	movs	r0, r3
 800195e:	f004 fc17 	bl	8006190 <atoi>
 8001962:	0003      	movs	r3, r0
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4bb4      	ldr	r3, [pc, #720]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001968:	715a      	strb	r2, [r3, #5]
        ws2812_pwm.dma = 1;
 800196a:	4bb3      	ldr	r3, [pc, #716]	; (8001c38 <ws2812_uart_commands+0x378>)
 800196c:	2201      	movs	r2, #1
 800196e:	741a      	strb	r2, [r3, #16]
        ws2812_pwm.ping_pong = true;
 8001970:	4bb1      	ldr	r3, [pc, #708]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001972:	2201      	movs	r2, #1
 8001974:	745a      	strb	r2, [r3, #17]


        if(ws2812_pwm_init(&ws2812_pwm)) {
 8001976:	4bb0      	ldr	r3, [pc, #704]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff ff58 	bl	800182e <ws2812_pwm_init>
 800197e:	1e03      	subs	r3, r0, #0
 8001980:	d100      	bne.n	8001984 <ws2812_uart_commands+0xc4>
 8001982:	e1ce      	b.n	8001d22 <ws2812_uart_commands+0x462>
            initialized = 1;
 8001984:	4bab      	ldr	r3, [pc, #684]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e1ca      	b.n	8001d22 <ws2812_uart_commands+0x462>
        }

        #endif

    }
    else if (strcmp(tokenizedInput[0], "DEINIT") == 0) {
 800198c:	2308      	movs	r3, #8
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4aad      	ldr	r2, [pc, #692]	; (8001c48 <ws2812_uart_commands+0x388>)
 8001994:	0011      	movs	r1, r2
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe fbb6 	bl	8000108 <strcmp>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d10e      	bne.n	80019be <ws2812_uart_commands+0xfe>
        ws2812_spi_clear(&ws2812_spi);
        ws2812_spi_deinit(&ws2812_spi);
        #endif

        #if PWM
        ws2812_pwm_clear(&ws2812_pwm);
 80019a0:	4ba5      	ldr	r3, [pc, #660]	; (8001c38 <ws2812_uart_commands+0x378>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff22 	bl	80017ec <ws2812_pwm_clear>
        ws2812_pwm_deinit(&ws2812_pwm);
 80019a8:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <ws2812_uart_commands+0x378>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff ff6b 	bl	8001886 <ws2812_pwm_deinit>
        #endif
        initialized = 0;
 80019b0:	4ba0      	ldr	r3, [pc, #640]	; (8001c34 <ws2812_uart_commands+0x374>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
        fade_flag = 0;
 80019b6:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <ws2812_uart_commands+0x37c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e1b1      	b.n	8001d22 <ws2812_uart_commands+0x462>
    }
    else if (strcmp(tokenizedInput[0], "SET_ALL") == 0 && initialized) {
 80019be:	2308      	movs	r3, #8
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4aa1      	ldr	r2, [pc, #644]	; (8001c4c <ws2812_uart_commands+0x38c>)
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe fb9d 	bl	8000108 <strcmp>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d134      	bne.n	8001a3c <ws2812_uart_commands+0x17c>
 80019d2:	4b98      	ldr	r3, [pc, #608]	; (8001c34 <ws2812_uart_commands+0x374>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d030      	beq.n	8001a3c <ws2812_uart_commands+0x17c>
        // ws2812_spi_send(&ws2812_spi);
        ws2812_spi_send_single(&ws2812_spi);
        #endif

        #if PWM
        for (int i = 0; i < ws2812_pwm.led_num; i++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e022      	b.n	8001a26 <ws2812_uart_commands+0x166>
            ws2812_set_led(&ws2812_pwm, i, atoi(tokenizedInput[1]), atoi(tokenizedInput[2]), atoi(tokenizedInput[3]));
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	b2dc      	uxtb	r4, r3
 80019e4:	2608      	movs	r6, #8
 80019e6:	19bb      	adds	r3, r7, r6
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f004 fbd0 	bl	8006190 <atoi>
 80019f0:	0003      	movs	r3, r0
 80019f2:	b2dd      	uxtb	r5, r3
 80019f4:	19bb      	adds	r3, r7, r6
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f004 fbc9 	bl	8006190 <atoi>
 80019fe:	0003      	movs	r3, r0
 8001a00:	b2de      	uxtb	r6, r3
 8001a02:	2308      	movs	r3, #8
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f004 fbc1 	bl	8006190 <atoi>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4889      	ldr	r0, [pc, #548]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	0033      	movs	r3, r6
 8001a18:	002a      	movs	r2, r5
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	f7ff fb23 	bl	8001066 <ws2812_set_led>
        for (int i = 0; i < ws2812_pwm.led_num; i++) {
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	3301      	adds	r3, #1
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
 8001a26:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	dbd6      	blt.n	80019e0 <ws2812_uart_commands+0x120>
        }
        // ws2812_pwm_send(&ws2812_pwm);
        ws2812_pwm_send_single(&ws2812_pwm);
 8001a32:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fd1f 	bl	8001478 <ws2812_pwm_send_single>
 8001a3a:	e172      	b.n	8001d22 <ws2812_uart_commands+0x462>
        #endif

    }
    else if (strcmp(tokenizedInput[0], "SET_SINGLE") == 0 && initialized) {
 8001a3c:	2408      	movs	r4, #8
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a83      	ldr	r2, [pc, #524]	; (8001c50 <ws2812_uart_commands+0x390>)
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7fe fb5e 	bl	8000108 <strcmp>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d12d      	bne.n	8001aac <ws2812_uart_commands+0x1ec>
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d029      	beq.n	8001aac <ws2812_uart_commands+0x1ec>
        // ws2812_spi_send(&ws2812_spi);
        ws2812_spi_send_single(&ws2812_spi);
        #endif

        #if PWM
        ws2812_set_led(&ws2812_pwm, atoi(tokenizedInput[1]), atoi(tokenizedInput[2]), atoi(tokenizedInput[3]), atoi(tokenizedInput[4]));
 8001a58:	0026      	movs	r6, r4
 8001a5a:	19bb      	adds	r3, r7, r6
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f004 fb96 	bl	8006190 <atoi>
 8001a64:	0003      	movs	r3, r0
 8001a66:	b2dc      	uxtb	r4, r3
 8001a68:	19bb      	adds	r3, r7, r6
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f004 fb8f 	bl	8006190 <atoi>
 8001a72:	0003      	movs	r3, r0
 8001a74:	b2dd      	uxtb	r5, r3
 8001a76:	19bb      	adds	r3, r7, r6
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f004 fb88 	bl	8006190 <atoi>
 8001a80:	0003      	movs	r3, r0
 8001a82:	b2de      	uxtb	r6, r3
 8001a84:	2308      	movs	r3, #8
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f004 fb80 	bl	8006190 <atoi>
 8001a90:	0003      	movs	r3, r0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4868      	ldr	r0, [pc, #416]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	0033      	movs	r3, r6
 8001a9a:	002a      	movs	r2, r5
 8001a9c:	0021      	movs	r1, r4
 8001a9e:	f7ff fae2 	bl	8001066 <ws2812_set_led>
        // ws2812_pwm_send(&ws2812_pwm);
        ws2812_pwm_send_single(&ws2812_pwm);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff fce7 	bl	8001478 <ws2812_pwm_send_single>
 8001aaa:	e13a      	b.n	8001d22 <ws2812_uart_commands+0x462>
        #endif

    }
    else if (strcmp(tokenizedInput[0], "SET_BRIGHTNESS") == 0 && initialized) {
 8001aac:	2408      	movs	r4, #8
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a68      	ldr	r2, [pc, #416]	; (8001c54 <ws2812_uart_commands+0x394>)
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7fe fb26 	bl	8000108 <strcmp>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d111      	bne.n	8001ae4 <ws2812_uart_commands+0x224>
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <ws2812_uart_commands+0x224>
        // ws2812_spi_send(&ws2812_spi);
        ws2812_spi_send_single(&ws2812_spi);
        #endif

        #if PWM
        ws2812_pwm.brightness = atoi(tokenizedInput[1]);
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f004 fb5f 	bl	8006190 <atoi>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001ad8:	715a      	strb	r2, [r3, #5]
        // ws2812_pwm_send(&ws2812_pwm);
        ws2812_pwm_send_single(&ws2812_pwm);
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fccb 	bl	8001478 <ws2812_pwm_send_single>
 8001ae2:	e11e      	b.n	8001d22 <ws2812_uart_commands+0x462>
        #endif
    }
    else if (strcmp(tokenizedInput[0], "CLEAR_ALL") == 0 && initialized) {
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <ws2812_uart_commands+0x398>)
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fb0a 	bl	8000108 <strcmp>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d11d      	bne.n	8001b34 <ws2812_uart_commands+0x274>
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d019      	beq.n	8001b34 <ws2812_uart_commands+0x274>
        // ws2812_spi_send(&ws2812_spi);
        ws2812_spi_send_single(&ws2812_spi);
        #endif

        #if PWM
        for (int i = 0; i < ws2812_pwm.led_num; i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
 8001b04:	e00b      	b.n	8001b1e <ws2812_uart_commands+0x25e>
            ws2812_set_led(&ws2812_pwm, i, 0, 0, 0);
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	b2d9      	uxtb	r1, r3
 8001b0a:	484b      	ldr	r0, [pc, #300]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	2200      	movs	r2, #0
 8001b14:	f7ff faa7 	bl	8001066 <ws2812_set_led>
        for (int i = 0; i < ws2812_pwm.led_num; i++) {
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	001a      	movs	r2, r3
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	4293      	cmp	r3, r2
 8001b28:	dbed      	blt.n	8001b06 <ws2812_uart_commands+0x246>
        }
        // ws2812_pwm_send(&ws2812_pwm);
        ws2812_pwm_send_single(&ws2812_pwm);
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fca3 	bl	8001478 <ws2812_pwm_send_single>
 8001b32:	e0f6      	b.n	8001d22 <ws2812_uart_commands+0x462>
        #endif
    }
    else if (strcmp(tokenizedInput[0], "CLEAR_SINGLE") == 0 && initialized) {
 8001b34:	2408      	movs	r4, #8
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <ws2812_uart_commands+0x39c>)
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7fe fae2 	bl	8000108 <strcmp>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d116      	bne.n	8001b76 <ws2812_uart_commands+0x2b6>
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <ws2812_uart_commands+0x2b6>
        // ws2812_spi_send(&ws2812_spi);
        ws2812_spi_send_single(&ws2812_spi);
        #endif

        #if PWM
        ws2812_set_led(&ws2812_pwm, atoi(tokenizedInput[1]), 0, 0, 0);
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f004 fb1b 	bl	8006190 <atoi>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	b2d9      	uxtb	r1, r3
 8001b5e:	4836      	ldr	r0, [pc, #216]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001b60:	2300      	movs	r3, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	2200      	movs	r2, #0
 8001b68:	f7ff fa7d 	bl	8001066 <ws2812_set_led>
        // ws2812_pwm_send(&ws2812_pwm);
        ws2812_pwm_send_single(&ws2812_pwm);
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fc82 	bl	8001478 <ws2812_pwm_send_single>
 8001b74:	e0d5      	b.n	8001d22 <ws2812_uart_commands+0x462>
        #endif
    }
    else if (strcmp(tokenizedInput[0], "START_FADE_ALL") == 0 && initialized) {
 8001b76:	2308      	movs	r3, #8
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <ws2812_uart_commands+0x3a0>)
 8001b7e:	0011      	movs	r1, r2
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7fe fac1 	bl	8000108 <strcmp>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d13d      	bne.n	8001c06 <ws2812_uart_commands+0x346>
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d039      	beq.n	8001c06 <ws2812_uart_commands+0x346>
            ws2812_set_led(&ws2812_spi, i, (uint8_t)atoi(tokenizedInput[1]), (uint8_t)atoi(tokenizedInput[2]), (uint8_t)atoi(tokenizedInput[3]));
        }
        #endif
	
        #if PWM
        for (i = 0; i < ws2812_pwm.led_num; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b96:	e022      	b.n	8001bde <ws2812_uart_commands+0x31e>
            ws2812_set_led(&ws2812_pwm, i, (uint8_t)atoi(tokenizedInput[1]), (uint8_t)atoi(tokenizedInput[2]), (uint8_t)atoi(tokenizedInput[3]));
 8001b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9a:	b2dc      	uxtb	r4, r3
 8001b9c:	2608      	movs	r6, #8
 8001b9e:	19bb      	adds	r3, r7, r6
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f004 faf4 	bl	8006190 <atoi>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	b2dd      	uxtb	r5, r3
 8001bac:	19bb      	adds	r3, r7, r6
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f004 faed 	bl	8006190 <atoi>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	b2de      	uxtb	r6, r3
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f004 fae5 	bl	8006190 <atoi>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	481b      	ldr	r0, [pc, #108]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	0033      	movs	r3, r6
 8001bd0:	002a      	movs	r2, r5
 8001bd2:	0021      	movs	r1, r4
 8001bd4:	f7ff fa47 	bl	8001066 <ws2812_set_led>
        for (i = 0; i < ws2812_pwm.led_num; i++) {
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	3301      	adds	r3, #1
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <ws2812_uart_commands+0x378>)
 8001be0:	791b      	ldrb	r3, [r3, #4]
 8001be2:	001a      	movs	r2, r3
 8001be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be6:	4293      	cmp	r3, r2
 8001be8:	dbd6      	blt.n	8001b98 <ws2812_uart_commands+0x2d8>
        }
        #endif
	
        fade_time = (uint16_t)atoi(tokenizedInput[4]);
 8001bea:	2308      	movs	r3, #8
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f004 facd 	bl	8006190 <atoi>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <ws2812_uart_commands+0x380>)
 8001bfc:	801a      	strh	r2, [r3, #0]
        fade_flag = 1;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <ws2812_uart_commands+0x37c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e08d      	b.n	8001d22 <ws2812_uart_commands+0x462>
    }
    else if (strcmp(tokenizedInput[0], "STOP_FADE_ALL") == 0 && initialized) {
 8001c06:	2308      	movs	r3, #8
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <ws2812_uart_commands+0x3a4>)
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fa79 	bl	8000108 <strcmp>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d126      	bne.n	8001c68 <ws2812_uart_commands+0x3a8>
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <ws2812_uart_commands+0x374>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d022      	beq.n	8001c68 <ws2812_uart_commands+0x3a8>
        fade_flag = 0;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <ws2812_uart_commands+0x37c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e07b      	b.n	8001d22 <ws2812_uart_commands+0x462>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	08007378 	.word	0x08007378
 8001c30:	0800737c 	.word	0x0800737c
 8001c34:	2000047c 	.word	0x2000047c
 8001c38:	2000042c 	.word	0x2000042c
 8001c3c:	20000444 	.word	0x20000444
 8001c40:	20000446 	.word	0x20000446
 8001c44:	20000144 	.word	0x20000144
 8001c48:	08007384 	.word	0x08007384
 8001c4c:	0800738c 	.word	0x0800738c
 8001c50:	08007394 	.word	0x08007394
 8001c54:	080073a0 	.word	0x080073a0
 8001c58:	080073b0 	.word	0x080073b0
 8001c5c:	080073bc 	.word	0x080073bc
 8001c60:	080073cc 	.word	0x080073cc
 8001c64:	080073dc 	.word	0x080073dc
    }
    else if (strcmp(tokenizedInput[0], "START_FADE_SINGLE") == 0 && initialized) {
 8001c68:	2408      	movs	r4, #8
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <ws2812_uart_commands+0x47c>)
 8001c70:	0011      	movs	r1, r2
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fa48 	bl	8000108 <strcmp>
 8001c78:	1e03      	subs	r3, r0, #0
 8001c7a:	d136      	bne.n	8001cea <ws2812_uart_commands+0x42a>
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <ws2812_uart_commands+0x480>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d032      	beq.n	8001cea <ws2812_uart_commands+0x42a>
        #if SPI
        ws2812_set_led(&ws2812_spi, (uint8_t)atoi(tokenizedInput[1]), (uint8_t)atoi(tokenizedInput[2]), (uint8_t)atoi(tokenizedInput[3]), (uint8_t)atoi(tokenizedInput[4]));
        #endif
        
        #if PWM
        ws2812_set_led(&ws2812_pwm, (uint8_t)atoi(tokenizedInput[1]), (uint8_t)atoi(tokenizedInput[2]), (uint8_t)atoi(tokenizedInput[3]), (uint8_t)atoi(tokenizedInput[4]));
 8001c84:	0026      	movs	r6, r4
 8001c86:	19bb      	adds	r3, r7, r6
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f004 fa80 	bl	8006190 <atoi>
 8001c90:	0003      	movs	r3, r0
 8001c92:	b2dc      	uxtb	r4, r3
 8001c94:	19bb      	adds	r3, r7, r6
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f004 fa79 	bl	8006190 <atoi>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	b2dd      	uxtb	r5, r3
 8001ca2:	19bb      	adds	r3, r7, r6
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f004 fa72 	bl	8006190 <atoi>
 8001cac:	0003      	movs	r3, r0
 8001cae:	b2de      	uxtb	r6, r3
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f004 fa6a 	bl	8006190 <atoi>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4820      	ldr	r0, [pc, #128]	; (8001d44 <ws2812_uart_commands+0x484>)
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	0033      	movs	r3, r6
 8001cc6:	002a      	movs	r2, r5
 8001cc8:	0021      	movs	r1, r4
 8001cca:	f7ff f9cc 	bl	8001066 <ws2812_set_led>
        #endif
        
        fade_time = (uint16_t)atoi(tokenizedInput[5]);
 8001cce:	2308      	movs	r3, #8
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f004 fa5b 	bl	8006190 <atoi>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <ws2812_uart_commands+0x488>)
 8001ce0:	801a      	strh	r2, [r3, #0]
        fade_flag = 1;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <ws2812_uart_commands+0x48c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e01b      	b.n	8001d22 <ws2812_uart_commands+0x462>
    }
    else if (strcmp(tokenizedInput[0], "STOP_FADE_SINGLE") == 0 && initialized) {
 8001cea:	2408      	movs	r4, #8
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <ws2812_uart_commands+0x490>)
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7fe fa07 	bl	8000108 <strcmp>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d111      	bne.n	8001d22 <ws2812_uart_commands+0x462>
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <ws2812_uart_commands+0x480>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <ws2812_uart_commands+0x462>
        #if SPI
        ws2812_set_led(&ws2812_spi, (uint16_t)atoi(tokenizedInput[1]), 0, 0, 0);
        #endif
        
        #if PWM
        ws2812_set_led(&ws2812_pwm, (uint16_t)atoi(tokenizedInput[1]), 0, 0, 0);
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f004 fa40 	bl	8006190 <atoi>
 8001d10:	0003      	movs	r3, r0
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <ws2812_uart_commands+0x484>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f7ff f9a2 	bl	8001066 <ws2812_set_led>
        #endif
    }

    token = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    memset(rxBuff, 0, RX_BUFF_SIZE);
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <ws2812_uart_commands+0x494>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f004 fc9e 	bl	8006670 <memset>
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b011      	add	sp, #68	; 0x44
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	080073ec 	.word	0x080073ec
 8001d40:	2000047c 	.word	0x2000047c
 8001d44:	2000042c 	.word	0x2000042c
 8001d48:	20000446 	.word	0x20000446
 8001d4c:	20000444 	.word	0x20000444
 8001d50:	08007400 	.word	0x08007400
 8001d54:	2000032c 	.word	0x2000032c

08001d58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f80f 	bl	8001d88 <HAL_InitTick>
 8001d6a:	1e03      	subs	r3, r0, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e001      	b.n	8001d7a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d76:	f7fe fe2b 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_InitTick+0x88>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02b      	beq.n	8001df8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_InitTick+0x8c>)
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_InitTick+0x88>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	0019      	movs	r1, r3
 8001daa:	23fa      	movs	r3, #250	; 0xfa
 8001dac:	0098      	lsls	r0, r3, #2
 8001dae:	f7fe f9bf 	bl	8000130 <__udivsi3>
 8001db2:	0003      	movs	r3, r0
 8001db4:	0019      	movs	r1, r3
 8001db6:	0020      	movs	r0, r4
 8001db8:	f7fe f9ba 	bl	8000130 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 f94d 	bl	800205e <HAL_SYSTICK_Config>
 8001dc4:	1e03      	subs	r3, r0, #0
 8001dc6:	d112      	bne.n	8001dee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d80a      	bhi.n	8001de4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f91c 	bl	8002014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_InitTick+0x90>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00d      	b.n	8001e00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e008      	b.n	8001e00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e003      	b.n	8001e00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b005      	add	sp, #20
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001a      	movs	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	18d2      	adds	r2, r2, r3
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000480 	.word	0x20000480

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	20000480 	.word	0x20000480

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	001a      	movs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	20000008 	.word	0x20000008

08001e9c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_SYSCFG_EnableRemap+0x1c>)
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_SYSCFG_EnableRemap+0x1c>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40010000 	.word	0x40010000

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ece:	d809      	bhi.n	8001ee4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	401a      	ands	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_EnableIRQ+0x30>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b7f      	cmp	r3, #127	; 0x7f
 8001f04:	d828      	bhi.n	8001f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	33c0      	adds	r3, #192	; 0xc0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	589b      	ldr	r3, [r3, r2]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	33c0      	adds	r3, #192	; 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f56:	e031      	b.n	8001fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	230f      	movs	r3, #15
 8001f62:	400b      	ands	r3, r1
 8001f64:	3b08      	subs	r3, #8
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	3304      	adds	r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	0011      	movs	r1, r2
 8001f78:	2203      	movs	r2, #3
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	21ff      	movs	r1, #255	; 0xff
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	401a      	ands	r2, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0018      	movs	r0, r3
 8001f98:	2303      	movs	r3, #3
 8001f9a:	4003      	ands	r3, r0
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	001c      	movs	r4, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	4023      	ands	r3, r4
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	18c3      	adds	r3, r0, r3
 8001fb8:	3304      	adds	r3, #4
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d301      	bcc.n	8001fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e010      	b.n	8002006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SysTick_Config+0x44>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ff7c 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x44>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x44>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	210f      	movs	r1, #15
 8002020:	187b      	adds	r3, r7, r1
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	187b      	adds	r3, r7, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	0002      	movs	r2, r0
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ff33 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ffaf 	bl	8001fcc <SysTick_Config>
 800206e:	0003      	movs	r3, r0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e077      	b.n	800217a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_DMA_Init+0x10c>)
 8002090:	4694      	mov	ip, r2
 8002092:	4463      	add	r3, ip
 8002094:	2114      	movs	r1, #20
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe f84a 	bl	8000130 <__udivsi3>
 800209c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800209e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2225      	movs	r2, #37	; 0x25
 80020a8:	2102      	movs	r1, #2
 80020aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4934      	ldr	r1, [pc, #208]	; (8002188 <HAL_DMA_Init+0x110>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 fa9f 	bl	8002638 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	01db      	lsls	r3, r3, #7
 8002102:	429a      	cmp	r2, r3
 8002104:	d102      	bne.n	800210c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	21ff      	movs	r1, #255	; 0xff
 8002116:	400a      	ands	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002122:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d011      	beq.n	8002150 <HAL_DMA_Init+0xd8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d80d      	bhi.n	8002150 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0018      	movs	r0, r3
 8002138:	f000 faaa 	bl	8002690 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e008      	b.n	8002162 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2225      	movs	r2, #37	; 0x25
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	bffdfff8 	.word	0xbffdfff8
 8002188:	ffff800f 	.word	0xffff800f

0800218c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2317      	movs	r3, #23
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2224      	movs	r2, #36	; 0x24
 80021a6:	5c9b      	ldrb	r3, [r3, r2]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Start_IT+0x24>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e070      	b.n	8002292 <HAL_DMA_Start_IT+0x106>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2225      	movs	r2, #37	; 0x25
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d157      	bne.n	8002274 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2225      	movs	r2, #37	; 0x25
 80021c8:	2102      	movs	r1, #2
 80021ca:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	438a      	bics	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f9e5 	bl	80025b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	210e      	movs	r1, #14
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e00f      	b.n	8002228 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2104      	movs	r1, #4
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	210a      	movs	r1, #10
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	025b      	lsls	r3, r3, #9
 8002232:	4013      	ands	r3, r2
 8002234:	d008      	beq.n	8002248 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0049      	lsls	r1, r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e007      	b.n	8002284 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800227c:	2317      	movs	r3, #23
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]

  return status;
 800228c:	2317      	movs	r3, #23
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b006      	add	sp, #24
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e050      	b.n	8002350 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2225      	movs	r2, #37	; 0x25
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d008      	beq.n	80022cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e041      	b.n	8002350 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	210e      	movs	r1, #14
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	491c      	ldr	r1, [pc, #112]	; (8002358 <HAL_DMA_Abort+0xbc>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_DMA_Abort+0xc0>)
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	221c      	movs	r2, #28
 8002306:	4013      	ands	r3, r2
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_DMA_Abort+0xc0>)
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800231a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	490a      	ldr	r1, [pc, #40]	; (8002358 <HAL_DMA_Abort+0xbc>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800233c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2225      	movs	r2, #37	; 0x25
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2224      	movs	r2, #36	; 0x24
 800234a:	2100      	movs	r1, #0
 800234c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}
 8002358:	fffffeff 	.word	0xfffffeff
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	230f      	movs	r3, #15
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	2100      	movs	r1, #0
 8002376:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Abort_IT+0x26>
 8002382:	2302      	movs	r3, #2
 8002384:	e05e      	b.n	8002444 <HAL_DMA_Abort_IT+0xe4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	; 0x24
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2225      	movs	r2, #37	; 0x25
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d007      	beq.n	80023aa <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e049      	b.n	800243e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	210e      	movs	r1, #14
 80023b6:	438a      	bics	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	438a      	bics	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	491d      	ldr	r1, [pc, #116]	; (800244c <HAL_DMA_Abort_IT+0xec>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_DMA_Abort_IT+0xf0>)
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	221c      	movs	r2, #28
 80023e4:	4013      	ands	r3, r2
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_DMA_Abort_IT+0xf0>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240c:	490f      	ldr	r1, [pc, #60]	; (800244c <HAL_DMA_Abort_IT+0xec>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800241a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2225      	movs	r2, #37	; 0x25
 8002420:	2101      	movs	r1, #1
 8002422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	0010      	movs	r0, r2
 800243c:	4798      	blx	r3
    }
  }
  return status;
 800243e:	230f      	movs	r3, #15
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800245c:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	221c      	movs	r2, #28
 8002470:	4013      	ands	r3, r2
 8002472:	2204      	movs	r2, #4
 8002474:	409a      	lsls	r2, r3
 8002476:	0013      	movs	r3, r2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	d027      	beq.n	80024ce <HAL_DMA_IRQHandler+0x7a>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2204      	movs	r2, #4
 8002482:	4013      	ands	r3, r2
 8002484:	d023      	beq.n	80024ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2220      	movs	r2, #32
 800248e:	4013      	ands	r3, r2
 8002490:	d107      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2104      	movs	r1, #4
 800249e:	438a      	bics	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	221c      	movs	r2, #28
 80024ac:	4013      	ands	r3, r2
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d100      	bne.n	80024c2 <HAL_DMA_IRQHandler+0x6e>
 80024c0:	e073      	b.n	80025aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	0010      	movs	r0, r2
 80024ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024cc:	e06d      	b.n	80025aa <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	221c      	movs	r2, #28
 80024d4:	4013      	ands	r3, r2
 80024d6:	2202      	movs	r2, #2
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	d02e      	beq.n	8002540 <HAL_DMA_IRQHandler+0xec>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d02a      	beq.n	8002540 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	4013      	ands	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	210a      	movs	r1, #10
 8002502:	438a      	bics	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2225      	movs	r2, #37	; 0x25
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	221c      	movs	r2, #28
 8002518:	4013      	ands	r3, r2
 800251a:	2202      	movs	r2, #2
 800251c:	409a      	lsls	r2, r3
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03a      	beq.n	80025aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	0010      	movs	r0, r2
 800253c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800253e:	e034      	b.n	80025aa <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	221c      	movs	r2, #28
 8002546:	4013      	ands	r3, r2
 8002548:	2208      	movs	r2, #8
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	d02b      	beq.n	80025ac <HAL_DMA_IRQHandler+0x158>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2208      	movs	r2, #8
 8002558:	4013      	ands	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	210e      	movs	r1, #14
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	221c      	movs	r2, #28
 8002576:	4013      	ands	r3, r2
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_DMA_IRQHandler+0x160>)
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2225      	movs	r2, #37	; 0x25
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	2100      	movs	r1, #0
 8002596:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	0010      	movs	r0, r2
 80025a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46c0      	nop			; (mov r8, r8)
}
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020000 	.word	0x40020000

080025b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <DMA_SetConfig+0x7c>)
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	221c      	movs	r2, #28
 80025ec:	4013      	ands	r3, r2
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <DMA_SetConfig+0x7c>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b10      	cmp	r3, #16
 8002606:	d108      	bne.n	800261a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002618:	e007      	b.n	800262a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	60da      	str	r2, [r3, #12]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40020000 	.word	0x40020000

08002638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	001a      	movs	r2, r3
 8002646:	23ff      	movs	r3, #255	; 0xff
 8002648:	4013      	ands	r3, r2
 800264a:	3b08      	subs	r3, #8
 800264c:	2114      	movs	r1, #20
 800264e:	0018      	movs	r0, r3
 8002650:	f7fd fd6e 	bl	8000130 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002660:	4694      	mov	ip, r2
 8002662:	4463      	add	r3, ip
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	001a      	movs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002670:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	221c      	movs	r2, #28
 8002676:	4013      	ands	r3, r2
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	10008200 	.word	0x10008200
 800268c:	40020880 	.word	0x40020880

08002690 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	22ff      	movs	r2, #255	; 0xff
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80026a6:	4694      	mov	ip, r2
 80026a8:	4463      	add	r3, ip
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	001a      	movs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	4013      	ands	r3, r2
 80026c0:	2201      	movs	r2, #1
 80026c2:	409a      	lsls	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	1000823f 	.word	0x1000823f
 80026d4:	40020940 	.word	0x40020940

080026d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80026e6:	e14d      	b.n	8002984 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4091      	lsls	r1, r2
 80026f2:	000a      	movs	r2, r1
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d100      	bne.n	8002700 <HAL_GPIO_Init+0x28>
 80026fe:	e13e      	b.n	800297e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x38>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b12      	cmp	r3, #18
 800270e:	d125      	bne.n	800275c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	58d3      	ldr	r3, [r2, r3]
 800271c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2207      	movs	r2, #7
 8002722:	4013      	ands	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	409a      	lsls	r2, r3
 800272a:	0013      	movs	r3, r2
 800272c:	43da      	mvns	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4013      	ands	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	220f      	movs	r2, #15
 800273a:	401a      	ands	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2107      	movs	r1, #7
 8002740:	400b      	ands	r3, r1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	409a      	lsls	r2, r3
 8002746:	0013      	movs	r3, r2
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	409a      	lsls	r2, r3
 800276a:	0013      	movs	r3, r2
 800276c:	43da      	mvns	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2203      	movs	r2, #3
 800277a:	401a      	ands	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	0013      	movs	r3, r2
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00b      	beq.n	80027b0 <HAL_GPIO_Init+0xd8>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d007      	beq.n	80027b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d130      	bne.n	8002812 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	43da      	mvns	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	0013      	movs	r3, r2
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e6:	2201      	movs	r2, #1
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	43da      	mvns	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	4013      	ands	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	2201      	movs	r2, #1
 80027fe:	401a      	ands	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d017      	beq.n	800284a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	409a      	lsls	r2, r3
 8002828:	0013      	movs	r3, r2
 800282a:	43da      	mvns	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4013      	ands	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	055b      	lsls	r3, r3, #21
 8002852:	4013      	ands	r3, r2
 8002854:	d100      	bne.n	8002858 <HAL_GPIO_Init+0x180>
 8002856:	e092      	b.n	800297e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002858:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_GPIO_Init+0x2c4>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3318      	adds	r3, #24
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	589b      	ldr	r3, [r3, r2]
 8002864:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2203      	movs	r2, #3
 800286a:	4013      	ands	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	220f      	movs	r2, #15
 8002870:	409a      	lsls	r2, r3
 8002872:	0013      	movs	r3, r2
 8002874:	43da      	mvns	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	23a0      	movs	r3, #160	; 0xa0
 8002880:	05db      	lsls	r3, r3, #23
 8002882:	429a      	cmp	r2, r3
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x1d6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <HAL_GPIO_Init+0x2c8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x1d2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a44      	ldr	r2, [pc, #272]	; (80029a4 <HAL_GPIO_Init+0x2cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x1ce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x1ca>
 800289e:	2305      	movs	r3, #5
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x1d8>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e004      	b.n	80028b0 <HAL_GPIO_Init+0x1d8>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_Init+0x1d8>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x1d8>
 80028ae:	2300      	movs	r3, #0
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	2103      	movs	r1, #3
 80028b4:	400a      	ands	r2, r1
 80028b6:	00d2      	lsls	r2, r2, #3
 80028b8:	4093      	lsls	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80028c0:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_GPIO_Init+0x2c4>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3318      	adds	r3, #24
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80028ce:	4a33      	ldr	r2, [pc, #204]	; (800299c <HAL_GPIO_Init+0x2c4>)
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	58d3      	ldr	r3, [r2, r3]
 80028d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43da      	mvns	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	4013      	ands	r3, r2
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80028f4:	4929      	ldr	r1, [pc, #164]	; (800299c <HAL_GPIO_Init+0x2c4>)
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_GPIO_Init+0x2c4>)
 80028fe:	2384      	movs	r3, #132	; 0x84
 8002900:	58d3      	ldr	r3, [r2, r3]
 8002902:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43da      	mvns	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	029b      	lsls	r3, r3, #10
 8002916:	4013      	ands	r3, r2
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002922:	491e      	ldr	r1, [pc, #120]	; (800299c <HAL_GPIO_Init+0x2c4>)
 8002924:	2284      	movs	r2, #132	; 0x84
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HAL_GPIO_Init+0x2c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43da      	mvns	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4013      	ands	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	035b      	lsls	r3, r3, #13
 8002942:	4013      	ands	r3, r2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_GPIO_Init+0x2c4>)
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_GPIO_Init+0x2c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43da      	mvns	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	039b      	lsls	r3, r3, #14
 800296c:	4013      	ands	r3, r2
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_GPIO_Init+0x2c4>)
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3301      	adds	r3, #1
 8002982:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	40da      	lsrs	r2, r3
 800298c:	1e13      	subs	r3, r2, #0
 800298e:	d000      	beq.n	8002992 <HAL_GPIO_Init+0x2ba>
 8002990:	e6aa      	b.n	80026e8 <HAL_GPIO_Init+0x10>
  }
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021800 	.word	0x40021800
 80029a0:	50000400 	.word	0x50000400
 80029a4:	50000800 	.word	0x50000800
 80029a8:	50001400 	.word	0x50001400

080029ac <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	000a      	movs	r2, r1
 80029b6:	1cfb      	adds	r3, r7, #3
 80029b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029c0:	2104      	movs	r1, #4
 80029c2:	438a      	bics	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80029c6:	1cfb      	adds	r3, r7, #3
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80029ce:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 80029d2:	bf40      	sev
    __WFE();
 80029d4:	bf20      	wfe
    __WFE();
 80029d6:	bf20      	wfe
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1d0      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d100      	bne.n	8002a02 <HAL_RCC_OscConfig+0x1e>
 8002a00:	e069      	b.n	8002ad6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	4bc8      	ldr	r3, [pc, #800]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	4013      	ands	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d105      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d15d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1bc      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_OscConfig+0x56>
 8002a2a:	4bbe      	ldr	r3, [pc, #760]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4bbd      	ldr	r3, [pc, #756]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0249      	lsls	r1, r1, #9
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e020      	b.n	8002a7c <HAL_RCC_OscConfig+0x98>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	23a0      	movs	r3, #160	; 0xa0
 8002a40:	02db      	lsls	r3, r3, #11
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d10e      	bne.n	8002a64 <HAL_RCC_OscConfig+0x80>
 8002a46:	4bb7      	ldr	r3, [pc, #732]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4bb6      	ldr	r3, [pc, #728]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	02c9      	lsls	r1, r1, #11
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	4bb3      	ldr	r3, [pc, #716]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4bb2      	ldr	r3, [pc, #712]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0249      	lsls	r1, r1, #9
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x98>
 8002a64:	4baf      	ldr	r3, [pc, #700]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4bae      	ldr	r3, [pc, #696]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a6a:	49af      	ldr	r1, [pc, #700]	; (8002d28 <HAL_RCC_OscConfig+0x344>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4bac      	ldr	r3, [pc, #688]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4bab      	ldr	r3, [pc, #684]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002a76:	49ad      	ldr	r1, [pc, #692]	; (8002d2c <HAL_RCC_OscConfig+0x348>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d014      	beq.n	8002aae <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7ff f9dc 	bl	8001e40 <HAL_GetTick>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002a8e:	f7ff f9d7 	bl	8001e40 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e17b      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa0:	4ba0      	ldr	r3, [pc, #640]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0xaa>
 8002aac:	e013      	b.n	8002ad6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7ff f9c7 	bl	8001e40 <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f9c2 	bl	8001e40 <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e166      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aca:	4b96      	ldr	r3, [pc, #600]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	029b      	lsls	r3, r3, #10
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xfe>
 8002ae0:	e086      	b.n	8002bf0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b90      	ldr	r3, [pc, #576]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2238      	movs	r2, #56	; 0x38
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e14c      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4a8b      	ldr	r2, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x34c>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a85      	ldr	r2, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x350>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0adb      	lsrs	r3, r3, #11
 8002b34:	2207      	movs	r2, #7
 8002b36:	4013      	ands	r3, r2
 8002b38:	4a7f      	ldr	r2, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x354>)
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	4b7f      	ldr	r3, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x358>)
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b40:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x35c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff f91f 	bl	8001d88 <HAL_InitTick>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d050      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e122      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d030      	beq.n	8002bbc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x350>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f960 	bl	8001e40 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b86:	f7ff f95b 	bl	8001e40 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0ff      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b98:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_RCC_OscConfig+0x34c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	4b5b      	ldr	r3, [pc, #364]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e019      	b.n	8002bf0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002bc2:	4960      	ldr	r1, [pc, #384]	; (8002d44 <HAL_RCC_OscConfig+0x360>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f93a 	bl	8001e40 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f935 	bl	8001e40 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0d9      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4013      	ands	r3, r2
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d042      	beq.n	8002c80 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2238      	movs	r2, #56	; 0x38
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b18      	cmp	r3, #24
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d138      	bne.n	8002c80 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0c2      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7ff f90b 	bl	8001e40 <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c30:	f7ff f906 	bl	8001e40 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0aa      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	2202      	movs	r2, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0f1      	beq.n	8002c30 <HAL_RCC_OscConfig+0x24c>
 8002c4c:	e018      	b.n	8002c80 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	438a      	bics	r2, r1
 8002c58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f8f1 	bl	8001e40 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c64:	f7ff f8ec 	bl	8001e40 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e090      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d1f1      	bne.n	8002c64 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2204      	movs	r2, #4
 8002c86:	4013      	ands	r3, r2
 8002c88:	d100      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2a8>
 8002c8a:	e084      	b.n	8002d96 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8c:	230f      	movs	r3, #15
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2238      	movs	r2, #56	; 0x38
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d000      	beq.n	8002caa <HAL_RCC_OscConfig+0x2c6>
 8002ca8:	e075      	b.n	8002d96 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e074      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2e0>
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCC_OscConfig+0x31a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x302>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x31a>
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	438a      	bics	r2, r1
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x340>)
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d028      	beq.n	8002d58 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7ff f89b 	bl	8001e40 <HAL_GetTick>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7ff f896 	bl	8001e40 <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x364>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d915      	bls.n	8002d4c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e039      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	fffeffff 	.word	0xfffeffff
 8002d2c:	fffbffff 	.word	0xfffbffff
 8002d30:	ffff80ff 	.word	0xffff80ff
 8002d34:	ffffc7ff 	.word	0xffffc7ff
 8002d38:	02dc6c00 	.word	0x02dc6c00
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004
 8002d44:	fffffeff 	.word	0xfffffeff
 8002d48:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_RCC_OscConfig+0x3bc>)
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d0dc      	beq.n	8002d10 <HAL_RCC_OscConfig+0x32c>
 8002d56:	e013      	b.n	8002d80 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff f872 	bl	8001e40 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002d60:	e009      	b.n	8002d76 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7ff f86d 	bl	8001e40 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x3c0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e010      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x3bc>)
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x3bc>)
 8002d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <HAL_RCC_OscConfig+0x3bc>)
 8002d90:	4905      	ldr	r1, [pc, #20]	; (8002da8 <HAL_RCC_OscConfig+0x3c4>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b006      	add	sp, #24
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	00001388 	.word	0x00001388
 8002da8:	efffffff 	.word	0xefffffff

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0e9      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d91e      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b73      	ldr	r3, [pc, #460]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002de0:	f7ff f82e 	bl	8001e40 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dea:	f7ff f829 	bl	8001e40 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0ca      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2207      	movs	r2, #7
 8002e04:	4013      	ands	r3, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d017      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e20:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a60      	ldr	r2, [pc, #384]	; (8002fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e26:	401a      	ands	r2, r3
 8002e28:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	21b0      	movs	r1, #176	; 0xb0
 8002e2c:	0109      	lsls	r1, r1, #4
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <HAL_RCC_ClockConfig+0x200>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d055      	beq.n	8002efc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002e50:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	221c      	movs	r2, #28
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	029b      	lsls	r3, r3, #10
 8002e74:	4013      	ands	r3, r2
 8002e76:	d11f      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e08b      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e07f      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e074      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e06d      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe ffb8 	bl	8001e40 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e009      	b.n	8002eea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fe ffb3 	bl	8001e40 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e054      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2238      	movs	r2, #56	; 0x38
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1ec      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2207      	movs	r2, #7
 8002f02:	4013      	ands	r3, r2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d21e      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2207      	movs	r2, #7
 8002f10:	4393      	bics	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe ff90 	bl	8001e40 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f24:	e009      	b.n	8002f3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f26:	f7fe ff8b 	bl	8001e40 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e02c      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4013      	ands	r3, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_RCC_ClockConfig+0x204>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f66:	f000 f82b 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f6a:	0001      	movs	r1, r0
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	220f      	movs	r2, #15
 8002f74:	401a      	ands	r2, r3
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_RCC_ClockConfig+0x208>)
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	58d3      	ldr	r3, [r2, r3]
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	4013      	ands	r3, r2
 8002f80:	000a      	movs	r2, r1
 8002f82:	40da      	lsrs	r2, r3
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCC_ClockConfig+0x20c>)
 8002f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_ClockConfig+0x210>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fe fefb 	bl	8001d88 <HAL_InitTick>
 8002f92:	0003      	movs	r3, r0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	00001388 	.word	0x00001388
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	ffff84ff 	.word	0xffff84ff
 8002fac:	fffff0ff 	.word	0xfffff0ff
 8002fb0:	ffff8fff 	.word	0xffff8fff
 8002fb4:	08007414 	.word	0x08007414
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_GetSysClockFreq+0x78>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2238      	movs	r2, #56	; 0x38
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d10f      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_GetSysClockFreq+0x78>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0adb      	lsrs	r3, r3, #11
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2201      	movs	r2, #1
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	4815      	ldr	r0, [pc, #84]	; (800303c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002fe6:	f7fd f8a3 	bl	8000130 <__udivsi3>
 8002fea:	0003      	movs	r3, r0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e01e      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_GetSysClockFreq+0x78>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2238      	movs	r2, #56	; 0x38
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_GetSysClockFreq+0x80>)
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	e015      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_GetSysClockFreq+0x78>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2238      	movs	r2, #56	; 0x38
 8003008:	4013      	ands	r3, r2
 800300a:	2b20      	cmp	r3, #32
 800300c:	d103      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	e00b      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCC_GetSysClockFreq+0x78>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2238      	movs	r2, #56	; 0x38
 800301c:	4013      	ands	r3, r2
 800301e:	2b18      	cmp	r3, #24
 8003020:	d103      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003022:	23fa      	movs	r3, #250	; 0xfa
 8003024:	01db      	lsls	r3, r3, #7
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	e001      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800302e:	687b      	ldr	r3, [r7, #4]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	02dc6c00 	.word	0x02dc6c00
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b02      	ldr	r3, [pc, #8]	; (8003054 <HAL_RCC_GetHCLKFreq+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000000 	.word	0x20000000

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800305c:	f7ff fff2 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003060:	0001      	movs	r1, r0
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0b1b      	lsrs	r3, r3, #12
 8003068:	2207      	movs	r2, #7
 800306a:	401a      	ands	r2, r3
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	58d3      	ldr	r3, [r2, r3]
 8003072:	221f      	movs	r2, #31
 8003074:	4013      	ands	r3, r2
 8003076:	40d9      	lsrs	r1, r3
 8003078:	000b      	movs	r3, r1
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08007454 	.word	0x08007454

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003090:	2313      	movs	r3, #19
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003098:	2312      	movs	r3, #18
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d100      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030ac:	e079      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2011      	movs	r0, #17
 80030b0:	183b      	adds	r3, r7, r0
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4b64      	ldr	r3, [pc, #400]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	055b      	lsls	r3, r3, #21
 80030be:	4013      	ands	r3, r2
 80030c0:	d110      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0549      	lsls	r1, r1, #21
 80030cc:	430a      	orrs	r2, r1
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80030d0:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	055b      	lsls	r3, r3, #21
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	183b      	adds	r3, r7, r0
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80030e4:	4b58      	ldr	r3, [pc, #352]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d014      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003100:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	4a51      	ldr	r2, [pc, #324]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003106:	4013      	ands	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310a:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800310c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800310e:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0249      	lsls	r1, r1, #9
 8003114:	430a      	orrs	r2, r1
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800311a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800311e:	494c      	ldr	r1, [pc, #304]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003120:	400a      	ands	r2, r1
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d016      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe fe85 	bl	8001e40 <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800313a:	e00c      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fe fe80 	bl	8001e40 <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	4a43      	ldr	r2, [pc, #268]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d904      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800314c:	2313      	movs	r3, #19
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2203      	movs	r2, #3
 8003152:	701a      	strb	r2, [r3, #0]
          break;
 8003154:	e004      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003156:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2202      	movs	r2, #2
 800315c:	4013      	ands	r3, r2
 800315e:	d0ed      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003160:	2313      	movs	r3, #19
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	4a37      	ldr	r2, [pc, #220]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800317a:	430a      	orrs	r2, r1
 800317c:	65da      	str	r2, [r3, #92]	; 0x5c
 800317e:	e005      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	2312      	movs	r3, #18
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2213      	movs	r2, #19
 8003186:	18ba      	adds	r2, r7, r2
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800318c:	2311      	movs	r3, #17
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800319c:	492e      	ldr	r1, [pc, #184]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	400a      	ands	r2, r1
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	2203      	movs	r2, #3
 80031b2:	4393      	bics	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031bc:	430a      	orrs	r2, r1
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	4a23      	ldr	r2, [pc, #140]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031da:	430a      	orrs	r2, r1
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	01db      	lsls	r3, r3, #7
 80031e6:	4013      	ands	r3, r2
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	0899      	lsrs	r1, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4013      	ands	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003218:	430a      	orrs	r2, r1
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	da09      	bge.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	22e0      	movs	r2, #224	; 0xe0
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003238:	2312      	movs	r3, #18
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b006      	add	sp, #24
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40021000 	.word	0x40021000
 800324c:	fffffcff 	.word	0xfffffcff
 8003250:	fffeffff 	.word	0xfffeffff
 8003254:	00001388 	.word	0x00001388
 8003258:	efffffff 	.word	0xefffffff
 800325c:	ffffcfff 	.word	0xffffcfff
 8003260:	ffff3fff 	.word	0xffff3fff

08003264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0a8      	b.n	80033c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	2382      	movs	r3, #130	; 0x82
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	429a      	cmp	r2, r3
 8003288:	d009      	beq.n	800329e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
 8003290:	e005      	b.n	800329e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	225d      	movs	r2, #93	; 0x5d
 80032a8:	5c9b      	ldrb	r3, [r3, r2]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	225c      	movs	r2, #92	; 0x5c
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fd fbb2 	bl	8000a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	225d      	movs	r2, #93	; 0x5d
 80032c4:	2102      	movs	r1, #2
 80032c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	438a      	bics	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	23e0      	movs	r3, #224	; 0xe0
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d902      	bls.n	80032ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	015b      	lsls	r3, r3, #5
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	23f0      	movs	r3, #240	; 0xf0
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d008      	beq.n	800330e <HAL_SPI_Init+0xaa>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	23e0      	movs	r3, #224	; 0xe0
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	429a      	cmp	r2, r3
 8003306:	d002      	beq.n	800330e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	2382      	movs	r3, #130	; 0x82
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	401a      	ands	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	2384      	movs	r3, #132	; 0x84
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	400b      	ands	r3, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2102      	movs	r1, #2
 800332a:	400b      	ands	r3, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2101      	movs	r1, #1
 8003334:	400b      	ands	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6999      	ldr	r1, [r3, #24]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	400b      	ands	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2138      	movs	r1, #56	; 0x38
 800334a:	400b      	ands	r3, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	400b      	ands	r3, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	0011      	movs	r1, r2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	401a      	ands	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	2204      	movs	r2, #4
 8003374:	401a      	ands	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2110      	movs	r1, #16
 800337c:	400b      	ands	r3, r1
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2108      	movs	r1, #8
 8003386:	400b      	ands	r3, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	23f0      	movs	r3, #240	; 0xf0
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	400b      	ands	r3, r1
 8003394:	431a      	orrs	r2, r3
 8003396:	0011      	movs	r1, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	015b      	lsls	r3, r3, #5
 800339e:	401a      	ands	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4907      	ldr	r1, [pc, #28]	; (80033d0 <HAL_SPI_Init+0x16c>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	225d      	movs	r2, #93	; 0x5d
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fffff7ff 	.word	0xfffff7ff

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e04a      	b.n	800347c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	; 0x3d
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223c      	movs	r2, #60	; 0x3c
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7fd fba1 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223d      	movs	r2, #61	; 0x3d
 8003406:	2102      	movs	r1, #2
 8003408:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f000 fee3 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2248      	movs	r2, #72	; 0x48
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	223e      	movs	r2, #62	; 0x3e
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2242      	movs	r2, #66	; 0x42
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2243      	movs	r2, #67	; 0x43
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2244      	movs	r2, #68	; 0x44
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2245      	movs	r2, #69	; 0x45
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2246      	movs	r2, #70	; 0x46
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2247      	movs	r2, #71	; 0x47
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	; 0x3d
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223d      	movs	r2, #61	; 0x3d
 8003490:	5c9b      	ldrb	r3, [r3, r2]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d001      	beq.n	800349c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e02f      	b.n	80034fc <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	223d      	movs	r2, #61	; 0x3d
 80034a0:	2102      	movs	r1, #2
 80034a2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_TIM_Base_Start+0x80>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIM_Base_Start+0x34>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_TIM_Base_Start+0x84>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d116      	bne.n	80034e6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <HAL_TIM_Base_Start+0x88>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d016      	beq.n	80034f8 <HAL_TIM_Base_Start+0x74>
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d011      	beq.n	80034f8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	e008      	b.n	80034f8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e000      	b.n	80034fa <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40000400 	.word	0x40000400
 800350c:	00010007 	.word	0x00010007

08003510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e04a      	b.n	80035b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223d      	movs	r2, #61	; 0x3d
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	223c      	movs	r2, #60	; 0x3c
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 f841 	bl	80035c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	223d      	movs	r2, #61	; 0x3d
 8003542:	2102      	movs	r1, #2
 8003544:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	0019      	movs	r1, r3
 8003550:	0010      	movs	r0, r2
 8003552:	f000 fe45 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2248      	movs	r2, #72	; 0x48
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223e      	movs	r2, #62	; 0x3e
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223f      	movs	r2, #63	; 0x3f
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2241      	movs	r2, #65	; 0x41
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2242      	movs	r2, #66	; 0x42
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2243      	movs	r2, #67	; 0x43
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2244      	movs	r2, #68	; 0x44
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2245      	movs	r2, #69	; 0x45
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2246      	movs	r2, #70	; 0x46
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2247      	movs	r2, #71	; 0x47
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	223d      	movs	r2, #61	; 0x3d
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	001a      	movs	r2, r3
 80035de:	1cbb      	adds	r3, r7, #2
 80035e0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2317      	movs	r3, #23
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <HAL_TIM_PWM_Start_DMA+0x32>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	223e      	movs	r2, #62	; 0x3e
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3b02      	subs	r3, #2
 80035fa:	425a      	negs	r2, r3
 80035fc:	4153      	adcs	r3, r2
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e037      	b.n	8003672 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d108      	bne.n	800361a <HAL_TIM_PWM_Start_DMA+0x4a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	223f      	movs	r2, #63	; 0x3f
 800360c:	5c9b      	ldrb	r3, [r3, r2]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3b02      	subs	r3, #2
 8003612:	425a      	negs	r2, r3
 8003614:	4153      	adcs	r3, r2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e02b      	b.n	8003672 <HAL_TIM_PWM_Start_DMA+0xa2>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d108      	bne.n	8003632 <HAL_TIM_PWM_Start_DMA+0x62>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	5c9b      	ldrb	r3, [r3, r2]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3b02      	subs	r3, #2
 800362a:	425a      	negs	r2, r3
 800362c:	4153      	adcs	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e01f      	b.n	8003672 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d108      	bne.n	800364a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3b02      	subs	r3, #2
 8003642:	425a      	negs	r2, r3
 8003644:	4153      	adcs	r3, r2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e013      	b.n	8003672 <HAL_TIM_PWM_Start_DMA+0xa2>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d108      	bne.n	8003662 <HAL_TIM_PWM_Start_DMA+0x92>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2242      	movs	r2, #66	; 0x42
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3b02      	subs	r3, #2
 800365a:	425a      	negs	r2, r3
 800365c:	4153      	adcs	r3, r2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e007      	b.n	8003672 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2243      	movs	r2, #67	; 0x43
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b02      	subs	r3, #2
 800366c:	425a      	negs	r2, r3
 800366e:	4153      	adcs	r3, r2
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	e183      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <HAL_TIM_PWM_Start_DMA+0xc2>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	223e      	movs	r2, #62	; 0x3e
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	425a      	negs	r2, r3
 800368c:	4153      	adcs	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e037      	b.n	8003702 <HAL_TIM_PWM_Start_DMA+0x132>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d108      	bne.n	80036aa <HAL_TIM_PWM_Start_DMA+0xda>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	223f      	movs	r2, #63	; 0x3f
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	425a      	negs	r2, r3
 80036a4:	4153      	adcs	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e02b      	b.n	8003702 <HAL_TIM_PWM_Start_DMA+0x132>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d108      	bne.n	80036c2 <HAL_TIM_PWM_Start_DMA+0xf2>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	425a      	negs	r2, r3
 80036bc:	4153      	adcs	r3, r2
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e01f      	b.n	8003702 <HAL_TIM_PWM_Start_DMA+0x132>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d108      	bne.n	80036da <HAL_TIM_PWM_Start_DMA+0x10a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2241      	movs	r2, #65	; 0x41
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	425a      	negs	r2, r3
 80036d4:	4153      	adcs	r3, r2
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e013      	b.n	8003702 <HAL_TIM_PWM_Start_DMA+0x132>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d108      	bne.n	80036f2 <HAL_TIM_PWM_Start_DMA+0x122>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2242      	movs	r2, #66	; 0x42
 80036e4:	5c9b      	ldrb	r3, [r3, r2]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	425a      	negs	r2, r3
 80036ec:	4153      	adcs	r3, r2
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e007      	b.n	8003702 <HAL_TIM_PWM_Start_DMA+0x132>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2243      	movs	r2, #67	; 0x43
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	425a      	negs	r2, r3
 80036fe:	4153      	adcs	r3, r2
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d035      	beq.n	8003772 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_TIM_PWM_Start_DMA+0x144>
 800370c:	1cbb      	adds	r3, r7, #2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e134      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <HAL_TIM_PWM_Start_DMA+0x158>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	223e      	movs	r2, #62	; 0x3e
 8003722:	2102      	movs	r1, #2
 8003724:	5499      	strb	r1, [r3, r2]
 8003726:	e026      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d104      	bne.n	8003738 <HAL_TIM_PWM_Start_DMA+0x168>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	2102      	movs	r1, #2
 8003734:	5499      	strb	r1, [r3, r2]
 8003736:	e01e      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d104      	bne.n	8003748 <HAL_TIM_PWM_Start_DMA+0x178>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	2102      	movs	r1, #2
 8003744:	5499      	strb	r1, [r3, r2]
 8003746:	e016      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d104      	bne.n	8003758 <HAL_TIM_PWM_Start_DMA+0x188>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2241      	movs	r2, #65	; 0x41
 8003752:	2102      	movs	r1, #2
 8003754:	5499      	strb	r1, [r3, r2]
 8003756:	e00e      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b10      	cmp	r3, #16
 800375c:	d104      	bne.n	8003768 <HAL_TIM_PWM_Start_DMA+0x198>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2242      	movs	r2, #66	; 0x42
 8003762:	2102      	movs	r1, #2
 8003764:	5499      	strb	r1, [r3, r2]
 8003766:	e006      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2243      	movs	r2, #67	; 0x43
 800376c:	2102      	movs	r1, #2
 800376e:	5499      	strb	r1, [r3, r2]
 8003770:	e001      	b.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e105      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d100      	bne.n	800377e <HAL_TIM_PWM_Start_DMA+0x1ae>
 800377c:	e080      	b.n	8003880 <HAL_TIM_PWM_Start_DMA+0x2b0>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d900      	bls.n	8003786 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8003784:	e0a1      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d054      	beq.n	8003836 <HAL_TIM_PWM_Start_DMA+0x266>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b08      	cmp	r3, #8
 8003790:	d900      	bls.n	8003794 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8003792:	e09a      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d025      	beq.n	80037ec <HAL_TIM_PWM_Start_DMA+0x21c>
 80037a0:	e093      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	4a78      	ldr	r2, [pc, #480]	; (8003990 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	4a77      	ldr	r2, [pc, #476]	; (8003994 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3334      	adds	r3, #52	; 0x34
 80037c6:	001a      	movs	r2, r3
 80037c8:	1cbb      	adds	r3, r7, #2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f7fe fcde 	bl	800218c <HAL_DMA_Start_IT>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0d4      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	0089      	lsls	r1, r1, #2
 80037e6:	430a      	orrs	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]
      break;
 80037ea:	e073      	b.n	80038d4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	4a66      	ldr	r2, [pc, #408]	; (800398c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3338      	adds	r3, #56	; 0x38
 8003810:	001a      	movs	r2, r3
 8003812:	1cbb      	adds	r3, r7, #2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f7fe fcb9 	bl	800218c <HAL_DMA_Start_IT>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d001      	beq.n	8003822 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0af      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	00c9      	lsls	r1, r1, #3
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]
      break;
 8003834:	e04e      	b.n	80038d4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4a52      	ldr	r2, [pc, #328]	; (8003994 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800384c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	333c      	adds	r3, #60	; 0x3c
 800385a:	001a      	movs	r2, r3
 800385c:	1cbb      	adds	r3, r7, #2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	f7fe fc94 	bl	800218c <HAL_DMA_Start_IT>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d001      	beq.n	800386c <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e08a      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	0109      	lsls	r1, r1, #4
 800387a:	430a      	orrs	r2, r1
 800387c:	60da      	str	r2, [r3, #12]
      break;
 800387e:	e029      	b.n	80038d4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4a41      	ldr	r2, [pc, #260]	; (800398c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a40      	ldr	r2, [pc, #256]	; (8003990 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800388e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3340      	adds	r3, #64	; 0x40
 80038a4:	001a      	movs	r2, r3
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	f7fe fc6f 	bl	800218c <HAL_DMA_Start_IT>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e065      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0149      	lsls	r1, r1, #5
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]
      break;
 80038c8:	e004      	b.n	80038d4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80038ca:	2317      	movs	r3, #23
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80038d4:	2317      	movs	r3, #23
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d14e      	bne.n	800397c <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	2201      	movs	r2, #1
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 f81e 	bl	8004928 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_TIM_PWM_Start_DMA+0x33a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIM_PWM_Start_DMA+0x33a>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_TIM_PWM_Start_DMA+0x33e>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_TIM_PWM_Start_DMA+0x340>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	0209      	lsls	r1, r1, #8
 8003922:	430a      	orrs	r2, r1
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIM_PWM_Start_DMA+0x36a>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d116      	bne.n	8003968 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d016      	beq.n	800397a <HAL_TIM_PWM_Start_DMA+0x3aa>
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	025b      	lsls	r3, r3, #9
 8003952:	429a      	cmp	r2, r3
 8003954:	d011      	beq.n	800397a <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e008      	b.n	800397a <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e000      	b.n	800397c <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800397c:	2317      	movs	r3, #23
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	781b      	ldrb	r3, [r3, #0]
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	080040cd 	.word	0x080040cd
 8003990:	08004177 	.word	0x08004177
 8003994:	08004039 	.word	0x08004039
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800
 80039a4:	40000400 	.word	0x40000400
 80039a8:	00010007 	.word	0x00010007

080039ac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	230f      	movs	r3, #15
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d039      	beq.n	8003a38 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d844      	bhi.n	8003a54 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d025      	beq.n	8003a1c <HAL_TIM_PWM_Stop_DMA+0x70>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d83e      	bhi.n	8003a54 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_PWM_Stop_DMA+0x38>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00e      	beq.n	8003a00 <HAL_TIM_PWM_Stop_DMA+0x54>
 80039e2:	e037      	b.n	8003a54 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	495a      	ldr	r1, [pc, #360]	; (8003b58 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fe fcb1 	bl	8002360 <HAL_DMA_Abort_IT>
      break;
 80039fe:	e02e      	b.n	8003a5e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4954      	ldr	r1, [pc, #336]	; (8003b5c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7fe fca3 	bl	8002360 <HAL_DMA_Abort_IT>
      break;
 8003a1a:	e020      	b.n	8003a5e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	494e      	ldr	r1, [pc, #312]	; (8003b60 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fe fc95 	bl	8002360 <HAL_DMA_Abort_IT>
      break;
 8003a36:	e012      	b.n	8003a5e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4948      	ldr	r1, [pc, #288]	; (8003b64 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fe fc87 	bl	8002360 <HAL_DMA_Abort_IT>
      break;
 8003a52:	e004      	b.n	8003a5e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003a54:	230f      	movs	r3, #15
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
      break;
 8003a5c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003a5e:	230f      	movs	r3, #15
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d000      	beq.n	8003a6a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003a68:	e06e      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 ff58 	bl	8004928 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_TIM_PWM_Stop_DMA+0xea>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIM_PWM_Stop_DMA+0xea>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_Stop_DMA+0xee>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_TIM_PWM_Stop_DMA+0xf0>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4a31      	ldr	r2, [pc, #196]	; (8003b78 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d107      	bne.n	8003ac8 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	492e      	ldr	r1, [pc, #184]	; (8003b7c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d10d      	bne.n	8003af0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2101      	movs	r1, #1
 8003aec:	438a      	bics	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223e      	movs	r2, #62	; 0x3e
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
 8003afe:	e023      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d104      	bne.n	8003b10 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
 8003b0e:	e01b      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d104      	bne.n	8003b20 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]
 8003b1e:	e013      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d104      	bne.n	8003b30 <HAL_TIM_PWM_Stop_DMA+0x184>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2241      	movs	r2, #65	; 0x41
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]
 8003b2e:	e00b      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d104      	bne.n	8003b40 <HAL_TIM_PWM_Stop_DMA+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2242      	movs	r2, #66	; 0x42
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]
 8003b3e:	e003      	b.n	8003b48 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2243      	movs	r2, #67	; 0x43
 8003b44:	2101      	movs	r1, #1
 8003b46:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	fffffdff 	.word	0xfffffdff
 8003b5c:	fffffbff 	.word	0xfffffbff
 8003b60:	fffff7ff 	.word	0xfffff7ff
 8003b64:	ffffefff 	.word	0xffffefff
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800
 8003b74:	00001111 	.word	0x00001111
 8003b78:	00000444 	.word	0x00000444
 8003b7c:	ffff7fff 	.word	0xffff7fff

08003b80 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b8a:	200f      	movs	r0, #15
 8003b8c:	183b      	adds	r3, r7, r0
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	213e      	movs	r1, #62	; 0x3e
 8003b92:	5c52      	ldrb	r2, [r2, r1]
 8003b94:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b96:	240e      	movs	r4, #14
 8003b98:	193b      	adds	r3, r7, r4
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	213f      	movs	r1, #63	; 0x3f
 8003b9e:	5c52      	ldrb	r2, [r2, r1]
 8003ba0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ba2:	250d      	movs	r5, #13
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	2144      	movs	r1, #68	; 0x44
 8003baa:	5c52      	ldrb	r2, [r2, r1]
 8003bac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bae:	260c      	movs	r6, #12
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	2145      	movs	r1, #69	; 0x45
 8003bb6:	5c52      	ldrb	r2, [r2, r1]
 8003bb8:	701a      	strb	r2, [r3, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10b      	bne.n	8003bda <HAL_TIM_OnePulse_Start+0x5a>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_OnePulse_Start+0x5a>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bca:	197b      	adds	r3, r7, r5
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d103      	bne.n	8003bda <HAL_TIM_OnePulse_Start+0x5a>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd2:	19bb      	adds	r3, r7, r6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_OnePulse_Start+0x5e>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e03b      	b.n	8003c56 <HAL_TIM_OnePulse_Start+0xd6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223e      	movs	r2, #62	; 0x3e
 8003be2:	2102      	movs	r1, #2
 8003be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	223f      	movs	r2, #63	; 0x3f
 8003bea:	2102      	movs	r1, #2
 8003bec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2244      	movs	r2, #68	; 0x44
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2245      	movs	r2, #69	; 0x45
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	5499      	strb	r1, [r3, r2]
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	2100      	movs	r1, #0
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 fe8e 	bl	8004928 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	2104      	movs	r1, #4
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 fe87 	bl	8004928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <HAL_TIM_OnePulse_Start+0xe0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_TIM_OnePulse_Start+0xb8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_TIM_OnePulse_Start+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_OnePulse_Start+0xb8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <HAL_TIM_OnePulse_Start+0xe8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_OnePulse_Start+0xbc>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_OnePulse_Start+0xbe>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_TIM_OnePulse_Start+0xd4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	0209      	lsls	r1, r1, #8
 8003c50:	430a      	orrs	r2, r1
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b005      	add	sp, #20
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2317      	movs	r3, #23
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	223c      	movs	r2, #60	; 0x3c
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0e5      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	223c      	movs	r2, #60	; 0x3c
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b14      	cmp	r3, #20
 8003c9a:	d900      	bls.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c9c:	e0d1      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fb00 	bl	80042b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	619a      	str	r2, [r3, #24]
      break;
 8003cea:	e0af      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fb5f 	bl	80043b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0109      	lsls	r1, r1, #4
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4954      	ldr	r1, [pc, #336]	; (8003e68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]
      break;
 8003d30:	e08c      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fbba 	bl	80044b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69d9      	ldr	r1, [r3, #28]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	61da      	str	r2, [r3, #28]
      break;
 8003d72:	e06b      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 fc1b 	bl	80045b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0109      	lsls	r1, r1, #4
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4932      	ldr	r1, [pc, #200]	; (8003e68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69d9      	ldr	r1, [r3, #28]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	021a      	lsls	r2, r3, #8
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
      break;
 8003db8:	e048      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fc5c 	bl	8004680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2104      	movs	r1, #4
 8003de4:	438a      	bics	r2, r1
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dfa:	e027      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f000 fc95 	bl	8004734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	0109      	lsls	r1, r1, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4910      	ldr	r1, [pc, #64]	; (8003e68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e40:	e004      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003e42:	2317      	movs	r3, #23
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
      break;
 8003e4a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	223c      	movs	r2, #60	; 0x3c
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

  return status;
 8003e54:	2317      	movs	r3, #23
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	08007474 	.word	0x08007474
 8003e68:	fffffbff 	.word	0xfffffbff

08003e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	230f      	movs	r3, #15
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223c      	movs	r2, #60	; 0x3c
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_ConfigClockSource+0x20>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0bc      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x19a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223c      	movs	r2, #60	; 0x3c
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223d      	movs	r2, #61	; 0x3d
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a59      	ldr	r2, [pc, #356]	; (8004014 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	0192      	lsls	r2, r2, #6
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xde>
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	0192      	lsls	r2, r2, #6
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d900      	bls.n	8003ed2 <HAL_TIM_ConfigClockSource+0x66>
 8003ed0:	e088      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0152      	lsls	r2, r2, #5
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d100      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x70>
 8003eda:	e088      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x182>
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0152      	lsls	r2, r2, #5
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d900      	bls.n	8003ee6 <HAL_TIM_ConfigClockSource+0x7a>
 8003ee4:	e07e      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003ee6:	2b70      	cmp	r3, #112	; 0x70
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0xb0>
 8003eea:	d900      	bls.n	8003eee <HAL_TIM_ConfigClockSource+0x82>
 8003eec:	e07a      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003eee:	2b60      	cmp	r3, #96	; 0x60
 8003ef0:	d04f      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x126>
 8003ef2:	d900      	bls.n	8003ef6 <HAL_TIM_ConfigClockSource+0x8a>
 8003ef4:	e076      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003ef6:	2b50      	cmp	r3, #80	; 0x50
 8003ef8:	d03b      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x106>
 8003efa:	d900      	bls.n	8003efe <HAL_TIM_ConfigClockSource+0x92>
 8003efc:	e072      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d057      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x146>
 8003f02:	d900      	bls.n	8003f06 <HAL_TIM_ConfigClockSource+0x9a>
 8003f04:	e06e      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d063      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x166>
 8003f0a:	d86b      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d060      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x166>
 8003f10:	d868      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d05d      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x166>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d05b      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x166>
 8003f1a:	e063      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	f000 fcdc 	bl	80048e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2277      	movs	r2, #119	; 0x77
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	609a      	str	r2, [r3, #8]
      break;
 8003f48:	e052      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	f000 fcc5 	bl	80048e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	01c9      	lsls	r1, r1, #7
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
      break;
 8003f70:	e03e      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	001a      	movs	r2, r3
 8003f80:	f000 fc36 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2150      	movs	r1, #80	; 0x50
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fc90 	bl	80048b0 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e02e      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	f000 fc54 	bl	800484c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2160      	movs	r1, #96	; 0x60
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 fc80 	bl	80048b0 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e01e      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	f000 fc16 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 fc70 	bl	80048b0 <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e00e      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0019      	movs	r1, r3
 8003fdc:	0010      	movs	r0, r2
 8003fde:	f000 fc67 	bl	80048b0 <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e005      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003fee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	223d      	movs	r2, #61	; 0x3d
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	223c      	movs	r2, #60	; 0x3c
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	5499      	strb	r1, [r3, r2]

  return status;
 8004000:	230f      	movs	r3, #15
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	781b      	ldrb	r3, [r3, #0]
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	ffceff88 	.word	0xffceff88
 8004014:	ffff00ff 	.word	0xffff00ff

08004018 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b002      	add	sp, #8
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}

08004038 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	223e      	movs	r2, #62	; 0x3e
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	e02a      	b.n	80040b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d107      	bne.n	800407a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	223f      	movs	r2, #63	; 0x3f
 8004074:	2101      	movs	r1, #1
 8004076:	5499      	strb	r1, [r3, r2]
 8004078:	e01d      	b.n	80040b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2240      	movs	r2, #64	; 0x40
 800408e:	2101      	movs	r1, #1
 8004090:	5499      	strb	r1, [r3, r2]
 8004092:	e010      	b.n	80040b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d107      	bne.n	80040ae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2208      	movs	r2, #8
 80040a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2241      	movs	r2, #65	; 0x41
 80040a8:	2101      	movs	r1, #1
 80040aa:	5499      	strb	r1, [r3, r2]
 80040ac:	e003      	b.n	80040b6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	223d      	movs	r2, #61	; 0x3d
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7ff ffb5 	bl	8004028 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}

080040cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10b      	bne.n	80040fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d136      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	223e      	movs	r2, #62	; 0x3e
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	e031      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d10b      	bne.n	800411e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d125      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	223f      	movs	r2, #63	; 0x3f
 8004118:	2101      	movs	r1, #1
 800411a:	5499      	strb	r1, [r3, r2]
 800411c:	e020      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d10b      	bne.n	8004140 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2204      	movs	r2, #4
 800412c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d114      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2240      	movs	r2, #64	; 0x40
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]
 800413e:	e00f      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d10a      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2208      	movs	r2, #8
 800414e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2241      	movs	r2, #65	; 0x41
 800415c:	2101      	movs	r1, #1
 800415e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	0018      	movs	r0, r3
 8004164:	f7fc f95a 	bl	800041c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	771a      	strb	r2, [r3, #28]
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}

08004176 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d103      	bne.n	8004196 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	771a      	strb	r2, [r3, #28]
 8004194:	e019      	b.n	80041ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d103      	bne.n	80041a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2202      	movs	r2, #2
 80041a4:	771a      	strb	r2, [r3, #28]
 80041a6:	e010      	b.n	80041ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d103      	bne.n	80041ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2204      	movs	r2, #4
 80041b6:	771a      	strb	r2, [r3, #28]
 80041b8:	e007      	b.n	80041ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d102      	bne.n	80041ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2208      	movs	r2, #8
 80041c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff ff23 	bl	8004018 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}

080041e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <TIM_Base_SetConfig+0xc0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x20>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <TIM_Base_SetConfig+0xc4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2270      	movs	r2, #112	; 0x70
 8004204:	4393      	bics	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <TIM_Base_SetConfig+0xc0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0x5a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <TIM_Base_SetConfig+0xc4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0x5a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <TIM_Base_SetConfig+0xc8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0x5a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <TIM_Base_SetConfig+0xcc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0x5a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <TIM_Base_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <TIM_Base_SetConfig+0xd4>)
 800423e:	4013      	ands	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	4393      	bics	r3, r2
 8004252:	001a      	movs	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <TIM_Base_SetConfig+0xc0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0xaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <TIM_Base_SetConfig+0xcc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0xaa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <TIM_Base_SetConfig+0xd0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d103      	bne.n	8004292 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	615a      	str	r2, [r3, #20]
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40002000 	.word	0x40002000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800
 80042b4:	fffffcff 	.word	0xfffffcff

080042b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4393      	bics	r3, r2
 80042d0:	001a      	movs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a2e      	ldr	r2, [pc, #184]	; (80043a0 <TIM_OC1_SetConfig+0xe8>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2203      	movs	r2, #3
 80042ee:	4393      	bics	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2202      	movs	r2, #2
 8004300:	4393      	bics	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <TIM_OC1_SetConfig+0xec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC1_SetConfig+0x6e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <TIM_OC1_SetConfig+0xf0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC1_SetConfig+0x6e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a22      	ldr	r2, [pc, #136]	; (80043ac <TIM_OC1_SetConfig+0xf4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2208      	movs	r2, #8
 800432a:	4393      	bics	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2204      	movs	r2, #4
 800433c:	4393      	bics	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_OC1_SetConfig+0xec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_OC1_SetConfig+0xa0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <TIM_OC1_SetConfig+0xf0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_OC1_SetConfig+0xa0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a16      	ldr	r2, [pc, #88]	; (80043ac <TIM_OC1_SetConfig+0xf4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <TIM_OC1_SetConfig+0xf8>)
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <TIM_OC1_SetConfig+0xfc>)
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b006      	add	sp, #24
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	fffeff8f 	.word	0xfffeff8f
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800
 80043b0:	fffffeff 	.word	0xfffffeff
 80043b4:	fffffdff 	.word	0xfffffdff

080043b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	2210      	movs	r2, #16
 80043ce:	4393      	bics	r3, r2
 80043d0:	001a      	movs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <TIM_OC2_SetConfig+0xe0>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a2b      	ldr	r2, [pc, #172]	; (800449c <TIM_OC2_SetConfig+0xe4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2220      	movs	r2, #32
 8004402:	4393      	bics	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <TIM_OC2_SetConfig+0xe8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10d      	bne.n	8004436 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	4393      	bics	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	4393      	bics	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <TIM_OC2_SetConfig+0xe8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_OC2_SetConfig+0x96>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <TIM_OC2_SetConfig+0xec>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC2_SetConfig+0x96>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC2_SetConfig+0xf0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d113      	bne.n	8004476 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC2_SetConfig+0xf4>)
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <TIM_OC2_SetConfig+0xf8>)
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b006      	add	sp, #24
 8004496:	bd80      	pop	{r7, pc}
 8004498:	feff8fff 	.word	0xfeff8fff
 800449c:	fffffcff 	.word	0xfffffcff
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800
 80044ac:	fffffbff 	.word	0xfffffbff
 80044b0:	fffff7ff 	.word	0xfffff7ff

080044b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a31      	ldr	r2, [pc, #196]	; (8004590 <TIM_OC3_SetConfig+0xdc>)
 80044ca:	401a      	ands	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <TIM_OC3_SetConfig+0xe0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2203      	movs	r2, #3
 80044e8:	4393      	bics	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <TIM_OC3_SetConfig+0xe4>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <TIM_OC3_SetConfig+0xe8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10d      	bne.n	800452e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <TIM_OC3_SetConfig+0xec>)
 8004516:	4013      	ands	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <TIM_OC3_SetConfig+0xf0>)
 800452a:	4013      	ands	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1a      	ldr	r2, [pc, #104]	; (800459c <TIM_OC3_SetConfig+0xe8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_OC3_SetConfig+0x92>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <TIM_OC3_SetConfig+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0x92>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <TIM_OC3_SetConfig+0xf8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <TIM_OC3_SetConfig+0xfc>)
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <TIM_OC3_SetConfig+0x100>)
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b006      	add	sp, #24
 800458e:	bd80      	pop	{r7, pc}
 8004590:	fffffeff 	.word	0xfffffeff
 8004594:	fffeff8f 	.word	0xfffeff8f
 8004598:	fffffdff 	.word	0xfffffdff
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	fffff7ff 	.word	0xfffff7ff
 80045a4:	fffffbff 	.word	0xfffffbff
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	ffffefff 	.word	0xffffefff
 80045b4:	ffffdfff 	.word	0xffffdfff

080045b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <TIM_OC4_SetConfig+0xa8>)
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a20      	ldr	r2, [pc, #128]	; (8004664 <TIM_OC4_SetConfig+0xac>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <TIM_OC4_SetConfig+0xb0>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <TIM_OC4_SetConfig+0xb4>)
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a17      	ldr	r2, [pc, #92]	; (8004670 <TIM_OC4_SetConfig+0xb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_OC4_SetConfig+0x70>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a16      	ldr	r2, [pc, #88]	; (8004674 <TIM_OC4_SetConfig+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_OC4_SetConfig+0x70>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <TIM_OC4_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d109      	bne.n	800463c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <TIM_OC4_SetConfig+0xc4>)
 800462c:	4013      	ands	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	019b      	lsls	r3, r3, #6
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b006      	add	sp, #24
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	ffffefff 	.word	0xffffefff
 8004664:	feff8fff 	.word	0xfeff8fff
 8004668:	fffffcff 	.word	0xfffffcff
 800466c:	ffffdfff 	.word	0xffffdfff
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	ffffbfff 	.word	0xffffbfff

08004680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a21      	ldr	r2, [pc, #132]	; (800471c <TIM_OC5_SetConfig+0x9c>)
 8004696:	401a      	ands	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <TIM_OC5_SetConfig+0xa0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <TIM_OC5_SetConfig+0xa4>)
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <TIM_OC5_SetConfig+0xa8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_OC5_SetConfig+0x66>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <TIM_OC5_SetConfig+0xac>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_OC5_SetConfig+0x66>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a13      	ldr	r2, [pc, #76]	; (8004730 <TIM_OC5_SetConfig+0xb0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d109      	bne.n	80046fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4a0c      	ldr	r2, [pc, #48]	; (800471c <TIM_OC5_SetConfig+0x9c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b006      	add	sp, #24
 800471a:	bd80      	pop	{r7, pc}
 800471c:	fffeffff 	.word	0xfffeffff
 8004720:	fffeff8f 	.word	0xfffeff8f
 8004724:	fffdffff 	.word	0xfffdffff
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <TIM_OC6_SetConfig+0xa0>)
 800474a:	401a      	ands	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <TIM_OC6_SetConfig+0xa4>)
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <TIM_OC6_SetConfig+0xa8>)
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	051b      	lsls	r3, r3, #20
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a16      	ldr	r2, [pc, #88]	; (80047e0 <TIM_OC6_SetConfig+0xac>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_OC6_SetConfig+0x68>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <TIM_OC6_SetConfig+0xb0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC6_SetConfig+0x68>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <TIM_OC6_SetConfig+0xb4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4a13      	ldr	r2, [pc, #76]	; (80047ec <TIM_OC6_SetConfig+0xb8>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b006      	add	sp, #24
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	ffefffff 	.word	0xffefffff
 80047d8:	feff8fff 	.word	0xfeff8fff
 80047dc:	ffdfffff 	.word	0xffdfffff
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800
 80047ec:	fffbffff 	.word	0xfffbffff

080047f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2201      	movs	r2, #1
 8004808:	4393      	bics	r3, r2
 800480a:	001a      	movs	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	22f0      	movs	r2, #240	; 0xf0
 800481a:	4393      	bics	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	220a      	movs	r2, #10
 800482c:	4393      	bics	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b006      	add	sp, #24
 800484a:	bd80      	pop	{r7, pc}

0800484c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	2210      	movs	r2, #16
 8004864:	4393      	bics	r3, r2
 8004866:	001a      	movs	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <TIM_TI2_ConfigInputStage+0x60>)
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	031b      	lsls	r3, r3, #12
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	22a0      	movs	r2, #160	; 0xa0
 8004888:	4393      	bics	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b006      	add	sp, #24
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	ffff0fff 	.word	0xffff0fff

080048b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <TIM_ITRx_SetConfig+0x34>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	2207      	movs	r2, #7
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	609a      	str	r2, [r3, #8]
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	b004      	add	sp, #16
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	ffcfff8f 	.word	0xffcfff8f

080048e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <TIM_ETR_SetConfig+0x3c>)
 8004900:	4013      	ands	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	021a      	lsls	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	431a      	orrs	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b006      	add	sp, #24
 8004922:	bd80      	pop	{r7, pc}
 8004924:	ffff00ff 	.word	0xffff00ff

08004928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	221f      	movs	r2, #31
 8004938:	4013      	ands	r3, r2
 800493a:	2201      	movs	r2, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	0013      	movs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	43d2      	mvns	r2, r2
 800494a:	401a      	ands	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	211f      	movs	r1, #31
 8004958:	400b      	ands	r3, r1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4099      	lsls	r1, r3
 800495e:	000b      	movs	r3, r1
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b006      	add	sp, #24
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223c      	movs	r2, #60	; 0x3c
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e04a      	b.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223c      	movs	r2, #60	; 0x3c
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	223d      	movs	r2, #61	; 0x3d
 8004994:	2102      	movs	r1, #2
 8004996:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2270      	movs	r2, #112	; 0x70
 80049c8:	4393      	bics	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10c      	bne.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	4393      	bics	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	223d      	movs	r2, #61	; 0x3d
 8004a10:	2101      	movs	r1, #1
 8004a12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	223c      	movs	r2, #60	; 0x3c
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b004      	add	sp, #16
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	ff0fffff 	.word	0xff0fffff
 8004a30:	40000400 	.word	0x40000400

08004a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223c      	movs	r2, #60	; 0x3c
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e079      	b.n	8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	223c      	movs	r2, #60	; 0x3c
 8004a54:	2101      	movs	r1, #1
 8004a56:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	22ff      	movs	r2, #255	; 0xff
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	001a      	movs	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	; (8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a33      	ldr	r2, [pc, #204]	; (8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004a88:	401a      	ands	r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004a96:	401a      	ands	r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	; (8004b60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ac0:	401a      	ands	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ada:	401a      	ands	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d121      	bne.n	8004b32 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004af2:	401a      	ands	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	051b      	lsls	r3, r3, #20
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004b02:	401a      	ands	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004b10:	401a      	ands	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d106      	bne.n	8004b32 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004b28:	401a      	ands	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	223c      	movs	r2, #60	; 0x3c
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b004      	add	sp, #16
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	fffffcff 	.word	0xfffffcff
 8004b50:	fffffbff 	.word	0xfffffbff
 8004b54:	fffff7ff 	.word	0xfffff7ff
 8004b58:	ffffefff 	.word	0xffffefff
 8004b5c:	ffffdfff 	.word	0xffffdfff
 8004b60:	ffffbfff 	.word	0xffffbfff
 8004b64:	fff0ffff 	.word	0xfff0ffff
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	efffffff 	.word	0xefffffff
 8004b70:	ff0fffff 	.word	0xff0fffff
 8004b74:	feffffff 	.word	0xfeffffff
 8004b78:	fdffffff 	.word	0xfdffffff
 8004b7c:	dfffffff 	.word	0xdfffffff

08004b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e046      	b.n	8004c20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2288      	movs	r2, #136	; 0x88
 8004b96:	589b      	ldr	r3, [r3, r2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2284      	movs	r2, #132	; 0x84
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f7fc f86a 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2288      	movs	r2, #136	; 0x88
 8004bb0:	2124      	movs	r1, #36	; 0x24
 8004bb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fcf0 	bl	80055b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fb6e 	bl	80052b8 <UART_SetConfig>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e01c      	b.n	8004c20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	490d      	ldr	r1, [pc, #52]	; (8004c28 <HAL_UART_Init+0xa8>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	212a      	movs	r1, #42	; 0x2a
 8004c02:	438a      	bics	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2101      	movs	r1, #1
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fd7f 	bl	800571c <UART_CheckIdleState>
 8004c1e:	0003      	movs	r3, r0
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	ffffb7ff 	.word	0xffffb7ff

08004c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	b0aa      	sub	sp, #168	; 0xa8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	22a4      	movs	r2, #164	; 0xa4
 8004c3c:	18b9      	adds	r1, r7, r2
 8004c3e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	20a0      	movs	r0, #160	; 0xa0
 8004c48:	1839      	adds	r1, r7, r0
 8004c4a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	249c      	movs	r4, #156	; 0x9c
 8004c54:	1939      	adds	r1, r7, r4
 8004c56:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c58:	0011      	movs	r1, r2
 8004c5a:	18bb      	adds	r3, r7, r2
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4aa2      	ldr	r2, [pc, #648]	; (8004ee8 <HAL_UART_IRQHandler+0x2bc>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	2298      	movs	r2, #152	; 0x98
 8004c64:	18bd      	adds	r5, r7, r2
 8004c66:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004c68:	18bb      	adds	r3, r7, r2
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11a      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c70:	187b      	adds	r3, r7, r1
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	4013      	ands	r3, r2
 8004c78:	d015      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c7a:	183b      	adds	r3, r7, r0
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	4013      	ands	r3, r2
 8004c82:	d105      	bne.n	8004c90 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	055b      	lsls	r3, r3, #21
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d100      	bne.n	8004c9a <HAL_UART_IRQHandler+0x6e>
 8004c98:	e2dc      	b.n	8005254 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	0010      	movs	r0, r2
 8004ca2:	4798      	blx	r3
      }
      return;
 8004ca4:	e2d6      	b.n	8005254 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca6:	2398      	movs	r3, #152	; 0x98
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d100      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x86>
 8004cb0:	e122      	b.n	8004ef8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cb2:	239c      	movs	r3, #156	; 0x9c
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8c      	ldr	r2, [pc, #560]	; (8004eec <HAL_UART_IRQHandler+0x2c0>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cbe:	23a0      	movs	r3, #160	; 0xa0
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a8a      	ldr	r2, [pc, #552]	; (8004ef0 <HAL_UART_IRQHandler+0x2c4>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d100      	bne.n	8004ccc <HAL_UART_IRQHandler+0xa0>
 8004cca:	e115      	b.n	8004ef8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ccc:	23a4      	movs	r3, #164	; 0xa4
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d012      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
 8004cd8:	23a0      	movs	r3, #160	; 0xa0
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2290      	movs	r2, #144	; 0x90
 8004cf2:	589b      	ldr	r3, [r3, r2]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2190      	movs	r1, #144	; 0x90
 8004cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cfe:	23a4      	movs	r3, #164	; 0xa4
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2202      	movs	r2, #2
 8004d06:	4013      	ands	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_UART_IRQHandler+0x102>
 8004d0a:	239c      	movs	r3, #156	; 0x9c
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2290      	movs	r2, #144	; 0x90
 8004d22:	589b      	ldr	r3, [r3, r2]
 8004d24:	2204      	movs	r2, #4
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2190      	movs	r1, #144	; 0x90
 8004d2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2e:	23a4      	movs	r3, #164	; 0xa4
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2204      	movs	r2, #4
 8004d36:	4013      	ands	r3, r2
 8004d38:	d011      	beq.n	8004d5e <HAL_UART_IRQHandler+0x132>
 8004d3a:	239c      	movs	r3, #156	; 0x9c
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2290      	movs	r2, #144	; 0x90
 8004d52:	589b      	ldr	r3, [r3, r2]
 8004d54:	2202      	movs	r2, #2
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2190      	movs	r1, #144	; 0x90
 8004d5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d5e:	23a4      	movs	r3, #164	; 0xa4
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2208      	movs	r2, #8
 8004d66:	4013      	ands	r3, r2
 8004d68:	d017      	beq.n	8004d9a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d6a:	23a0      	movs	r3, #160	; 0xa0
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	4013      	ands	r3, r2
 8004d74:	d105      	bne.n	8004d82 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d76:	239c      	movs	r3, #156	; 0x9c
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5b      	ldr	r2, [pc, #364]	; (8004eec <HAL_UART_IRQHandler+0x2c0>)
 8004d7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2208      	movs	r2, #8
 8004d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2290      	movs	r2, #144	; 0x90
 8004d8e:	589b      	ldr	r3, [r3, r2]
 8004d90:	2208      	movs	r2, #8
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2190      	movs	r1, #144	; 0x90
 8004d98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d9a:	23a4      	movs	r3, #164	; 0xa4
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	4013      	ands	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x1a4>
 8004da8:	23a0      	movs	r3, #160	; 0xa0
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	04db      	lsls	r3, r3, #19
 8004db2:	4013      	ands	r3, r2
 8004db4:	d00c      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2290      	movs	r2, #144	; 0x90
 8004dc4:	589b      	ldr	r3, [r3, r2]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2190      	movs	r1, #144	; 0x90
 8004dce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2290      	movs	r2, #144	; 0x90
 8004dd4:	589b      	ldr	r3, [r3, r2]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d100      	bne.n	8004ddc <HAL_UART_IRQHandler+0x1b0>
 8004dda:	e23d      	b.n	8005258 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ddc:	23a4      	movs	r3, #164	; 0xa4
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2220      	movs	r2, #32
 8004de4:	4013      	ands	r3, r2
 8004de6:	d015      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de8:	23a0      	movs	r3, #160	; 0xa0
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2220      	movs	r2, #32
 8004df0:	4013      	ands	r3, r2
 8004df2:	d106      	bne.n	8004e02 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004df4:	239c      	movs	r3, #156	; 0x9c
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	055b      	lsls	r3, r3, #21
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d008      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	0010      	movs	r0, r2
 8004e12:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2290      	movs	r2, #144	; 0x90
 8004e18:	589b      	ldr	r3, [r3, r2]
 8004e1a:	2194      	movs	r1, #148	; 0x94
 8004e1c:	187a      	adds	r2, r7, r1
 8004e1e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d004      	beq.n	8004e38 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2228      	movs	r2, #40	; 0x28
 8004e34:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e36:	d04c      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 fe68 	bl	8005b10 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d13c      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e56:	2090      	movs	r0, #144	; 0x90
 8004e58:	183a      	adds	r2, r7, r0
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	438a      	bics	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2280      	movs	r2, #128	; 0x80
 8004e8a:	589b      	ldr	r3, [r3, r2]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	589b      	ldr	r3, [r3, r2]
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_UART_IRQHandler+0x2c8>)
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2280      	movs	r2, #128	; 0x80
 8004e9e:	589b      	ldr	r3, [r3, r2]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fd fa5d 	bl	8002360 <HAL_DMA_Abort_IT>
 8004ea6:	1e03      	subs	r3, r0, #0
 8004ea8:	d01c      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	589b      	ldr	r3, [r3, r2]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	2180      	movs	r1, #128	; 0x80
 8004eb6:	5852      	ldr	r2, [r2, r1]
 8004eb8:	0010      	movs	r0, r2
 8004eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e012      	b.n	8004ee4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 f9f1 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec6:	e00d      	b.n	8004ee4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 f9ec 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	e008      	b.n	8004ee4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 f9e7 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2290      	movs	r2, #144	; 0x90
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ee2:	e1b9      	b.n	8005258 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	46c0      	nop			; (mov r8, r8)
    return;
 8004ee6:	e1b7      	b.n	8005258 <HAL_UART_IRQHandler+0x62c>
 8004ee8:	0000080f 	.word	0x0000080f
 8004eec:	10000001 	.word	0x10000001
 8004ef0:	04000120 	.word	0x04000120
 8004ef4:	08005dd5 	.word	0x08005dd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d000      	beq.n	8004f02 <HAL_UART_IRQHandler+0x2d6>
 8004f00:	e13e      	b.n	8005180 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f02:	23a4      	movs	r3, #164	; 0xa4
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2210      	movs	r2, #16
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d100      	bne.n	8004f10 <HAL_UART_IRQHandler+0x2e4>
 8004f0e:	e137      	b.n	8005180 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f10:	23a0      	movs	r3, #160	; 0xa0
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2210      	movs	r2, #16
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <HAL_UART_IRQHandler+0x2f2>
 8004f1c:	e130      	b.n	8005180 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d000      	beq.n	8004f36 <HAL_UART_IRQHandler+0x30a>
 8004f34:	e0a4      	b.n	8005080 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	589b      	ldr	r3, [r3, r2]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	217e      	movs	r1, #126	; 0x7e
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d100      	bne.n	8004f50 <HAL_UART_IRQHandler+0x324>
 8004f4e:	e185      	b.n	800525c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	225c      	movs	r2, #92	; 0x5c
 8004f54:	5a9b      	ldrh	r3, [r3, r2]
 8004f56:	187a      	adds	r2, r7, r1
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d300      	bcc.n	8004f60 <HAL_UART_IRQHandler+0x334>
 8004f5e:	e17d      	b.n	800525c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	187a      	adds	r2, r7, r1
 8004f64:	215e      	movs	r1, #94	; 0x5e
 8004f66:	8812      	ldrh	r2, [r2, #0]
 8004f68:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	589b      	ldr	r3, [r3, r2]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2220      	movs	r2, #32
 8004f76:	4013      	ands	r3, r2
 8004f78:	d170      	bne.n	800505c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f84:	2301      	movs	r3, #1
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	49b4      	ldr	r1, [pc, #720]	; (800526c <HAL_UART_IRQHandler+0x640>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb4:	677b      	str	r3, [r7, #116]	; 0x74
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	438a      	bics	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fe8:	2301      	movs	r3, #1
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	438a      	bics	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005006:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	228c      	movs	r2, #140	; 0x8c
 8005014:	2120      	movs	r1, #32
 8005016:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005024:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005028:	2301      	movs	r3, #1
 800502a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2110      	movs	r1, #16
 8005040:	438a      	bics	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	589b      	ldr	r3, [r3, r2]
 8005056:	0018      	movs	r0, r3
 8005058:	f7fd f920 	bl	800229c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	225c      	movs	r2, #92	; 0x5c
 8005066:	5a9a      	ldrh	r2, [r3, r2]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	215e      	movs	r1, #94	; 0x5e
 800506c:	5a5b      	ldrh	r3, [r3, r1]
 800506e:	b29b      	uxth	r3, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0011      	movs	r1, r2
 8005078:	0018      	movs	r0, r3
 800507a:	f7fb f9d7 	bl	800042c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800507e:	e0ed      	b.n	800525c <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	225c      	movs	r2, #92	; 0x5c
 8005084:	5a99      	ldrh	r1, [r3, r2]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	225e      	movs	r2, #94	; 0x5e
 800508a:	5a9b      	ldrh	r3, [r3, r2]
 800508c:	b29a      	uxth	r2, r3
 800508e:	208e      	movs	r0, #142	; 0x8e
 8005090:	183b      	adds	r3, r7, r0
 8005092:	1a8a      	subs	r2, r1, r2
 8005094:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	225e      	movs	r2, #94	; 0x5e
 800509a:	5a9b      	ldrh	r3, [r3, r2]
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d100      	bne.n	80050a4 <HAL_UART_IRQHandler+0x478>
 80050a2:	e0dd      	b.n	8005260 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d100      	bne.n	80050ae <HAL_UART_IRQHandler+0x482>
 80050ac:	e0d8      	b.n	8005260 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050ae:	f3ef 8310 	mrs	r3, PRIMASK
 80050b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80050b4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b6:	2488      	movs	r4, #136	; 0x88
 80050b8:	193a      	adds	r2, r7, r4
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	2301      	movs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4967      	ldr	r1, [pc, #412]	; (8005270 <HAL_UART_IRQHandler+0x644>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80050ec:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ee:	2484      	movs	r4, #132	; 0x84
 80050f0:	193a      	adds	r2, r7, r4
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	2301      	movs	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	495a      	ldr	r1, [pc, #360]	; (8005274 <HAL_UART_IRQHandler+0x648>)
 800510c:	400a      	ands	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	193b      	adds	r3, r7, r4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f383 8810 	msr	PRIMASK, r3
}
 800511c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	228c      	movs	r2, #140	; 0x8c
 8005122:	2120      	movs	r1, #32
 8005124:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005132:	f3ef 8310 	mrs	r3, PRIMASK
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513a:	2480      	movs	r4, #128	; 0x80
 800513c:	193a      	adds	r2, r7, r4
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	2301      	movs	r3, #1
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2110      	movs	r1, #16
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	193b      	adds	r3, r7, r4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005170:	183b      	adds	r3, r7, r0
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7fb f957 	bl	800042c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800517e:	e06f      	b.n	8005260 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005180:	23a4      	movs	r3, #164	; 0xa4
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	035b      	lsls	r3, r3, #13
 800518a:	4013      	ands	r3, r2
 800518c:	d010      	beq.n	80051b0 <HAL_UART_IRQHandler+0x584>
 800518e:	239c      	movs	r3, #156	; 0x9c
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	03db      	lsls	r3, r3, #15
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0352      	lsls	r2, r2, #13
 80051a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 fe56 	bl	8005e5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051ae:	e05a      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051b0:	23a4      	movs	r3, #164	; 0xa4
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	4013      	ands	r3, r2
 80051ba:	d016      	beq.n	80051ea <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051bc:	23a0      	movs	r3, #160	; 0xa0
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2280      	movs	r2, #128	; 0x80
 80051c4:	4013      	ands	r3, r2
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051c8:	239c      	movs	r3, #156	; 0x9c
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d042      	beq.n	8005264 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	0010      	movs	r0, r2
 80051e6:	4798      	blx	r3
    }
    return;
 80051e8:	e03c      	b.n	8005264 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051ea:	23a4      	movs	r3, #164	; 0xa4
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	4013      	ands	r3, r2
 80051f4:	d00a      	beq.n	800520c <HAL_UART_IRQHandler+0x5e0>
 80051f6:	23a0      	movs	r3, #160	; 0xa0
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	4013      	ands	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0018      	movs	r0, r3
 8005206:	f000 fdfc 	bl	8005e02 <UART_EndTransmit_IT>
    return;
 800520a:	e02c      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800520c:	23a4      	movs	r3, #164	; 0xa4
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	4013      	ands	r3, r2
 8005218:	d00b      	beq.n	8005232 <HAL_UART_IRQHandler+0x606>
 800521a:	23a0      	movs	r3, #160	; 0xa0
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	05db      	lsls	r3, r3, #23
 8005224:	4013      	ands	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0018      	movs	r0, r3
 800522c:	f000 fe25 	bl	8005e7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005230:	e019      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005232:	23a4      	movs	r3, #164	; 0xa4
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	045b      	lsls	r3, r3, #17
 800523c:	4013      	ands	r3, r2
 800523e:	d012      	beq.n	8005266 <HAL_UART_IRQHandler+0x63a>
 8005240:	23a0      	movs	r3, #160	; 0xa0
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	da0d      	bge.n	8005266 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 fe0c 	bl	8005e6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005252:	e008      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
      return;
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	e006      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
    return;
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	e004      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
      return;
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	e002      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
      return;
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	e000      	b.n	8005266 <HAL_UART_IRQHandler+0x63a>
    return;
 8005264:	46c0      	nop			; (mov r8, r8)
  }
}
 8005266:	46bd      	mov	sp, r7
 8005268:	b02a      	add	sp, #168	; 0xa8
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	fffffeff 	.word	0xfffffeff
 8005270:	fffffedf 	.word	0xfffffedf
 8005274:	effffffe 	.word	0xeffffffe

08005278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b002      	add	sp, #8
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c0:	231e      	movs	r3, #30
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4aab      	ldr	r2, [pc, #684]	; (8005594 <UART_SetConfig+0x2dc>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4aa6      	ldr	r2, [pc, #664]	; (8005598 <UART_SetConfig+0x2e0>)
 80052fe:	4013      	ands	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a9d      	ldr	r2, [pc, #628]	; (800559c <UART_SetConfig+0x2e4>)
 8005326:	4013      	ands	r3, r2
 8005328:	0019      	movs	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	220f      	movs	r2, #15
 800533c:	4393      	bics	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a93      	ldr	r2, [pc, #588]	; (80055a0 <UART_SetConfig+0x2e8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d127      	bne.n	80053a6 <UART_SetConfig+0xee>
 8005356:	4b93      	ldr	r3, [pc, #588]	; (80055a4 <UART_SetConfig+0x2ec>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	2203      	movs	r2, #3
 800535c:	4013      	ands	r3, r2
 800535e:	2b03      	cmp	r3, #3
 8005360:	d017      	beq.n	8005392 <UART_SetConfig+0xda>
 8005362:	d81b      	bhi.n	800539c <UART_SetConfig+0xe4>
 8005364:	2b02      	cmp	r3, #2
 8005366:	d00a      	beq.n	800537e <UART_SetConfig+0xc6>
 8005368:	d818      	bhi.n	800539c <UART_SetConfig+0xe4>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <UART_SetConfig+0xbc>
 800536e:	2b01      	cmp	r3, #1
 8005370:	d00a      	beq.n	8005388 <UART_SetConfig+0xd0>
 8005372:	e013      	b.n	800539c <UART_SetConfig+0xe4>
 8005374:	231f      	movs	r3, #31
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e021      	b.n	80053c2 <UART_SetConfig+0x10a>
 800537e:	231f      	movs	r3, #31
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2202      	movs	r2, #2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e01c      	b.n	80053c2 <UART_SetConfig+0x10a>
 8005388:	231f      	movs	r3, #31
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	2204      	movs	r2, #4
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e017      	b.n	80053c2 <UART_SetConfig+0x10a>
 8005392:	231f      	movs	r3, #31
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	2208      	movs	r2, #8
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	e012      	b.n	80053c2 <UART_SetConfig+0x10a>
 800539c:	231f      	movs	r3, #31
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2210      	movs	r2, #16
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e00d      	b.n	80053c2 <UART_SetConfig+0x10a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <UART_SetConfig+0x2f0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d104      	bne.n	80053ba <UART_SetConfig+0x102>
 80053b0:	231f      	movs	r3, #31
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e003      	b.n	80053c2 <UART_SetConfig+0x10a>
 80053ba:	231f      	movs	r3, #31
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2210      	movs	r2, #16
 80053c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d000      	beq.n	80053d0 <UART_SetConfig+0x118>
 80053ce:	e06f      	b.n	80054b0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80053d0:	231f      	movs	r3, #31
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d01f      	beq.n	800541a <UART_SetConfig+0x162>
 80053da:	dc22      	bgt.n	8005422 <UART_SetConfig+0x16a>
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d017      	beq.n	8005410 <UART_SetConfig+0x158>
 80053e0:	dc1f      	bgt.n	8005422 <UART_SetConfig+0x16a>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <UART_SetConfig+0x134>
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d005      	beq.n	80053f6 <UART_SetConfig+0x13e>
 80053ea:	e01a      	b.n	8005422 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ec:	f7fd fe34 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 80053f0:	0003      	movs	r3, r0
 80053f2:	61bb      	str	r3, [r7, #24]
        break;
 80053f4:	e01c      	b.n	8005430 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80053f6:	4b6b      	ldr	r3, [pc, #428]	; (80055a4 <UART_SetConfig+0x2ec>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2207      	movs	r2, #7
 80053fe:	4013      	ands	r3, r2
 8005400:	3301      	adds	r3, #1
 8005402:	0019      	movs	r1, r3
 8005404:	4869      	ldr	r0, [pc, #420]	; (80055ac <UART_SetConfig+0x2f4>)
 8005406:	f7fa fe93 	bl	8000130 <__udivsi3>
 800540a:	0003      	movs	r3, r0
 800540c:	61bb      	str	r3, [r7, #24]
        break;
 800540e:	e00f      	b.n	8005430 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005410:	f7fd fdd6 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8005414:	0003      	movs	r3, r0
 8005416:	61bb      	str	r3, [r7, #24]
        break;
 8005418:	e00a      	b.n	8005430 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	61bb      	str	r3, [r7, #24]
        break;
 8005420:	e006      	b.n	8005430 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005426:	231e      	movs	r3, #30
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
        break;
 800542e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d100      	bne.n	8005438 <UART_SetConfig+0x180>
 8005436:	e097      	b.n	8005568 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543c:	4b5c      	ldr	r3, [pc, #368]	; (80055b0 <UART_SetConfig+0x2f8>)
 800543e:	0052      	lsls	r2, r2, #1
 8005440:	5ad3      	ldrh	r3, [r2, r3]
 8005442:	0019      	movs	r1, r3
 8005444:	69b8      	ldr	r0, [r7, #24]
 8005446:	f7fa fe73 	bl	8000130 <__udivsi3>
 800544a:	0003      	movs	r3, r0
 800544c:	005a      	lsls	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	18d2      	adds	r2, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0019      	movs	r1, r3
 800545c:	0010      	movs	r0, r2
 800545e:	f7fa fe67 	bl	8000130 <__udivsi3>
 8005462:	0003      	movs	r3, r0
 8005464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d91c      	bls.n	80054a6 <UART_SetConfig+0x1ee>
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	429a      	cmp	r2, r3
 8005474:	d217      	bcs.n	80054a6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	b29a      	uxth	r2, r3
 800547a:	200e      	movs	r0, #14
 800547c:	183b      	adds	r3, r7, r0
 800547e:	210f      	movs	r1, #15
 8005480:	438a      	bics	r2, r1
 8005482:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	2207      	movs	r2, #7
 800548c:	4013      	ands	r3, r2
 800548e:	b299      	uxth	r1, r3
 8005490:	183b      	adds	r3, r7, r0
 8005492:	183a      	adds	r2, r7, r0
 8005494:	8812      	ldrh	r2, [r2, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	183a      	adds	r2, r7, r0
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	e060      	b.n	8005568 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80054a6:	231e      	movs	r3, #30
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e05b      	b.n	8005568 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b0:	231f      	movs	r3, #31
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d01f      	beq.n	80054fa <UART_SetConfig+0x242>
 80054ba:	dc22      	bgt.n	8005502 <UART_SetConfig+0x24a>
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d017      	beq.n	80054f0 <UART_SetConfig+0x238>
 80054c0:	dc1f      	bgt.n	8005502 <UART_SetConfig+0x24a>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <UART_SetConfig+0x214>
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d005      	beq.n	80054d6 <UART_SetConfig+0x21e>
 80054ca:	e01a      	b.n	8005502 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fd fdc4 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 80054d0:	0003      	movs	r3, r0
 80054d2:	61bb      	str	r3, [r7, #24]
        break;
 80054d4:	e01c      	b.n	8005510 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <UART_SetConfig+0x2ec>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2207      	movs	r2, #7
 80054de:	4013      	ands	r3, r2
 80054e0:	3301      	adds	r3, #1
 80054e2:	0019      	movs	r1, r3
 80054e4:	4831      	ldr	r0, [pc, #196]	; (80055ac <UART_SetConfig+0x2f4>)
 80054e6:	f7fa fe23 	bl	8000130 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	61bb      	str	r3, [r7, #24]
        break;
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f0:	f7fd fd66 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80054f4:	0003      	movs	r3, r0
 80054f6:	61bb      	str	r3, [r7, #24]
        break;
 80054f8:	e00a      	b.n	8005510 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	61bb      	str	r3, [r7, #24]
        break;
 8005500:	e006      	b.n	8005510 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005506:	231e      	movs	r3, #30
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
        break;
 800550e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d028      	beq.n	8005568 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551a:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <UART_SetConfig+0x2f8>)
 800551c:	0052      	lsls	r2, r2, #1
 800551e:	5ad3      	ldrh	r3, [r2, r3]
 8005520:	0019      	movs	r1, r3
 8005522:	69b8      	ldr	r0, [r7, #24]
 8005524:	f7fa fe04 	bl	8000130 <__udivsi3>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	18d2      	adds	r2, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	0019      	movs	r1, r3
 800553a:	0010      	movs	r0, r2
 800553c:	f7fa fdf8 	bl	8000130 <__udivsi3>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d90a      	bls.n	8005560 <UART_SetConfig+0x2a8>
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	025b      	lsls	r3, r3, #9
 8005550:	429a      	cmp	r2, r3
 8005552:	d205      	bcs.n	8005560 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e003      	b.n	8005568 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005560:	231e      	movs	r3, #30
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	226a      	movs	r2, #106	; 0x6a
 800556c:	2101      	movs	r1, #1
 800556e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2268      	movs	r2, #104	; 0x68
 8005574:	2101      	movs	r1, #1
 8005576:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005584:	231e      	movs	r3, #30
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	781b      	ldrb	r3, [r3, #0]
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b008      	add	sp, #32
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	cfff69f3 	.word	0xcfff69f3
 8005598:	ffffcfff 	.word	0xffffcfff
 800559c:	11fff4ff 	.word	0x11fff4ff
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40004400 	.word	0x40004400
 80055ac:	02dc6c00 	.word	0x02dc6c00
 80055b0:	080074c8 	.word	0x080074c8

080055b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	2208      	movs	r2, #8
 80055c2:	4013      	ands	r3, r2
 80055c4:	d00b      	beq.n	80055de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a4a      	ldr	r2, [pc, #296]	; (80056f8 <UART_AdvFeatureConfig+0x144>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	0019      	movs	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	2201      	movs	r2, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	d00b      	beq.n	8005600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a43      	ldr	r2, [pc, #268]	; (80056fc <UART_AdvFeatureConfig+0x148>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	0019      	movs	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	2202      	movs	r2, #2
 8005606:	4013      	ands	r3, r2
 8005608:	d00b      	beq.n	8005622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a3b      	ldr	r2, [pc, #236]	; (8005700 <UART_AdvFeatureConfig+0x14c>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2204      	movs	r2, #4
 8005628:	4013      	ands	r3, r2
 800562a:	d00b      	beq.n	8005644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	4a34      	ldr	r2, [pc, #208]	; (8005704 <UART_AdvFeatureConfig+0x150>)
 8005634:	4013      	ands	r3, r2
 8005636:	0019      	movs	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	2210      	movs	r2, #16
 800564a:	4013      	ands	r3, r2
 800564c:	d00b      	beq.n	8005666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <UART_AdvFeatureConfig+0x154>)
 8005656:	4013      	ands	r3, r2
 8005658:	0019      	movs	r1, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	2220      	movs	r2, #32
 800566c:	4013      	ands	r3, r2
 800566e:	d00b      	beq.n	8005688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a25      	ldr	r2, [pc, #148]	; (800570c <UART_AdvFeatureConfig+0x158>)
 8005678:	4013      	ands	r3, r2
 800567a:	0019      	movs	r1, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	4013      	ands	r3, r2
 8005690:	d01d      	beq.n	80056ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <UART_AdvFeatureConfig+0x15c>)
 800569a:	4013      	ands	r3, r2
 800569c:	0019      	movs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	035b      	lsls	r3, r3, #13
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d10b      	bne.n	80056ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <UART_AdvFeatureConfig+0x160>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	4013      	ands	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <UART_AdvFeatureConfig+0x164>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	0019      	movs	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }
}
 80056f0:	46c0      	nop			; (mov r8, r8)
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b002      	add	sp, #8
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	ffff7fff 	.word	0xffff7fff
 80056fc:	fffdffff 	.word	0xfffdffff
 8005700:	fffeffff 	.word	0xfffeffff
 8005704:	fffbffff 	.word	0xfffbffff
 8005708:	ffffefff 	.word	0xffffefff
 800570c:	ffffdfff 	.word	0xffffdfff
 8005710:	ffefffff 	.word	0xffefffff
 8005714:	ff9fffff 	.word	0xff9fffff
 8005718:	fff7ffff 	.word	0xfff7ffff

0800571c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b092      	sub	sp, #72	; 0x48
 8005720:	af02      	add	r7, sp, #8
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2290      	movs	r2, #144	; 0x90
 8005728:	2100      	movs	r1, #0
 800572a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800572c:	f7fc fb88 	bl	8001e40 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2208      	movs	r2, #8
 800573c:	4013      	ands	r3, r2
 800573e:	2b08      	cmp	r3, #8
 8005740:	d12d      	bne.n	800579e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	0391      	lsls	r1, r2, #14
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4a47      	ldr	r2, [pc, #284]	; (8005868 <UART_CheckIdleState+0x14c>)
 800574c:	9200      	str	r2, [sp, #0]
 800574e:	2200      	movs	r2, #0
 8005750:	f000 f88e 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d022      	beq.n	800579e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005758:	f3ef 8310 	mrs	r3, PRIMASK
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
 8005762:	2301      	movs	r3, #1
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	438a      	bics	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2288      	movs	r2, #136	; 0x88
 800578e:	2120      	movs	r1, #32
 8005790:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2284      	movs	r2, #132	; 0x84
 8005796:	2100      	movs	r1, #0
 8005798:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e060      	b.n	8005860 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2204      	movs	r2, #4
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d146      	bne.n	800583a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	03d1      	lsls	r1, r2, #15
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <UART_CheckIdleState+0x14c>)
 80057b6:	9200      	str	r2, [sp, #0]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f000 f859 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d03b      	beq.n	800583a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057c2:	f3ef 8310 	mrs	r3, PRIMASK
 80057c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	2301      	movs	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f383 8810 	msr	PRIMASK, r3
}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4922      	ldr	r1, [pc, #136]	; (800586c <UART_CheckIdleState+0x150>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057f4:	f3ef 8310 	mrs	r3, PRIMASK
 80057f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f383 8810 	msr	PRIMASK, r3
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	438a      	bics	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f383 8810 	msr	PRIMASK, r3
}
 8005824:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	228c      	movs	r2, #140	; 0x8c
 800582a:	2120      	movs	r1, #32
 800582c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2284      	movs	r2, #132	; 0x84
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e012      	b.n	8005860 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2288      	movs	r2, #136	; 0x88
 800583e:	2120      	movs	r1, #32
 8005840:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	228c      	movs	r2, #140	; 0x8c
 8005846:	2120      	movs	r1, #32
 8005848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2284      	movs	r2, #132	; 0x84
 800585a:	2100      	movs	r1, #0
 800585c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b010      	add	sp, #64	; 0x40
 8005866:	bd80      	pop	{r7, pc}
 8005868:	01ffffff 	.word	0x01ffffff
 800586c:	fffffedf 	.word	0xfffffedf

08005870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	1dfb      	adds	r3, r7, #7
 800587e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	e04b      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3301      	adds	r3, #1
 8005886:	d048      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005888:	f7fc fada 	bl	8001e40 <HAL_GetTick>
 800588c:	0002      	movs	r2, r0
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e04b      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2204      	movs	r2, #4
 80058aa:	4013      	ands	r3, r2
 80058ac:	d035      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2208      	movs	r2, #8
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d111      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2208      	movs	r2, #8
 80058c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f922 	bl	8005b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2290      	movs	r2, #144	; 0x90
 80058d0:	2108      	movs	r1, #8
 80058d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2284      	movs	r2, #132	; 0x84
 80058d8:	2100      	movs	r1, #0
 80058da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e02c      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	401a      	ands	r2, r3
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d112      	bne.n	800591a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 f905 	bl	8005b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2290      	movs	r2, #144	; 0x90
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2284      	movs	r2, #132	; 0x84
 8005912:	2100      	movs	r1, #0
 8005914:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e00f      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	425a      	negs	r2, r3
 800592a:	4153      	adcs	r3, r2
 800592c:	b2db      	uxtb	r3, r3
 800592e:	001a      	movs	r2, r3
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0a4      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b004      	add	sp, #16
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b090      	sub	sp, #64	; 0x40
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	1dbb      	adds	r3, r7, #6
 8005950:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1dba      	adds	r2, r7, #6
 800595c:	215c      	movs	r1, #92	; 0x5c
 800595e:	8812      	ldrh	r2, [r2, #0]
 8005960:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2290      	movs	r2, #144	; 0x90
 8005966:	2100      	movs	r1, #0
 8005968:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	228c      	movs	r2, #140	; 0x8c
 800596e:	2122      	movs	r1, #34	; 0x22
 8005970:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	589b      	ldr	r3, [r3, r2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02d      	beq.n	80059d8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	589b      	ldr	r3, [r3, r2]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <UART_Start_Receive_DMA+0x140>)
 8005984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	589b      	ldr	r3, [r3, r2]
 800598c:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <UART_Start_Receive_DMA+0x144>)
 800598e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	589b      	ldr	r3, [r3, r2]
 8005996:	4a3d      	ldr	r2, [pc, #244]	; (8005a8c <UART_Start_Receive_DMA+0x148>)
 8005998:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	589b      	ldr	r3, [r3, r2]
 80059a0:	2200      	movs	r2, #0
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	5898      	ldr	r0, [r3, r2]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	0019      	movs	r1, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	001a      	movs	r2, r3
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	f7fc fbe6 	bl	800218c <HAL_DMA_Start_IT>
 80059c0:	1e03      	subs	r3, r0, #0
 80059c2:	d009      	beq.n	80059d8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2290      	movs	r2, #144	; 0x90
 80059c8:	2110      	movs	r1, #16
 80059ca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	228c      	movs	r2, #140	; 0x8c
 80059d0:	2120      	movs	r1, #32
 80059d2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e050      	b.n	8005a7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d019      	beq.n	8005a14 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ea:	2301      	movs	r3, #1
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	0049      	lsls	r1, r1, #1
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a14:	f3ef 8310 	mrs	r3, PRIMASK
 8005a18:	613b      	str	r3, [r7, #16]
  return(result);
 8005a1a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f383 8810 	msr	PRIMASK, r3
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2101      	movs	r1, #1
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f383 8810 	msr	PRIMASK, r3
}
 8005a44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	2301      	movs	r3, #1
 8005a52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2140      	movs	r1, #64	; 0x40
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b010      	add	sp, #64	; 0x40
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	08005bdd 	.word	0x08005bdd
 8005a88:	08005d0d 	.word	0x08005d0d
 8005a8c:	08005d4f 	.word	0x08005d4f

08005a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a98:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	21c0      	movs	r1, #192	; 0xc0
 8005aba:	438a      	bics	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005aca:	f3ef 8310 	mrs	r3, PRIMASK
 8005ace:	617b      	str	r3, [r7, #20]
  return(result);
 8005ad0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4908      	ldr	r1, [pc, #32]	; (8005b0c <UART_EndTxTransfer+0x7c>)
 8005aec:	400a      	ands	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2288      	movs	r2, #136	; 0x88
 8005b00:	2120      	movs	r1, #32
 8005b02:	5099      	str	r1, [r3, r2]
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b00a      	add	sp, #40	; 0x28
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ff7fffff 	.word	0xff7fffff

08005b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	2301      	movs	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4926      	ldr	r1, [pc, #152]	; (8005bd4 <UART_EndRxTransfer+0xc4>)
 8005b3a:	400a      	ands	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4e:	623b      	str	r3, [r7, #32]
  return(result);
 8005b50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
 8005b54:	2301      	movs	r3, #1
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	491b      	ldr	r1, [pc, #108]	; (8005bd8 <UART_EndRxTransfer+0xc8>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d118      	bne.n	8005bb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b84:	f3ef 8310 	mrs	r3, PRIMASK
 8005b88:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8e:	2301      	movs	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2110      	movs	r1, #16
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f383 8810 	msr	PRIMASK, r3
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	228c      	movs	r2, #140	; 0x8c
 8005bba:	2120      	movs	r1, #32
 8005bbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b00e      	add	sp, #56	; 0x38
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	fffffedf 	.word	0xfffffedf
 8005bd8:	effffffe 	.word	0xeffffffe

08005bdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b094      	sub	sp, #80	; 0x50
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d16f      	bne.n	8005cd6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	225e      	movs	r2, #94	; 0x5e
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c08:	2301      	movs	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	493a      	ldr	r1, [pc, #232]	; (8005d08 <UART_DMAReceiveCplt+0x12c>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c30:	f3ef 8310 	mrs	r3, PRIMASK
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	f383 8810 	msr	PRIMASK, r3
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	438a      	bics	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c62:	f3ef 8310 	mrs	r3, PRIMASK
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	f383 8810 	msr	PRIMASK, r3
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2140      	movs	r1, #64	; 0x40
 8005c84:	438a      	bics	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	f383 8810 	msr	PRIMASK, r3
}
 8005c92:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c96:	228c      	movs	r2, #140	; 0x8c
 8005c98:	2120      	movs	r1, #32
 8005c9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d118      	bne.n	8005cd6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005caa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cae:	2301      	movs	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f383 8810 	msr	PRIMASK, r3
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	438a      	bics	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd8:	2200      	movs	r2, #0
 8005cda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d108      	bne.n	8005cf6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	225c      	movs	r2, #92	; 0x5c
 8005ce8:	5a9a      	ldrh	r2, [r3, r2]
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7fa fb9c 	bl	800042c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cf4:	e003      	b.n	8005cfe <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7ff fac5 	bl	8005288 <HAL_UART_RxCpltCallback>
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b014      	add	sp, #80	; 0x50
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	fffffeff 	.word	0xfffffeff

08005d0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10a      	bne.n	8005d3e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	225c      	movs	r2, #92	; 0x5c
 8005d2c:	5a9b      	ldrh	r3, [r3, r2]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	0011      	movs	r1, r2
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fa fb78 	bl	800042c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d3c:	e003      	b.n	8005d46 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7ff faa9 	bl	8005298 <HAL_UART_RxHalfCpltCallback>
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b004      	add	sp, #16
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2288      	movs	r2, #136	; 0x88
 8005d60:	589b      	ldr	r3, [r3, r2]
 8005d62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	228c      	movs	r2, #140	; 0x8c
 8005d68:	589b      	ldr	r3, [r3, r2]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d10a      	bne.n	8005d90 <UART_DMAError+0x42>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b21      	cmp	r3, #33	; 0x21
 8005d7e:	d107      	bne.n	8005d90 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2256      	movs	r2, #86	; 0x56
 8005d84:	2100      	movs	r1, #0
 8005d86:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7ff fe80 	bl	8005a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d10a      	bne.n	8005db4 <UART_DMAError+0x66>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b22      	cmp	r3, #34	; 0x22
 8005da2:	d107      	bne.n	8005db4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	225e      	movs	r2, #94	; 0x5e
 8005da8:	2100      	movs	r1, #0
 8005daa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff feae 	bl	8005b10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2290      	movs	r2, #144	; 0x90
 8005db8:	589b      	ldr	r3, [r3, r2]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2190      	movs	r1, #144	; 0x90
 8005dc2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7ff fa6e 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b006      	add	sp, #24
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	225e      	movs	r2, #94	; 0x5e
 8005de6:	2100      	movs	r1, #0
 8005de8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2256      	movs	r2, #86	; 0x56
 8005dee:	2100      	movs	r1, #0
 8005df0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f7ff fa57 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	2301      	movs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f383 8810 	msr	PRIMASK, r3
}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2140      	movs	r1, #64	; 0x40
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f383 8810 	msr	PRIMASK, r3
}
 8005e3a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2288      	movs	r2, #136	; 0x88
 8005e40:	2120      	movs	r1, #32
 8005e42:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7ff fa13 	bl	8005278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b006      	add	sp, #24
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b002      	add	sp, #8
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2284      	movs	r2, #132	; 0x84
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e027      	b.n	8005ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2284      	movs	r2, #132	; 0x84
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2288      	movs	r2, #136	; 0x88
 8005eae:	2124      	movs	r1, #36	; 0x24
 8005eb0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	438a      	bics	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2288      	movs	r2, #136	; 0x88
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2284      	movs	r2, #132	; 0x84
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b004      	add	sp, #16
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	dfffffff 	.word	0xdfffffff

08005f00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2284      	movs	r2, #132	; 0x84
 8005f0e:	5c9b      	ldrb	r3, [r3, r2]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e02e      	b.n	8005f76 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2284      	movs	r2, #132	; 0x84
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2288      	movs	r2, #136	; 0x88
 8005f24:	2124      	movs	r1, #36	; 0x24
 8005f26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	438a      	bics	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	08d9      	lsrs	r1, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 f8bc 	bl	80060d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2288      	movs	r2, #136	; 0x88
 8005f68:	2120      	movs	r1, #32
 8005f6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2284      	movs	r2, #132	; 0x84
 8005f70:	2100      	movs	r1, #0
 8005f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2284      	movs	r2, #132	; 0x84
 8005f8e:	5c9b      	ldrb	r3, [r3, r2]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e02f      	b.n	8005ff8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2284      	movs	r2, #132	; 0x84
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2288      	movs	r2, #136	; 0x88
 8005fa4:	2124      	movs	r1, #36	; 0x24
 8005fa6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2101      	movs	r1, #1
 8005fbc:	438a      	bics	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4a0e      	ldr	r2, [pc, #56]	; (8006000 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	0019      	movs	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f87b 	bl	80060d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2288      	movs	r2, #136	; 0x88
 8005fea:	2120      	movs	r1, #32
 8005fec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2284      	movs	r2, #132	; 0x84
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b004      	add	sp, #16
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	f1ffffff 	.word	0xf1ffffff

08006004 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006004:	b5b0      	push	{r4, r5, r7, lr}
 8006006:	b08a      	sub	sp, #40	; 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	228c      	movs	r2, #140	; 0x8c
 8006016:	589b      	ldr	r3, [r3, r2]
 8006018:	2b20      	cmp	r3, #32
 800601a:	d156      	bne.n	80060ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006022:	1dbb      	adds	r3, r7, #6
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e04e      	b.n	80060cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	015b      	lsls	r3, r3, #5
 8006036:	429a      	cmp	r2, r3
 8006038:	d109      	bne.n	800604e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2201      	movs	r2, #1
 8006046:	4013      	ands	r3, r2
 8006048:	d001      	beq.n	800604e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e03e      	b.n	80060cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800605a:	2527      	movs	r5, #39	; 0x27
 800605c:	197c      	adds	r4, r7, r5
 800605e:	1dbb      	adds	r3, r7, #6
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	0018      	movs	r0, r3
 8006068:	f7ff fc6c 	bl	8005944 <UART_Start_Receive_DMA>
 800606c:	0003      	movs	r3, r0
 800606e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006070:	197b      	adds	r3, r7, r5
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d124      	bne.n	80060c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d11c      	bne.n	80060ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2210      	movs	r2, #16
 8006086:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006088:	f3ef 8310 	mrs	r3, PRIMASK
 800608c:	617b      	str	r3, [r7, #20]
  return(result);
 800608e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	623b      	str	r3, [r7, #32]
 8006092:	2301      	movs	r3, #1
 8006094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f383 8810 	msr	PRIMASK, r3
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2110      	movs	r1, #16
 80060aa:	430a      	orrs	r2, r1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f383 8810 	msr	PRIMASK, r3
}
 80060b8:	e003      	b.n	80060c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80060ba:	2327      	movs	r3, #39	; 0x27
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80060c2:	2327      	movs	r3, #39	; 0x27
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	e000      	b.n	80060cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b00a      	add	sp, #40	; 0x28
 80060d2:	bdb0      	pop	{r4, r5, r7, pc}

080060d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	226a      	movs	r2, #106	; 0x6a
 80060e8:	2101      	movs	r1, #1
 80060ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2268      	movs	r2, #104	; 0x68
 80060f0:	2101      	movs	r1, #1
 80060f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060f4:	e043      	b.n	800617e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060f6:	260f      	movs	r6, #15
 80060f8:	19bb      	adds	r3, r7, r6
 80060fa:	2208      	movs	r2, #8
 80060fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060fe:	200e      	movs	r0, #14
 8006100:	183b      	adds	r3, r7, r0
 8006102:	2208      	movs	r2, #8
 8006104:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	0e5b      	lsrs	r3, r3, #25
 800610e:	b2da      	uxtb	r2, r3
 8006110:	240d      	movs	r4, #13
 8006112:	193b      	adds	r3, r7, r4
 8006114:	2107      	movs	r1, #7
 8006116:	400a      	ands	r2, r1
 8006118:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	0f5b      	lsrs	r3, r3, #29
 8006122:	b2da      	uxtb	r2, r3
 8006124:	250c      	movs	r5, #12
 8006126:	197b      	adds	r3, r7, r5
 8006128:	2107      	movs	r1, #7
 800612a:	400a      	ands	r2, r1
 800612c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800612e:	183b      	adds	r3, r7, r0
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	197a      	adds	r2, r7, r5
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	4914      	ldr	r1, [pc, #80]	; (8006188 <UARTEx_SetNbDataToProcess+0xb4>)
 8006138:	5c8a      	ldrb	r2, [r1, r2]
 800613a:	435a      	muls	r2, r3
 800613c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800613e:	197b      	adds	r3, r7, r5
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4a12      	ldr	r2, [pc, #72]	; (800618c <UARTEx_SetNbDataToProcess+0xb8>)
 8006144:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006146:	0019      	movs	r1, r3
 8006148:	f7fa f87c 	bl	8000244 <__divsi3>
 800614c:	0003      	movs	r3, r0
 800614e:	b299      	uxth	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	226a      	movs	r2, #106	; 0x6a
 8006154:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006156:	19bb      	adds	r3, r7, r6
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	193a      	adds	r2, r7, r4
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	490a      	ldr	r1, [pc, #40]	; (8006188 <UARTEx_SetNbDataToProcess+0xb4>)
 8006160:	5c8a      	ldrb	r2, [r1, r2]
 8006162:	435a      	muls	r2, r3
 8006164:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006166:	193b      	adds	r3, r7, r4
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <UARTEx_SetNbDataToProcess+0xb8>)
 800616c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800616e:	0019      	movs	r1, r3
 8006170:	f7fa f868 	bl	8000244 <__divsi3>
 8006174:	0003      	movs	r3, r0
 8006176:	b299      	uxth	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2268      	movs	r2, #104	; 0x68
 800617c:	5299      	strh	r1, [r3, r2]
}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b005      	add	sp, #20
 8006184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	080074e0 	.word	0x080074e0
 800618c:	080074e8 	.word	0x080074e8

08006190 <atoi>:
 8006190:	b510      	push	{r4, lr}
 8006192:	220a      	movs	r2, #10
 8006194:	2100      	movs	r1, #0
 8006196:	f000 f94f 	bl	8006438 <strtol>
 800619a:	bd10      	pop	{r4, pc}

0800619c <malloc>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4b03      	ldr	r3, [pc, #12]	; (80061ac <malloc+0x10>)
 80061a0:	0001      	movs	r1, r0
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	f000 f830 	bl	8006208 <_malloc_r>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	20000064 	.word	0x20000064

080061b0 <free>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <free+0x10>)
 80061b4:	0001      	movs	r1, r0
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f000 fb72 	bl	80068a0 <_free_r>
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	20000064 	.word	0x20000064

080061c4 <sbrk_aligned>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4e0f      	ldr	r6, [pc, #60]	; (8006204 <sbrk_aligned+0x40>)
 80061c8:	000d      	movs	r5, r1
 80061ca:	6831      	ldr	r1, [r6, #0]
 80061cc:	0004      	movs	r4, r0
 80061ce:	2900      	cmp	r1, #0
 80061d0:	d102      	bne.n	80061d8 <sbrk_aligned+0x14>
 80061d2:	f000 faf3 	bl	80067bc <_sbrk_r>
 80061d6:	6030      	str	r0, [r6, #0]
 80061d8:	0029      	movs	r1, r5
 80061da:	0020      	movs	r0, r4
 80061dc:	f000 faee 	bl	80067bc <_sbrk_r>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d00a      	beq.n	80061fa <sbrk_aligned+0x36>
 80061e4:	2303      	movs	r3, #3
 80061e6:	1cc5      	adds	r5, r0, #3
 80061e8:	439d      	bics	r5, r3
 80061ea:	42a8      	cmp	r0, r5
 80061ec:	d007      	beq.n	80061fe <sbrk_aligned+0x3a>
 80061ee:	1a29      	subs	r1, r5, r0
 80061f0:	0020      	movs	r0, r4
 80061f2:	f000 fae3 	bl	80067bc <_sbrk_r>
 80061f6:	3001      	adds	r0, #1
 80061f8:	d101      	bne.n	80061fe <sbrk_aligned+0x3a>
 80061fa:	2501      	movs	r5, #1
 80061fc:	426d      	negs	r5, r5
 80061fe:	0028      	movs	r0, r5
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	20000488 	.word	0x20000488

08006208 <_malloc_r>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	2203      	movs	r2, #3
 800620c:	1ccb      	adds	r3, r1, #3
 800620e:	4393      	bics	r3, r2
 8006210:	3308      	adds	r3, #8
 8006212:	0006      	movs	r6, r0
 8006214:	001f      	movs	r7, r3
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d238      	bcs.n	800628c <_malloc_r+0x84>
 800621a:	270c      	movs	r7, #12
 800621c:	42b9      	cmp	r1, r7
 800621e:	d837      	bhi.n	8006290 <_malloc_r+0x88>
 8006220:	0030      	movs	r0, r6
 8006222:	f000 f873 	bl	800630c <__malloc_lock>
 8006226:	4b38      	ldr	r3, [pc, #224]	; (8006308 <_malloc_r+0x100>)
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	001c      	movs	r4, r3
 800622e:	2c00      	cmp	r4, #0
 8006230:	d133      	bne.n	800629a <_malloc_r+0x92>
 8006232:	0039      	movs	r1, r7
 8006234:	0030      	movs	r0, r6
 8006236:	f7ff ffc5 	bl	80061c4 <sbrk_aligned>
 800623a:	0004      	movs	r4, r0
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d15e      	bne.n	80062fe <_malloc_r+0xf6>
 8006240:	9b00      	ldr	r3, [sp, #0]
 8006242:	681c      	ldr	r4, [r3, #0]
 8006244:	0025      	movs	r5, r4
 8006246:	2d00      	cmp	r5, #0
 8006248:	d14e      	bne.n	80062e8 <_malloc_r+0xe0>
 800624a:	2c00      	cmp	r4, #0
 800624c:	d051      	beq.n	80062f2 <_malloc_r+0xea>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	0029      	movs	r1, r5
 8006252:	18e3      	adds	r3, r4, r3
 8006254:	0030      	movs	r0, r6
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	f000 fab0 	bl	80067bc <_sbrk_r>
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	4283      	cmp	r3, r0
 8006260:	d147      	bne.n	80062f2 <_malloc_r+0xea>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	0030      	movs	r0, r6
 8006266:	1aff      	subs	r7, r7, r3
 8006268:	0039      	movs	r1, r7
 800626a:	f7ff ffab 	bl	80061c4 <sbrk_aligned>
 800626e:	3001      	adds	r0, #1
 8006270:	d03f      	beq.n	80062f2 <_malloc_r+0xea>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	19db      	adds	r3, r3, r7
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	9b00      	ldr	r3, [sp, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d040      	beq.n	8006302 <_malloc_r+0xfa>
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	42a2      	cmp	r2, r4
 8006284:	d133      	bne.n	80062ee <_malloc_r+0xe6>
 8006286:	2200      	movs	r2, #0
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e014      	b.n	80062b6 <_malloc_r+0xae>
 800628c:	2b00      	cmp	r3, #0
 800628e:	dac5      	bge.n	800621c <_malloc_r+0x14>
 8006290:	230c      	movs	r3, #12
 8006292:	2500      	movs	r5, #0
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	0028      	movs	r0, r5
 8006298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800629a:	6821      	ldr	r1, [r4, #0]
 800629c:	1bc9      	subs	r1, r1, r7
 800629e:	d420      	bmi.n	80062e2 <_malloc_r+0xda>
 80062a0:	290b      	cmp	r1, #11
 80062a2:	d918      	bls.n	80062d6 <_malloc_r+0xce>
 80062a4:	19e2      	adds	r2, r4, r7
 80062a6:	6027      	str	r7, [r4, #0]
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d112      	bne.n	80062d2 <_malloc_r+0xca>
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	6011      	str	r1, [r2, #0]
 80062b4:	6053      	str	r3, [r2, #4]
 80062b6:	0030      	movs	r0, r6
 80062b8:	0025      	movs	r5, r4
 80062ba:	f000 f82f 	bl	800631c <__malloc_unlock>
 80062be:	2207      	movs	r2, #7
 80062c0:	350b      	adds	r5, #11
 80062c2:	1d23      	adds	r3, r4, #4
 80062c4:	4395      	bics	r5, r2
 80062c6:	1aea      	subs	r2, r5, r3
 80062c8:	429d      	cmp	r5, r3
 80062ca:	d0e4      	beq.n	8006296 <_malloc_r+0x8e>
 80062cc:	1b5b      	subs	r3, r3, r5
 80062ce:	50a3      	str	r3, [r4, r2]
 80062d0:	e7e1      	b.n	8006296 <_malloc_r+0x8e>
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e7ec      	b.n	80062b0 <_malloc_r+0xa8>
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	42a3      	cmp	r3, r4
 80062da:	d1d5      	bne.n	8006288 <_malloc_r+0x80>
 80062dc:	9b00      	ldr	r3, [sp, #0]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e7e9      	b.n	80062b6 <_malloc_r+0xae>
 80062e2:	0023      	movs	r3, r4
 80062e4:	6864      	ldr	r4, [r4, #4]
 80062e6:	e7a2      	b.n	800622e <_malloc_r+0x26>
 80062e8:	002c      	movs	r4, r5
 80062ea:	686d      	ldr	r5, [r5, #4]
 80062ec:	e7ab      	b.n	8006246 <_malloc_r+0x3e>
 80062ee:	0013      	movs	r3, r2
 80062f0:	e7c4      	b.n	800627c <_malloc_r+0x74>
 80062f2:	230c      	movs	r3, #12
 80062f4:	0030      	movs	r0, r6
 80062f6:	6033      	str	r3, [r6, #0]
 80062f8:	f000 f810 	bl	800631c <__malloc_unlock>
 80062fc:	e7cb      	b.n	8006296 <_malloc_r+0x8e>
 80062fe:	6027      	str	r7, [r4, #0]
 8006300:	e7d9      	b.n	80062b6 <_malloc_r+0xae>
 8006302:	605b      	str	r3, [r3, #4]
 8006304:	deff      	udf	#255	; 0xff
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	20000484 	.word	0x20000484

0800630c <__malloc_lock>:
 800630c:	b510      	push	{r4, lr}
 800630e:	4802      	ldr	r0, [pc, #8]	; (8006318 <__malloc_lock+0xc>)
 8006310:	f000 faa5 	bl	800685e <__retarget_lock_acquire_recursive>
 8006314:	bd10      	pop	{r4, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	200005cc 	.word	0x200005cc

0800631c <__malloc_unlock>:
 800631c:	b510      	push	{r4, lr}
 800631e:	4802      	ldr	r0, [pc, #8]	; (8006328 <__malloc_unlock+0xc>)
 8006320:	f000 fa9e 	bl	8006860 <__retarget_lock_release_recursive>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	200005cc 	.word	0x200005cc

0800632c <_strtol_l.constprop.0>:
 800632c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632e:	b087      	sub	sp, #28
 8006330:	001e      	movs	r6, r3
 8006332:	9005      	str	r0, [sp, #20]
 8006334:	9101      	str	r1, [sp, #4]
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d048      	beq.n	80063ce <_strtol_l.constprop.0+0xa2>
 800633c:	000b      	movs	r3, r1
 800633e:	2e24      	cmp	r6, #36	; 0x24
 8006340:	d845      	bhi.n	80063ce <_strtol_l.constprop.0+0xa2>
 8006342:	4a3b      	ldr	r2, [pc, #236]	; (8006430 <_strtol_l.constprop.0+0x104>)
 8006344:	2108      	movs	r1, #8
 8006346:	4694      	mov	ip, r2
 8006348:	001a      	movs	r2, r3
 800634a:	4660      	mov	r0, ip
 800634c:	7814      	ldrb	r4, [r2, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	5d00      	ldrb	r0, [r0, r4]
 8006352:	001d      	movs	r5, r3
 8006354:	0007      	movs	r7, r0
 8006356:	400f      	ands	r7, r1
 8006358:	4208      	tst	r0, r1
 800635a:	d1f5      	bne.n	8006348 <_strtol_l.constprop.0+0x1c>
 800635c:	2c2d      	cmp	r4, #45	; 0x2d
 800635e:	d13d      	bne.n	80063dc <_strtol_l.constprop.0+0xb0>
 8006360:	2701      	movs	r7, #1
 8006362:	781c      	ldrb	r4, [r3, #0]
 8006364:	1c95      	adds	r5, r2, #2
 8006366:	2e00      	cmp	r6, #0
 8006368:	d05e      	beq.n	8006428 <_strtol_l.constprop.0+0xfc>
 800636a:	2e10      	cmp	r6, #16
 800636c:	d109      	bne.n	8006382 <_strtol_l.constprop.0+0x56>
 800636e:	2c30      	cmp	r4, #48	; 0x30
 8006370:	d107      	bne.n	8006382 <_strtol_l.constprop.0+0x56>
 8006372:	2220      	movs	r2, #32
 8006374:	782b      	ldrb	r3, [r5, #0]
 8006376:	4393      	bics	r3, r2
 8006378:	2b58      	cmp	r3, #88	; 0x58
 800637a:	d150      	bne.n	800641e <_strtol_l.constprop.0+0xf2>
 800637c:	2610      	movs	r6, #16
 800637e:	786c      	ldrb	r4, [r5, #1]
 8006380:	3502      	adds	r5, #2
 8006382:	4b2c      	ldr	r3, [pc, #176]	; (8006434 <_strtol_l.constprop.0+0x108>)
 8006384:	0031      	movs	r1, r6
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	0018      	movs	r0, r3
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	f7f9 ff56 	bl	800023c <__aeabi_uidivmod>
 8006390:	2200      	movs	r2, #0
 8006392:	9104      	str	r1, [sp, #16]
 8006394:	2101      	movs	r1, #1
 8006396:	4684      	mov	ip, r0
 8006398:	0010      	movs	r0, r2
 800639a:	4249      	negs	r1, r1
 800639c:	0023      	movs	r3, r4
 800639e:	3b30      	subs	r3, #48	; 0x30
 80063a0:	2b09      	cmp	r3, #9
 80063a2:	d903      	bls.n	80063ac <_strtol_l.constprop.0+0x80>
 80063a4:	3b11      	subs	r3, #17
 80063a6:	2b19      	cmp	r3, #25
 80063a8:	d81d      	bhi.n	80063e6 <_strtol_l.constprop.0+0xba>
 80063aa:	330a      	adds	r3, #10
 80063ac:	429e      	cmp	r6, r3
 80063ae:	dd1e      	ble.n	80063ee <_strtol_l.constprop.0+0xc2>
 80063b0:	1c54      	adds	r4, r2, #1
 80063b2:	d009      	beq.n	80063c8 <_strtol_l.constprop.0+0x9c>
 80063b4:	000a      	movs	r2, r1
 80063b6:	4584      	cmp	ip, r0
 80063b8:	d306      	bcc.n	80063c8 <_strtol_l.constprop.0+0x9c>
 80063ba:	d102      	bne.n	80063c2 <_strtol_l.constprop.0+0x96>
 80063bc:	9c04      	ldr	r4, [sp, #16]
 80063be:	429c      	cmp	r4, r3
 80063c0:	db02      	blt.n	80063c8 <_strtol_l.constprop.0+0x9c>
 80063c2:	2201      	movs	r2, #1
 80063c4:	4370      	muls	r0, r6
 80063c6:	1818      	adds	r0, r3, r0
 80063c8:	782c      	ldrb	r4, [r5, #0]
 80063ca:	3501      	adds	r5, #1
 80063cc:	e7e6      	b.n	800639c <_strtol_l.constprop.0+0x70>
 80063ce:	f000 fa1b 	bl	8006808 <__errno>
 80063d2:	2316      	movs	r3, #22
 80063d4:	6003      	str	r3, [r0, #0]
 80063d6:	2000      	movs	r0, #0
 80063d8:	b007      	add	sp, #28
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063dc:	2c2b      	cmp	r4, #43	; 0x2b
 80063de:	d1c2      	bne.n	8006366 <_strtol_l.constprop.0+0x3a>
 80063e0:	781c      	ldrb	r4, [r3, #0]
 80063e2:	1c95      	adds	r5, r2, #2
 80063e4:	e7bf      	b.n	8006366 <_strtol_l.constprop.0+0x3a>
 80063e6:	0023      	movs	r3, r4
 80063e8:	3b61      	subs	r3, #97	; 0x61
 80063ea:	2b19      	cmp	r3, #25
 80063ec:	d9dd      	bls.n	80063aa <_strtol_l.constprop.0+0x7e>
 80063ee:	1c53      	adds	r3, r2, #1
 80063f0:	d109      	bne.n	8006406 <_strtol_l.constprop.0+0xda>
 80063f2:	2322      	movs	r3, #34	; 0x22
 80063f4:	9a05      	ldr	r2, [sp, #20]
 80063f6:	9803      	ldr	r0, [sp, #12]
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	9b02      	ldr	r3, [sp, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0eb      	beq.n	80063d8 <_strtol_l.constprop.0+0xac>
 8006400:	1e6b      	subs	r3, r5, #1
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	e007      	b.n	8006416 <_strtol_l.constprop.0+0xea>
 8006406:	2f00      	cmp	r7, #0
 8006408:	d000      	beq.n	800640c <_strtol_l.constprop.0+0xe0>
 800640a:	4240      	negs	r0, r0
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0e2      	beq.n	80063d8 <_strtol_l.constprop.0+0xac>
 8006412:	2a00      	cmp	r2, #0
 8006414:	d1f4      	bne.n	8006400 <_strtol_l.constprop.0+0xd4>
 8006416:	9b02      	ldr	r3, [sp, #8]
 8006418:	9a01      	ldr	r2, [sp, #4]
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	e7dc      	b.n	80063d8 <_strtol_l.constprop.0+0xac>
 800641e:	2430      	movs	r4, #48	; 0x30
 8006420:	2e00      	cmp	r6, #0
 8006422:	d1ae      	bne.n	8006382 <_strtol_l.constprop.0+0x56>
 8006424:	3608      	adds	r6, #8
 8006426:	e7ac      	b.n	8006382 <_strtol_l.constprop.0+0x56>
 8006428:	2c30      	cmp	r4, #48	; 0x30
 800642a:	d0a2      	beq.n	8006372 <_strtol_l.constprop.0+0x46>
 800642c:	260a      	movs	r6, #10
 800642e:	e7a8      	b.n	8006382 <_strtol_l.constprop.0+0x56>
 8006430:	080074f1 	.word	0x080074f1
 8006434:	7fffffff 	.word	0x7fffffff

08006438 <strtol>:
 8006438:	b510      	push	{r4, lr}
 800643a:	4c04      	ldr	r4, [pc, #16]	; (800644c <strtol+0x14>)
 800643c:	0013      	movs	r3, r2
 800643e:	000a      	movs	r2, r1
 8006440:	0001      	movs	r1, r0
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	f7ff ff72 	bl	800632c <_strtol_l.constprop.0>
 8006448:	bd10      	pop	{r4, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	20000064 	.word	0x20000064

08006450 <std>:
 8006450:	2300      	movs	r3, #0
 8006452:	b510      	push	{r4, lr}
 8006454:	0004      	movs	r4, r0
 8006456:	6003      	str	r3, [r0, #0]
 8006458:	6043      	str	r3, [r0, #4]
 800645a:	6083      	str	r3, [r0, #8]
 800645c:	8181      	strh	r1, [r0, #12]
 800645e:	6643      	str	r3, [r0, #100]	; 0x64
 8006460:	81c2      	strh	r2, [r0, #14]
 8006462:	6103      	str	r3, [r0, #16]
 8006464:	6143      	str	r3, [r0, #20]
 8006466:	6183      	str	r3, [r0, #24]
 8006468:	0019      	movs	r1, r3
 800646a:	2208      	movs	r2, #8
 800646c:	305c      	adds	r0, #92	; 0x5c
 800646e:	f000 f8ff 	bl	8006670 <memset>
 8006472:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <std+0x50>)
 8006474:	6224      	str	r4, [r4, #32]
 8006476:	6263      	str	r3, [r4, #36]	; 0x24
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <std+0x54>)
 800647a:	62a3      	str	r3, [r4, #40]	; 0x28
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <std+0x58>)
 800647e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <std+0x5c>)
 8006482:	6323      	str	r3, [r4, #48]	; 0x30
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <std+0x60>)
 8006486:	429c      	cmp	r4, r3
 8006488:	d005      	beq.n	8006496 <std+0x46>
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <std+0x64>)
 800648c:	429c      	cmp	r4, r3
 800648e:	d002      	beq.n	8006496 <std+0x46>
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <std+0x68>)
 8006492:	429c      	cmp	r4, r3
 8006494:	d103      	bne.n	800649e <std+0x4e>
 8006496:	0020      	movs	r0, r4
 8006498:	3058      	adds	r0, #88	; 0x58
 800649a:	f000 f9df 	bl	800685c <__retarget_lock_init_recursive>
 800649e:	bd10      	pop	{r4, pc}
 80064a0:	080065d9 	.word	0x080065d9
 80064a4:	08006601 	.word	0x08006601
 80064a8:	08006639 	.word	0x08006639
 80064ac:	08006665 	.word	0x08006665
 80064b0:	2000048c 	.word	0x2000048c
 80064b4:	200004f4 	.word	0x200004f4
 80064b8:	2000055c 	.word	0x2000055c

080064bc <stdio_exit_handler>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	4a03      	ldr	r2, [pc, #12]	; (80064cc <stdio_exit_handler+0x10>)
 80064c0:	4903      	ldr	r1, [pc, #12]	; (80064d0 <stdio_exit_handler+0x14>)
 80064c2:	4804      	ldr	r0, [pc, #16]	; (80064d4 <stdio_exit_handler+0x18>)
 80064c4:	f000 f86c 	bl	80065a0 <_fwalk_sglue>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	2000000c 	.word	0x2000000c
 80064d0:	08006a49 	.word	0x08006a49
 80064d4:	20000018 	.word	0x20000018

080064d8 <cleanup_stdio>:
 80064d8:	6841      	ldr	r1, [r0, #4]
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <cleanup_stdio+0x30>)
 80064dc:	b510      	push	{r4, lr}
 80064de:	0004      	movs	r4, r0
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d001      	beq.n	80064e8 <cleanup_stdio+0x10>
 80064e4:	f000 fab0 	bl	8006a48 <_fflush_r>
 80064e8:	68a1      	ldr	r1, [r4, #8]
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <cleanup_stdio+0x34>)
 80064ec:	4299      	cmp	r1, r3
 80064ee:	d002      	beq.n	80064f6 <cleanup_stdio+0x1e>
 80064f0:	0020      	movs	r0, r4
 80064f2:	f000 faa9 	bl	8006a48 <_fflush_r>
 80064f6:	68e1      	ldr	r1, [r4, #12]
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <cleanup_stdio+0x38>)
 80064fa:	4299      	cmp	r1, r3
 80064fc:	d002      	beq.n	8006504 <cleanup_stdio+0x2c>
 80064fe:	0020      	movs	r0, r4
 8006500:	f000 faa2 	bl	8006a48 <_fflush_r>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	2000048c 	.word	0x2000048c
 800650c:	200004f4 	.word	0x200004f4
 8006510:	2000055c 	.word	0x2000055c

08006514 <global_stdio_init.part.0>:
 8006514:	b510      	push	{r4, lr}
 8006516:	4b09      	ldr	r3, [pc, #36]	; (800653c <global_stdio_init.part.0+0x28>)
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <global_stdio_init.part.0+0x2c>)
 800651a:	2104      	movs	r1, #4
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	4809      	ldr	r0, [pc, #36]	; (8006544 <global_stdio_init.part.0+0x30>)
 8006520:	2200      	movs	r2, #0
 8006522:	f7ff ff95 	bl	8006450 <std>
 8006526:	2201      	movs	r2, #1
 8006528:	2109      	movs	r1, #9
 800652a:	4807      	ldr	r0, [pc, #28]	; (8006548 <global_stdio_init.part.0+0x34>)
 800652c:	f7ff ff90 	bl	8006450 <std>
 8006530:	2202      	movs	r2, #2
 8006532:	2112      	movs	r1, #18
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <global_stdio_init.part.0+0x38>)
 8006536:	f7ff ff8b 	bl	8006450 <std>
 800653a:	bd10      	pop	{r4, pc}
 800653c:	200005c4 	.word	0x200005c4
 8006540:	080064bd 	.word	0x080064bd
 8006544:	2000048c 	.word	0x2000048c
 8006548:	200004f4 	.word	0x200004f4
 800654c:	2000055c 	.word	0x2000055c

08006550 <__sfp_lock_acquire>:
 8006550:	b510      	push	{r4, lr}
 8006552:	4802      	ldr	r0, [pc, #8]	; (800655c <__sfp_lock_acquire+0xc>)
 8006554:	f000 f983 	bl	800685e <__retarget_lock_acquire_recursive>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	200005cd 	.word	0x200005cd

08006560 <__sfp_lock_release>:
 8006560:	b510      	push	{r4, lr}
 8006562:	4802      	ldr	r0, [pc, #8]	; (800656c <__sfp_lock_release+0xc>)
 8006564:	f000 f97c 	bl	8006860 <__retarget_lock_release_recursive>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	200005cd 	.word	0x200005cd

08006570 <__sinit>:
 8006570:	b510      	push	{r4, lr}
 8006572:	0004      	movs	r4, r0
 8006574:	f7ff ffec 	bl	8006550 <__sfp_lock_acquire>
 8006578:	6a23      	ldr	r3, [r4, #32]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <__sinit+0x14>
 800657e:	f7ff ffef 	bl	8006560 <__sfp_lock_release>
 8006582:	bd10      	pop	{r4, pc}
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <__sinit+0x28>)
 8006586:	6223      	str	r3, [r4, #32]
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <__sinit+0x2c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f6      	bne.n	800657e <__sinit+0xe>
 8006590:	f7ff ffc0 	bl	8006514 <global_stdio_init.part.0>
 8006594:	e7f3      	b.n	800657e <__sinit+0xe>
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	080064d9 	.word	0x080064d9
 800659c:	200005c4 	.word	0x200005c4

080065a0 <_fwalk_sglue>:
 80065a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a2:	0014      	movs	r4, r2
 80065a4:	2600      	movs	r6, #0
 80065a6:	9000      	str	r0, [sp, #0]
 80065a8:	9101      	str	r1, [sp, #4]
 80065aa:	68a5      	ldr	r5, [r4, #8]
 80065ac:	6867      	ldr	r7, [r4, #4]
 80065ae:	3f01      	subs	r7, #1
 80065b0:	d504      	bpl.n	80065bc <_fwalk_sglue+0x1c>
 80065b2:	6824      	ldr	r4, [r4, #0]
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	d1f8      	bne.n	80065aa <_fwalk_sglue+0xa>
 80065b8:	0030      	movs	r0, r6
 80065ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065bc:	89ab      	ldrh	r3, [r5, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d908      	bls.n	80065d4 <_fwalk_sglue+0x34>
 80065c2:	220e      	movs	r2, #14
 80065c4:	5eab      	ldrsh	r3, [r5, r2]
 80065c6:	3301      	adds	r3, #1
 80065c8:	d004      	beq.n	80065d4 <_fwalk_sglue+0x34>
 80065ca:	0029      	movs	r1, r5
 80065cc:	9800      	ldr	r0, [sp, #0]
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4306      	orrs	r6, r0
 80065d4:	3568      	adds	r5, #104	; 0x68
 80065d6:	e7ea      	b.n	80065ae <_fwalk_sglue+0xe>

080065d8 <__sread>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	000c      	movs	r4, r1
 80065dc:	250e      	movs	r5, #14
 80065de:	5f49      	ldrsh	r1, [r1, r5]
 80065e0:	f000 f8d8 	bl	8006794 <_read_r>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	db03      	blt.n	80065f0 <__sread+0x18>
 80065e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80065ea:	181b      	adds	r3, r3, r0
 80065ec:	6563      	str	r3, [r4, #84]	; 0x54
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	4a02      	ldr	r2, [pc, #8]	; (80065fc <__sread+0x24>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	e7f9      	b.n	80065ee <__sread+0x16>
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	ffffefff 	.word	0xffffefff

08006600 <__swrite>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	001f      	movs	r7, r3
 8006604:	898b      	ldrh	r3, [r1, #12]
 8006606:	0005      	movs	r5, r0
 8006608:	000c      	movs	r4, r1
 800660a:	0016      	movs	r6, r2
 800660c:	05db      	lsls	r3, r3, #23
 800660e:	d505      	bpl.n	800661c <__swrite+0x1c>
 8006610:	230e      	movs	r3, #14
 8006612:	5ec9      	ldrsh	r1, [r1, r3]
 8006614:	2200      	movs	r2, #0
 8006616:	2302      	movs	r3, #2
 8006618:	f000 f8a8 	bl	800676c <_lseek_r>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	4a05      	ldr	r2, [pc, #20]	; (8006634 <__swrite+0x34>)
 8006620:	0028      	movs	r0, r5
 8006622:	4013      	ands	r3, r2
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	0032      	movs	r2, r6
 8006628:	230e      	movs	r3, #14
 800662a:	5ee1      	ldrsh	r1, [r4, r3]
 800662c:	003b      	movs	r3, r7
 800662e:	f000 f8d7 	bl	80067e0 <_write_r>
 8006632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006634:	ffffefff 	.word	0xffffefff

08006638 <__sseek>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	000c      	movs	r4, r1
 800663c:	250e      	movs	r5, #14
 800663e:	5f49      	ldrsh	r1, [r1, r5]
 8006640:	f000 f894 	bl	800676c <_lseek_r>
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	1c42      	adds	r2, r0, #1
 8006648:	d103      	bne.n	8006652 <__sseek+0x1a>
 800664a:	4a05      	ldr	r2, [pc, #20]	; (8006660 <__sseek+0x28>)
 800664c:	4013      	ands	r3, r2
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	2280      	movs	r2, #128	; 0x80
 8006654:	0152      	lsls	r2, r2, #5
 8006656:	4313      	orrs	r3, r2
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	6560      	str	r0, [r4, #84]	; 0x54
 800665c:	e7f8      	b.n	8006650 <__sseek+0x18>
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	ffffefff 	.word	0xffffefff

08006664 <__sclose>:
 8006664:	b510      	push	{r4, lr}
 8006666:	230e      	movs	r3, #14
 8006668:	5ec9      	ldrsh	r1, [r1, r3]
 800666a:	f000 f86d 	bl	8006748 <_close_r>
 800666e:	bd10      	pop	{r4, pc}

08006670 <memset>:
 8006670:	0003      	movs	r3, r0
 8006672:	1882      	adds	r2, r0, r2
 8006674:	4293      	cmp	r3, r2
 8006676:	d100      	bne.n	800667a <memset+0xa>
 8006678:	4770      	bx	lr
 800667a:	7019      	strb	r1, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	e7f9      	b.n	8006674 <memset+0x4>

08006680 <strtok>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4b16      	ldr	r3, [pc, #88]	; (80066dc <strtok+0x5c>)
 8006684:	0005      	movs	r5, r0
 8006686:	681f      	ldr	r7, [r3, #0]
 8006688:	000e      	movs	r6, r1
 800668a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800668c:	2c00      	cmp	r4, #0
 800668e:	d11d      	bne.n	80066cc <strtok+0x4c>
 8006690:	2050      	movs	r0, #80	; 0x50
 8006692:	f7ff fd83 	bl	800619c <malloc>
 8006696:	1e02      	subs	r2, r0, #0
 8006698:	6478      	str	r0, [r7, #68]	; 0x44
 800669a:	d104      	bne.n	80066a6 <strtok+0x26>
 800669c:	215b      	movs	r1, #91	; 0x5b
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <strtok+0x60>)
 80066a0:	4810      	ldr	r0, [pc, #64]	; (80066e4 <strtok+0x64>)
 80066a2:	f000 f8df 	bl	8006864 <__assert_func>
 80066a6:	6004      	str	r4, [r0, #0]
 80066a8:	6044      	str	r4, [r0, #4]
 80066aa:	6084      	str	r4, [r0, #8]
 80066ac:	60c4      	str	r4, [r0, #12]
 80066ae:	6104      	str	r4, [r0, #16]
 80066b0:	6144      	str	r4, [r0, #20]
 80066b2:	6184      	str	r4, [r0, #24]
 80066b4:	6284      	str	r4, [r0, #40]	; 0x28
 80066b6:	62c4      	str	r4, [r0, #44]	; 0x2c
 80066b8:	6304      	str	r4, [r0, #48]	; 0x30
 80066ba:	6344      	str	r4, [r0, #52]	; 0x34
 80066bc:	6384      	str	r4, [r0, #56]	; 0x38
 80066be:	63c4      	str	r4, [r0, #60]	; 0x3c
 80066c0:	6404      	str	r4, [r0, #64]	; 0x40
 80066c2:	6444      	str	r4, [r0, #68]	; 0x44
 80066c4:	6484      	str	r4, [r0, #72]	; 0x48
 80066c6:	64c4      	str	r4, [r0, #76]	; 0x4c
 80066c8:	7704      	strb	r4, [r0, #28]
 80066ca:	6244      	str	r4, [r0, #36]	; 0x24
 80066cc:	0031      	movs	r1, r6
 80066ce:	0028      	movs	r0, r5
 80066d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d2:	2301      	movs	r3, #1
 80066d4:	f000 f808 	bl	80066e8 <__strtok_r>
 80066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	20000064 	.word	0x20000064
 80066e0:	080075f1 	.word	0x080075f1
 80066e4:	08007608 	.word	0x08007608

080066e8 <__strtok_r>:
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d102      	bne.n	80066f4 <__strtok_r+0xc>
 80066ee:	6810      	ldr	r0, [r2, #0]
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d013      	beq.n	800671c <__strtok_r+0x34>
 80066f4:	0004      	movs	r4, r0
 80066f6:	0020      	movs	r0, r4
 80066f8:	000e      	movs	r6, r1
 80066fa:	7805      	ldrb	r5, [r0, #0]
 80066fc:	3401      	adds	r4, #1
 80066fe:	7837      	ldrb	r7, [r6, #0]
 8006700:	2f00      	cmp	r7, #0
 8006702:	d104      	bne.n	800670e <__strtok_r+0x26>
 8006704:	2d00      	cmp	r5, #0
 8006706:	d10f      	bne.n	8006728 <__strtok_r+0x40>
 8006708:	0028      	movs	r0, r5
 800670a:	6015      	str	r5, [r2, #0]
 800670c:	e006      	b.n	800671c <__strtok_r+0x34>
 800670e:	3601      	adds	r6, #1
 8006710:	42bd      	cmp	r5, r7
 8006712:	d1f4      	bne.n	80066fe <__strtok_r+0x16>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1ee      	bne.n	80066f6 <__strtok_r+0xe>
 8006718:	6014      	str	r4, [r2, #0]
 800671a:	7003      	strb	r3, [r0, #0]
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671e:	002f      	movs	r7, r5
 8006720:	e00f      	b.n	8006742 <__strtok_r+0x5a>
 8006722:	3301      	adds	r3, #1
 8006724:	2e00      	cmp	r6, #0
 8006726:	d104      	bne.n	8006732 <__strtok_r+0x4a>
 8006728:	0023      	movs	r3, r4
 800672a:	3401      	adds	r4, #1
 800672c:	781d      	ldrb	r5, [r3, #0]
 800672e:	0027      	movs	r7, r4
 8006730:	000b      	movs	r3, r1
 8006732:	781e      	ldrb	r6, [r3, #0]
 8006734:	42b5      	cmp	r5, r6
 8006736:	d1f4      	bne.n	8006722 <__strtok_r+0x3a>
 8006738:	2d00      	cmp	r5, #0
 800673a:	d0f0      	beq.n	800671e <__strtok_r+0x36>
 800673c:	2300      	movs	r3, #0
 800673e:	3c01      	subs	r4, #1
 8006740:	7023      	strb	r3, [r4, #0]
 8006742:	6017      	str	r7, [r2, #0]
 8006744:	e7ea      	b.n	800671c <__strtok_r+0x34>
	...

08006748 <_close_r>:
 8006748:	2300      	movs	r3, #0
 800674a:	b570      	push	{r4, r5, r6, lr}
 800674c:	4d06      	ldr	r5, [pc, #24]	; (8006768 <_close_r+0x20>)
 800674e:	0004      	movs	r4, r0
 8006750:	0008      	movs	r0, r1
 8006752:	602b      	str	r3, [r5, #0]
 8006754:	f7fa fbef 	bl	8000f36 <_close>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d103      	bne.n	8006764 <_close_r+0x1c>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d000      	beq.n	8006764 <_close_r+0x1c>
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	200005c8 	.word	0x200005c8

0800676c <_lseek_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	0004      	movs	r4, r0
 8006770:	0008      	movs	r0, r1
 8006772:	0011      	movs	r1, r2
 8006774:	001a      	movs	r2, r3
 8006776:	2300      	movs	r3, #0
 8006778:	4d05      	ldr	r5, [pc, #20]	; (8006790 <_lseek_r+0x24>)
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa fbfc 	bl	8000f78 <_lseek>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d103      	bne.n	800678c <_lseek_r+0x20>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d000      	beq.n	800678c <_lseek_r+0x20>
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	200005c8 	.word	0x200005c8

08006794 <_read_r>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	0004      	movs	r4, r0
 8006798:	0008      	movs	r0, r1
 800679a:	0011      	movs	r1, r2
 800679c:	001a      	movs	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	4d05      	ldr	r5, [pc, #20]	; (80067b8 <_read_r+0x24>)
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fa fb8e 	bl	8000ec4 <_read>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d103      	bne.n	80067b4 <_read_r+0x20>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d000      	beq.n	80067b4 <_read_r+0x20>
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	200005c8 	.word	0x200005c8

080067bc <_sbrk_r>:
 80067bc:	2300      	movs	r3, #0
 80067be:	b570      	push	{r4, r5, r6, lr}
 80067c0:	4d06      	ldr	r5, [pc, #24]	; (80067dc <_sbrk_r+0x20>)
 80067c2:	0004      	movs	r4, r0
 80067c4:	0008      	movs	r0, r1
 80067c6:	602b      	str	r3, [r5, #0]
 80067c8:	f7fa fbe2 	bl	8000f90 <_sbrk>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d103      	bne.n	80067d8 <_sbrk_r+0x1c>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d000      	beq.n	80067d8 <_sbrk_r+0x1c>
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	200005c8 	.word	0x200005c8

080067e0 <_write_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	0004      	movs	r4, r0
 80067e4:	0008      	movs	r0, r1
 80067e6:	0011      	movs	r1, r2
 80067e8:	001a      	movs	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	4d05      	ldr	r5, [pc, #20]	; (8006804 <_write_r+0x24>)
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	f7fa fb85 	bl	8000efe <_write>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d103      	bne.n	8006800 <_write_r+0x20>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d000      	beq.n	8006800 <_write_r+0x20>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	200005c8 	.word	0x200005c8

08006808 <__errno>:
 8006808:	4b01      	ldr	r3, [pc, #4]	; (8006810 <__errno+0x8>)
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	4770      	bx	lr
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	20000064 	.word	0x20000064

08006814 <__libc_init_array>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	2600      	movs	r6, #0
 8006818:	4c0c      	ldr	r4, [pc, #48]	; (800684c <__libc_init_array+0x38>)
 800681a:	4d0d      	ldr	r5, [pc, #52]	; (8006850 <__libc_init_array+0x3c>)
 800681c:	1b64      	subs	r4, r4, r5
 800681e:	10a4      	asrs	r4, r4, #2
 8006820:	42a6      	cmp	r6, r4
 8006822:	d109      	bne.n	8006838 <__libc_init_array+0x24>
 8006824:	2600      	movs	r6, #0
 8006826:	f000 fd9b 	bl	8007360 <_init>
 800682a:	4c0a      	ldr	r4, [pc, #40]	; (8006854 <__libc_init_array+0x40>)
 800682c:	4d0a      	ldr	r5, [pc, #40]	; (8006858 <__libc_init_array+0x44>)
 800682e:	1b64      	subs	r4, r4, r5
 8006830:	10a4      	asrs	r4, r4, #2
 8006832:	42a6      	cmp	r6, r4
 8006834:	d105      	bne.n	8006842 <__libc_init_array+0x2e>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	00b3      	lsls	r3, r6, #2
 800683a:	58eb      	ldr	r3, [r5, r3]
 800683c:	4798      	blx	r3
 800683e:	3601      	adds	r6, #1
 8006840:	e7ee      	b.n	8006820 <__libc_init_array+0xc>
 8006842:	00b3      	lsls	r3, r6, #2
 8006844:	58eb      	ldr	r3, [r5, r3]
 8006846:	4798      	blx	r3
 8006848:	3601      	adds	r6, #1
 800684a:	e7f2      	b.n	8006832 <__libc_init_array+0x1e>
 800684c:	080076d4 	.word	0x080076d4
 8006850:	080076d4 	.word	0x080076d4
 8006854:	080076d8 	.word	0x080076d8
 8006858:	080076d4 	.word	0x080076d4

0800685c <__retarget_lock_init_recursive>:
 800685c:	4770      	bx	lr

0800685e <__retarget_lock_acquire_recursive>:
 800685e:	4770      	bx	lr

08006860 <__retarget_lock_release_recursive>:
 8006860:	4770      	bx	lr
	...

08006864 <__assert_func>:
 8006864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006866:	0014      	movs	r4, r2
 8006868:	001a      	movs	r2, r3
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <__assert_func+0x2c>)
 800686c:	0005      	movs	r5, r0
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	000e      	movs	r6, r1
 8006872:	68d8      	ldr	r0, [r3, #12]
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <__assert_func+0x30>)
 8006876:	2c00      	cmp	r4, #0
 8006878:	d101      	bne.n	800687e <__assert_func+0x1a>
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <__assert_func+0x34>)
 800687c:	001c      	movs	r4, r3
 800687e:	4907      	ldr	r1, [pc, #28]	; (800689c <__assert_func+0x38>)
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	9402      	str	r4, [sp, #8]
 8006884:	002b      	movs	r3, r5
 8006886:	9600      	str	r6, [sp, #0]
 8006888:	f000 f90a 	bl	8006aa0 <fiprintf>
 800688c:	f000 f918 	bl	8006ac0 <abort>
 8006890:	20000064 	.word	0x20000064
 8006894:	08007662 	.word	0x08007662
 8006898:	0800769d 	.word	0x0800769d
 800689c:	0800766f 	.word	0x0800766f

080068a0 <_free_r>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	0005      	movs	r5, r0
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d010      	beq.n	80068ca <_free_r+0x2a>
 80068a8:	1f0c      	subs	r4, r1, #4
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	da00      	bge.n	80068b2 <_free_r+0x12>
 80068b0:	18e4      	adds	r4, r4, r3
 80068b2:	0028      	movs	r0, r5
 80068b4:	f7ff fd2a 	bl	800630c <__malloc_lock>
 80068b8:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <_free_r+0x90>)
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <_free_r+0x2c>
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	6014      	str	r4, [r2, #0]
 80068c4:	0028      	movs	r0, r5
 80068c6:	f7ff fd29 	bl	800631c <__malloc_unlock>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x42>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1821      	adds	r1, r4, r0
 80068d4:	428b      	cmp	r3, r1
 80068d6:	d1f3      	bne.n	80068c0 <_free_r+0x20>
 80068d8:	6819      	ldr	r1, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	1809      	adds	r1, r1, r0
 80068de:	6021      	str	r1, [r4, #0]
 80068e0:	e7ee      	b.n	80068c0 <_free_r+0x20>
 80068e2:	001a      	movs	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <_free_r+0x4e>
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	d9f9      	bls.n	80068e2 <_free_r+0x42>
 80068ee:	6811      	ldr	r1, [r2, #0]
 80068f0:	1850      	adds	r0, r2, r1
 80068f2:	42a0      	cmp	r0, r4
 80068f4:	d10b      	bne.n	800690e <_free_r+0x6e>
 80068f6:	6820      	ldr	r0, [r4, #0]
 80068f8:	1809      	adds	r1, r1, r0
 80068fa:	1850      	adds	r0, r2, r1
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	4283      	cmp	r3, r0
 8006900:	d1e0      	bne.n	80068c4 <_free_r+0x24>
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	1841      	adds	r1, r0, r1
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	6053      	str	r3, [r2, #4]
 800690c:	e7da      	b.n	80068c4 <_free_r+0x24>
 800690e:	42a0      	cmp	r0, r4
 8006910:	d902      	bls.n	8006918 <_free_r+0x78>
 8006912:	230c      	movs	r3, #12
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	e7d5      	b.n	80068c4 <_free_r+0x24>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	1821      	adds	r1, r4, r0
 800691c:	428b      	cmp	r3, r1
 800691e:	d103      	bne.n	8006928 <_free_r+0x88>
 8006920:	6819      	ldr	r1, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	1809      	adds	r1, r1, r0
 8006926:	6021      	str	r1, [r4, #0]
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	6054      	str	r4, [r2, #4]
 800692c:	e7ca      	b.n	80068c4 <_free_r+0x24>
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	20000484 	.word	0x20000484

08006934 <__sflush_r>:
 8006934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006936:	898b      	ldrh	r3, [r1, #12]
 8006938:	0005      	movs	r5, r0
 800693a:	000c      	movs	r4, r1
 800693c:	071a      	lsls	r2, r3, #28
 800693e:	d45c      	bmi.n	80069fa <__sflush_r+0xc6>
 8006940:	684a      	ldr	r2, [r1, #4]
 8006942:	2a00      	cmp	r2, #0
 8006944:	dc04      	bgt.n	8006950 <__sflush_r+0x1c>
 8006946:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006948:	2a00      	cmp	r2, #0
 800694a:	dc01      	bgt.n	8006950 <__sflush_r+0x1c>
 800694c:	2000      	movs	r0, #0
 800694e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006950:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006952:	2f00      	cmp	r7, #0
 8006954:	d0fa      	beq.n	800694c <__sflush_r+0x18>
 8006956:	2200      	movs	r2, #0
 8006958:	2080      	movs	r0, #128	; 0x80
 800695a:	682e      	ldr	r6, [r5, #0]
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	001a      	movs	r2, r3
 8006960:	0140      	lsls	r0, r0, #5
 8006962:	6a21      	ldr	r1, [r4, #32]
 8006964:	4002      	ands	r2, r0
 8006966:	4203      	tst	r3, r0
 8006968:	d034      	beq.n	80069d4 <__sflush_r+0xa0>
 800696a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	075b      	lsls	r3, r3, #29
 8006970:	d506      	bpl.n	8006980 <__sflush_r+0x4c>
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	1ac0      	subs	r0, r0, r3
 8006976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <__sflush_r+0x4c>
 800697c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800697e:	1ac0      	subs	r0, r0, r3
 8006980:	0002      	movs	r2, r0
 8006982:	2300      	movs	r3, #0
 8006984:	0028      	movs	r0, r5
 8006986:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006988:	6a21      	ldr	r1, [r4, #32]
 800698a:	47b8      	blx	r7
 800698c:	89a2      	ldrh	r2, [r4, #12]
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	d106      	bne.n	80069a0 <__sflush_r+0x6c>
 8006992:	6829      	ldr	r1, [r5, #0]
 8006994:	291d      	cmp	r1, #29
 8006996:	d82c      	bhi.n	80069f2 <__sflush_r+0xbe>
 8006998:	4b2a      	ldr	r3, [pc, #168]	; (8006a44 <__sflush_r+0x110>)
 800699a:	410b      	asrs	r3, r1
 800699c:	07db      	lsls	r3, r3, #31
 800699e:	d428      	bmi.n	80069f2 <__sflush_r+0xbe>
 80069a0:	2300      	movs	r3, #0
 80069a2:	6063      	str	r3, [r4, #4]
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	04d2      	lsls	r2, r2, #19
 80069aa:	d505      	bpl.n	80069b8 <__sflush_r+0x84>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <__sflush_r+0x82>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d100      	bne.n	80069b8 <__sflush_r+0x84>
 80069b6:	6560      	str	r0, [r4, #84]	; 0x54
 80069b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ba:	602e      	str	r6, [r5, #0]
 80069bc:	2900      	cmp	r1, #0
 80069be:	d0c5      	beq.n	800694c <__sflush_r+0x18>
 80069c0:	0023      	movs	r3, r4
 80069c2:	3344      	adds	r3, #68	; 0x44
 80069c4:	4299      	cmp	r1, r3
 80069c6:	d002      	beq.n	80069ce <__sflush_r+0x9a>
 80069c8:	0028      	movs	r0, r5
 80069ca:	f7ff ff69 	bl	80068a0 <_free_r>
 80069ce:	2000      	movs	r0, #0
 80069d0:	6360      	str	r0, [r4, #52]	; 0x34
 80069d2:	e7bc      	b.n	800694e <__sflush_r+0x1a>
 80069d4:	2301      	movs	r3, #1
 80069d6:	0028      	movs	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	d1c6      	bne.n	800696c <__sflush_r+0x38>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0c3      	beq.n	800696c <__sflush_r+0x38>
 80069e4:	2b1d      	cmp	r3, #29
 80069e6:	d001      	beq.n	80069ec <__sflush_r+0xb8>
 80069e8:	2b16      	cmp	r3, #22
 80069ea:	d101      	bne.n	80069f0 <__sflush_r+0xbc>
 80069ec:	602e      	str	r6, [r5, #0]
 80069ee:	e7ad      	b.n	800694c <__sflush_r+0x18>
 80069f0:	89a2      	ldrh	r2, [r4, #12]
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	4313      	orrs	r3, r2
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	e7a9      	b.n	800694e <__sflush_r+0x1a>
 80069fa:	690e      	ldr	r6, [r1, #16]
 80069fc:	2e00      	cmp	r6, #0
 80069fe:	d0a5      	beq.n	800694c <__sflush_r+0x18>
 8006a00:	680f      	ldr	r7, [r1, #0]
 8006a02:	600e      	str	r6, [r1, #0]
 8006a04:	1bba      	subs	r2, r7, r6
 8006a06:	9201      	str	r2, [sp, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	079b      	lsls	r3, r3, #30
 8006a0c:	d100      	bne.n	8006a10 <__sflush_r+0xdc>
 8006a0e:	694a      	ldr	r2, [r1, #20]
 8006a10:	60a2      	str	r2, [r4, #8]
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd99      	ble.n	800694c <__sflush_r+0x18>
 8006a18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a1a:	0032      	movs	r2, r6
 8006a1c:	001f      	movs	r7, r3
 8006a1e:	0028      	movs	r0, r5
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	6a21      	ldr	r1, [r4, #32]
 8006a24:	47b8      	blx	r7
 8006a26:	2800      	cmp	r0, #0
 8006a28:	dc06      	bgt.n	8006a38 <__sflush_r+0x104>
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	89a2      	ldrh	r2, [r4, #12]
 8006a30:	4240      	negs	r0, r0
 8006a32:	4313      	orrs	r3, r2
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	e78a      	b.n	800694e <__sflush_r+0x1a>
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	1836      	adds	r6, r6, r0
 8006a3c:	1a1b      	subs	r3, r3, r0
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	e7e7      	b.n	8006a12 <__sflush_r+0xde>
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	dfbffffe 	.word	0xdfbffffe

08006a48 <_fflush_r>:
 8006a48:	690b      	ldr	r3, [r1, #16]
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	0005      	movs	r5, r0
 8006a4e:	000c      	movs	r4, r1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <_fflush_r+0x12>
 8006a54:	2500      	movs	r5, #0
 8006a56:	0028      	movs	r0, r5
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d004      	beq.n	8006a68 <_fflush_r+0x20>
 8006a5e:	6a03      	ldr	r3, [r0, #32]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <_fflush_r+0x20>
 8006a64:	f7ff fd84 	bl	8006570 <__sinit>
 8006a68:	220c      	movs	r2, #12
 8006a6a:	5ea3      	ldrsh	r3, [r4, r2]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f1      	beq.n	8006a54 <_fflush_r+0xc>
 8006a70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a72:	07d2      	lsls	r2, r2, #31
 8006a74:	d404      	bmi.n	8006a80 <_fflush_r+0x38>
 8006a76:	059b      	lsls	r3, r3, #22
 8006a78:	d402      	bmi.n	8006a80 <_fflush_r+0x38>
 8006a7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7c:	f7ff feef 	bl	800685e <__retarget_lock_acquire_recursive>
 8006a80:	0028      	movs	r0, r5
 8006a82:	0021      	movs	r1, r4
 8006a84:	f7ff ff56 	bl	8006934 <__sflush_r>
 8006a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a8a:	0005      	movs	r5, r0
 8006a8c:	07db      	lsls	r3, r3, #31
 8006a8e:	d4e2      	bmi.n	8006a56 <_fflush_r+0xe>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	059b      	lsls	r3, r3, #22
 8006a94:	d4df      	bmi.n	8006a56 <_fflush_r+0xe>
 8006a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a98:	f7ff fee2 	bl	8006860 <__retarget_lock_release_recursive>
 8006a9c:	e7db      	b.n	8006a56 <_fflush_r+0xe>
	...

08006aa0 <fiprintf>:
 8006aa0:	b40e      	push	{r1, r2, r3}
 8006aa2:	b517      	push	{r0, r1, r2, r4, lr}
 8006aa4:	4c05      	ldr	r4, [pc, #20]	; (8006abc <fiprintf+0x1c>)
 8006aa6:	ab05      	add	r3, sp, #20
 8006aa8:	cb04      	ldmia	r3!, {r2}
 8006aaa:	0001      	movs	r1, r0
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f000 f834 	bl	8006b1c <_vfiprintf_r>
 8006ab4:	bc1e      	pop	{r1, r2, r3, r4}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	b003      	add	sp, #12
 8006aba:	4718      	bx	r3
 8006abc:	20000064 	.word	0x20000064

08006ac0 <abort>:
 8006ac0:	2006      	movs	r0, #6
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	f000 fb96 	bl	80071f4 <raise>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fa f9ef 	bl	8000eac <_exit>

08006ace <__sfputc_r>:
 8006ace:	6893      	ldr	r3, [r2, #8]
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	6093      	str	r3, [r2, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da04      	bge.n	8006ae4 <__sfputc_r+0x16>
 8006ada:	6994      	ldr	r4, [r2, #24]
 8006adc:	42a3      	cmp	r3, r4
 8006ade:	db07      	blt.n	8006af0 <__sfputc_r+0x22>
 8006ae0:	290a      	cmp	r1, #10
 8006ae2:	d005      	beq.n	8006af0 <__sfputc_r+0x22>
 8006ae4:	6813      	ldr	r3, [r2, #0]
 8006ae6:	1c58      	adds	r0, r3, #1
 8006ae8:	6010      	str	r0, [r2, #0]
 8006aea:	7019      	strb	r1, [r3, #0]
 8006aec:	0008      	movs	r0, r1
 8006aee:	bd10      	pop	{r4, pc}
 8006af0:	f000 fab0 	bl	8007054 <__swbuf_r>
 8006af4:	0001      	movs	r1, r0
 8006af6:	e7f9      	b.n	8006aec <__sfputc_r+0x1e>

08006af8 <__sfputs_r>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	0006      	movs	r6, r0
 8006afc:	000f      	movs	r7, r1
 8006afe:	0014      	movs	r4, r2
 8006b00:	18d5      	adds	r5, r2, r3
 8006b02:	42ac      	cmp	r4, r5
 8006b04:	d101      	bne.n	8006b0a <__sfputs_r+0x12>
 8006b06:	2000      	movs	r0, #0
 8006b08:	e007      	b.n	8006b1a <__sfputs_r+0x22>
 8006b0a:	7821      	ldrb	r1, [r4, #0]
 8006b0c:	003a      	movs	r2, r7
 8006b0e:	0030      	movs	r0, r6
 8006b10:	f7ff ffdd 	bl	8006ace <__sfputc_r>
 8006b14:	3401      	adds	r4, #1
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d1f3      	bne.n	8006b02 <__sfputs_r+0xa>
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b1c <_vfiprintf_r>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b0a1      	sub	sp, #132	; 0x84
 8006b20:	000f      	movs	r7, r1
 8006b22:	0015      	movs	r5, r2
 8006b24:	001e      	movs	r6, r3
 8006b26:	9003      	str	r0, [sp, #12]
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d004      	beq.n	8006b36 <_vfiprintf_r+0x1a>
 8006b2c:	6a03      	ldr	r3, [r0, #32]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <_vfiprintf_r+0x1a>
 8006b32:	f7ff fd1d 	bl	8006570 <__sinit>
 8006b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b38:	07db      	lsls	r3, r3, #31
 8006b3a:	d405      	bmi.n	8006b48 <_vfiprintf_r+0x2c>
 8006b3c:	89bb      	ldrh	r3, [r7, #12]
 8006b3e:	059b      	lsls	r3, r3, #22
 8006b40:	d402      	bmi.n	8006b48 <_vfiprintf_r+0x2c>
 8006b42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006b44:	f7ff fe8b 	bl	800685e <__retarget_lock_acquire_recursive>
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	d502      	bpl.n	8006b54 <_vfiprintf_r+0x38>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d113      	bne.n	8006b7c <_vfiprintf_r+0x60>
 8006b54:	0039      	movs	r1, r7
 8006b56:	9803      	ldr	r0, [sp, #12]
 8006b58:	f000 fabe 	bl	80070d8 <__swsetup_r>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d00d      	beq.n	8006b7c <_vfiprintf_r+0x60>
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d503      	bpl.n	8006b6e <_vfiprintf_r+0x52>
 8006b66:	2001      	movs	r0, #1
 8006b68:	4240      	negs	r0, r0
 8006b6a:	b021      	add	sp, #132	; 0x84
 8006b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6e:	89bb      	ldrh	r3, [r7, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d4f8      	bmi.n	8006b66 <_vfiprintf_r+0x4a>
 8006b74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006b76:	f7ff fe73 	bl	8006860 <__retarget_lock_release_recursive>
 8006b7a:	e7f4      	b.n	8006b66 <_vfiprintf_r+0x4a>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	ac08      	add	r4, sp, #32
 8006b80:	6163      	str	r3, [r4, #20]
 8006b82:	3320      	adds	r3, #32
 8006b84:	7663      	strb	r3, [r4, #25]
 8006b86:	3310      	adds	r3, #16
 8006b88:	76a3      	strb	r3, [r4, #26]
 8006b8a:	9607      	str	r6, [sp, #28]
 8006b8c:	002e      	movs	r6, r5
 8006b8e:	7833      	ldrb	r3, [r6, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <_vfiprintf_r+0x7c>
 8006b94:	2b25      	cmp	r3, #37	; 0x25
 8006b96:	d148      	bne.n	8006c2a <_vfiprintf_r+0x10e>
 8006b98:	1b73      	subs	r3, r6, r5
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	42ae      	cmp	r6, r5
 8006b9e:	d00b      	beq.n	8006bb8 <_vfiprintf_r+0x9c>
 8006ba0:	002a      	movs	r2, r5
 8006ba2:	0039      	movs	r1, r7
 8006ba4:	9803      	ldr	r0, [sp, #12]
 8006ba6:	f7ff ffa7 	bl	8006af8 <__sfputs_r>
 8006baa:	3001      	adds	r0, #1
 8006bac:	d100      	bne.n	8006bb0 <_vfiprintf_r+0x94>
 8006bae:	e0af      	b.n	8006d10 <_vfiprintf_r+0x1f4>
 8006bb0:	6963      	ldr	r3, [r4, #20]
 8006bb2:	9a05      	ldr	r2, [sp, #20]
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	6163      	str	r3, [r4, #20]
 8006bb8:	7833      	ldrb	r3, [r6, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d100      	bne.n	8006bc0 <_vfiprintf_r+0xa4>
 8006bbe:	e0a7      	b.n	8006d10 <_vfiprintf_r+0x1f4>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4252      	negs	r2, r2
 8006bc6:	6062      	str	r2, [r4, #4]
 8006bc8:	a904      	add	r1, sp, #16
 8006bca:	3254      	adds	r2, #84	; 0x54
 8006bcc:	1852      	adds	r2, r2, r1
 8006bce:	1c75      	adds	r5, r6, #1
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	60e3      	str	r3, [r4, #12]
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	7013      	strb	r3, [r2, #0]
 8006bd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bda:	4b59      	ldr	r3, [pc, #356]	; (8006d40 <_vfiprintf_r+0x224>)
 8006bdc:	2205      	movs	r2, #5
 8006bde:	0018      	movs	r0, r3
 8006be0:	7829      	ldrb	r1, [r5, #0]
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	f000 fb26 	bl	8007234 <memchr>
 8006be8:	1c6e      	adds	r6, r5, #1
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d11f      	bne.n	8006c2e <_vfiprintf_r+0x112>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	06d3      	lsls	r3, r2, #27
 8006bf2:	d504      	bpl.n	8006bfe <_vfiprintf_r+0xe2>
 8006bf4:	2353      	movs	r3, #83	; 0x53
 8006bf6:	a904      	add	r1, sp, #16
 8006bf8:	185b      	adds	r3, r3, r1
 8006bfa:	2120      	movs	r1, #32
 8006bfc:	7019      	strb	r1, [r3, #0]
 8006bfe:	0713      	lsls	r3, r2, #28
 8006c00:	d504      	bpl.n	8006c0c <_vfiprintf_r+0xf0>
 8006c02:	2353      	movs	r3, #83	; 0x53
 8006c04:	a904      	add	r1, sp, #16
 8006c06:	185b      	adds	r3, r3, r1
 8006c08:	212b      	movs	r1, #43	; 0x2b
 8006c0a:	7019      	strb	r1, [r3, #0]
 8006c0c:	782b      	ldrb	r3, [r5, #0]
 8006c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c10:	d016      	beq.n	8006c40 <_vfiprintf_r+0x124>
 8006c12:	002e      	movs	r6, r5
 8006c14:	2100      	movs	r1, #0
 8006c16:	200a      	movs	r0, #10
 8006c18:	68e3      	ldr	r3, [r4, #12]
 8006c1a:	7832      	ldrb	r2, [r6, #0]
 8006c1c:	1c75      	adds	r5, r6, #1
 8006c1e:	3a30      	subs	r2, #48	; 0x30
 8006c20:	2a09      	cmp	r2, #9
 8006c22:	d94e      	bls.n	8006cc2 <_vfiprintf_r+0x1a6>
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d111      	bne.n	8006c4c <_vfiprintf_r+0x130>
 8006c28:	e017      	b.n	8006c5a <_vfiprintf_r+0x13e>
 8006c2a:	3601      	adds	r6, #1
 8006c2c:	e7af      	b.n	8006b8e <_vfiprintf_r+0x72>
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1ac0      	subs	r0, r0, r3
 8006c34:	2301      	movs	r3, #1
 8006c36:	4083      	lsls	r3, r0
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	0035      	movs	r5, r6
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	e7cc      	b.n	8006bda <_vfiprintf_r+0xbe>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	1d19      	adds	r1, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	9107      	str	r1, [sp, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	db01      	blt.n	8006c50 <_vfiprintf_r+0x134>
 8006c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4e:	e004      	b.n	8006c5a <_vfiprintf_r+0x13e>
 8006c50:	425b      	negs	r3, r3
 8006c52:	60e3      	str	r3, [r4, #12]
 8006c54:	2302      	movs	r3, #2
 8006c56:	4313      	orrs	r3, r2
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	7833      	ldrb	r3, [r6, #0]
 8006c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c5e:	d10a      	bne.n	8006c76 <_vfiprintf_r+0x15a>
 8006c60:	7873      	ldrb	r3, [r6, #1]
 8006c62:	2b2a      	cmp	r3, #42	; 0x2a
 8006c64:	d135      	bne.n	8006cd2 <_vfiprintf_r+0x1b6>
 8006c66:	9b07      	ldr	r3, [sp, #28]
 8006c68:	3602      	adds	r6, #2
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	9207      	str	r2, [sp, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db2b      	blt.n	8006ccc <_vfiprintf_r+0x1b0>
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	4d33      	ldr	r5, [pc, #204]	; (8006d44 <_vfiprintf_r+0x228>)
 8006c78:	2203      	movs	r2, #3
 8006c7a:	0028      	movs	r0, r5
 8006c7c:	7831      	ldrb	r1, [r6, #0]
 8006c7e:	f000 fad9 	bl	8007234 <memchr>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d006      	beq.n	8006c94 <_vfiprintf_r+0x178>
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	1b40      	subs	r0, r0, r5
 8006c8a:	4083      	lsls	r3, r0
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	3601      	adds	r6, #1
 8006c90:	4313      	orrs	r3, r2
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	7831      	ldrb	r1, [r6, #0]
 8006c96:	2206      	movs	r2, #6
 8006c98:	482b      	ldr	r0, [pc, #172]	; (8006d48 <_vfiprintf_r+0x22c>)
 8006c9a:	1c75      	adds	r5, r6, #1
 8006c9c:	7621      	strb	r1, [r4, #24]
 8006c9e:	f000 fac9 	bl	8007234 <memchr>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d043      	beq.n	8006d2e <_vfiprintf_r+0x212>
 8006ca6:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <_vfiprintf_r+0x230>)
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d125      	bne.n	8006cf8 <_vfiprintf_r+0x1dc>
 8006cac:	2207      	movs	r2, #7
 8006cae:	9b07      	ldr	r3, [sp, #28]
 8006cb0:	3307      	adds	r3, #7
 8006cb2:	4393      	bics	r3, r2
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	6963      	ldr	r3, [r4, #20]
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	189b      	adds	r3, r3, r2
 8006cbe:	6163      	str	r3, [r4, #20]
 8006cc0:	e764      	b.n	8006b8c <_vfiprintf_r+0x70>
 8006cc2:	4343      	muls	r3, r0
 8006cc4:	002e      	movs	r6, r5
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	189b      	adds	r3, r3, r2
 8006cca:	e7a6      	b.n	8006c1a <_vfiprintf_r+0xfe>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	425b      	negs	r3, r3
 8006cd0:	e7d0      	b.n	8006c74 <_vfiprintf_r+0x158>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	200a      	movs	r0, #10
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	6063      	str	r3, [r4, #4]
 8006cdc:	7831      	ldrb	r1, [r6, #0]
 8006cde:	1c75      	adds	r5, r6, #1
 8006ce0:	3930      	subs	r1, #48	; 0x30
 8006ce2:	2909      	cmp	r1, #9
 8006ce4:	d903      	bls.n	8006cee <_vfiprintf_r+0x1d2>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0c5      	beq.n	8006c76 <_vfiprintf_r+0x15a>
 8006cea:	9209      	str	r2, [sp, #36]	; 0x24
 8006cec:	e7c3      	b.n	8006c76 <_vfiprintf_r+0x15a>
 8006cee:	4342      	muls	r2, r0
 8006cf0:	002e      	movs	r6, r5
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	1852      	adds	r2, r2, r1
 8006cf6:	e7f1      	b.n	8006cdc <_vfiprintf_r+0x1c0>
 8006cf8:	aa07      	add	r2, sp, #28
 8006cfa:	9200      	str	r2, [sp, #0]
 8006cfc:	0021      	movs	r1, r4
 8006cfe:	003a      	movs	r2, r7
 8006d00:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <_vfiprintf_r+0x234>)
 8006d02:	9803      	ldr	r0, [sp, #12]
 8006d04:	e000      	b.n	8006d08 <_vfiprintf_r+0x1ec>
 8006d06:	bf00      	nop
 8006d08:	9004      	str	r0, [sp, #16]
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	d1d3      	bne.n	8006cb8 <_vfiprintf_r+0x19c>
 8006d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d12:	07db      	lsls	r3, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x206>
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	059b      	lsls	r3, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x206>
 8006d1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006d1e:	f7ff fd9f 	bl	8006860 <__retarget_lock_release_recursive>
 8006d22:	89bb      	ldrh	r3, [r7, #12]
 8006d24:	065b      	lsls	r3, r3, #25
 8006d26:	d500      	bpl.n	8006d2a <_vfiprintf_r+0x20e>
 8006d28:	e71d      	b.n	8006b66 <_vfiprintf_r+0x4a>
 8006d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d2c:	e71d      	b.n	8006b6a <_vfiprintf_r+0x4e>
 8006d2e:	aa07      	add	r2, sp, #28
 8006d30:	9200      	str	r2, [sp, #0]
 8006d32:	0021      	movs	r1, r4
 8006d34:	003a      	movs	r2, r7
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <_vfiprintf_r+0x234>)
 8006d38:	9803      	ldr	r0, [sp, #12]
 8006d3a:	f000 f87b 	bl	8006e34 <_printf_i>
 8006d3e:	e7e3      	b.n	8006d08 <_vfiprintf_r+0x1ec>
 8006d40:	0800769e 	.word	0x0800769e
 8006d44:	080076a4 	.word	0x080076a4
 8006d48:	080076a8 	.word	0x080076a8
 8006d4c:	00000000 	.word	0x00000000
 8006d50:	08006af9 	.word	0x08006af9

08006d54 <_printf_common>:
 8006d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d56:	0016      	movs	r6, r2
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	688a      	ldr	r2, [r1, #8]
 8006d5c:	690b      	ldr	r3, [r1, #16]
 8006d5e:	000c      	movs	r4, r1
 8006d60:	9000      	str	r0, [sp, #0]
 8006d62:	4293      	cmp	r3, r2
 8006d64:	da00      	bge.n	8006d68 <_printf_common+0x14>
 8006d66:	0013      	movs	r3, r2
 8006d68:	0022      	movs	r2, r4
 8006d6a:	6033      	str	r3, [r6, #0]
 8006d6c:	3243      	adds	r2, #67	; 0x43
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d001      	beq.n	8006d78 <_printf_common+0x24>
 8006d74:	3301      	adds	r3, #1
 8006d76:	6033      	str	r3, [r6, #0]
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	069b      	lsls	r3, r3, #26
 8006d7c:	d502      	bpl.n	8006d84 <_printf_common+0x30>
 8006d7e:	6833      	ldr	r3, [r6, #0]
 8006d80:	3302      	adds	r3, #2
 8006d82:	6033      	str	r3, [r6, #0]
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	2306      	movs	r3, #6
 8006d88:	0015      	movs	r5, r2
 8006d8a:	401d      	ands	r5, r3
 8006d8c:	421a      	tst	r2, r3
 8006d8e:	d027      	beq.n	8006de0 <_printf_common+0x8c>
 8006d90:	0023      	movs	r3, r4
 8006d92:	3343      	adds	r3, #67	; 0x43
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	4193      	sbcs	r3, r2
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	0692      	lsls	r2, r2, #26
 8006d9e:	d430      	bmi.n	8006e02 <_printf_common+0xae>
 8006da0:	0022      	movs	r2, r4
 8006da2:	9901      	ldr	r1, [sp, #4]
 8006da4:	9800      	ldr	r0, [sp, #0]
 8006da6:	9d08      	ldr	r5, [sp, #32]
 8006da8:	3243      	adds	r2, #67	; 0x43
 8006daa:	47a8      	blx	r5
 8006dac:	3001      	adds	r0, #1
 8006dae:	d025      	beq.n	8006dfc <_printf_common+0xa8>
 8006db0:	2206      	movs	r2, #6
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	2500      	movs	r5, #0
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d105      	bne.n	8006dc8 <_printf_common+0x74>
 8006dbc:	6833      	ldr	r3, [r6, #0]
 8006dbe:	68e5      	ldr	r5, [r4, #12]
 8006dc0:	1aed      	subs	r5, r5, r3
 8006dc2:	43eb      	mvns	r3, r5
 8006dc4:	17db      	asrs	r3, r3, #31
 8006dc6:	401d      	ands	r5, r3
 8006dc8:	68a3      	ldr	r3, [r4, #8]
 8006dca:	6922      	ldr	r2, [r4, #16]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	dd01      	ble.n	8006dd4 <_printf_common+0x80>
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	18ed      	adds	r5, r5, r3
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42b5      	cmp	r5, r6
 8006dd8:	d120      	bne.n	8006e1c <_printf_common+0xc8>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e010      	b.n	8006e00 <_printf_common+0xac>
 8006dde:	3501      	adds	r5, #1
 8006de0:	68e3      	ldr	r3, [r4, #12]
 8006de2:	6832      	ldr	r2, [r6, #0]
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	42ab      	cmp	r3, r5
 8006de8:	ddd2      	ble.n	8006d90 <_printf_common+0x3c>
 8006dea:	0022      	movs	r2, r4
 8006dec:	2301      	movs	r3, #1
 8006dee:	9901      	ldr	r1, [sp, #4]
 8006df0:	9800      	ldr	r0, [sp, #0]
 8006df2:	9f08      	ldr	r7, [sp, #32]
 8006df4:	3219      	adds	r2, #25
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d1f0      	bne.n	8006dde <_printf_common+0x8a>
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	4240      	negs	r0, r0
 8006e00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e02:	2030      	movs	r0, #48	; 0x30
 8006e04:	18e1      	adds	r1, r4, r3
 8006e06:	3143      	adds	r1, #67	; 0x43
 8006e08:	7008      	strb	r0, [r1, #0]
 8006e0a:	0021      	movs	r1, r4
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	3145      	adds	r1, #69	; 0x45
 8006e10:	7809      	ldrb	r1, [r1, #0]
 8006e12:	18a2      	adds	r2, r4, r2
 8006e14:	3243      	adds	r2, #67	; 0x43
 8006e16:	3302      	adds	r3, #2
 8006e18:	7011      	strb	r1, [r2, #0]
 8006e1a:	e7c1      	b.n	8006da0 <_printf_common+0x4c>
 8006e1c:	0022      	movs	r2, r4
 8006e1e:	2301      	movs	r3, #1
 8006e20:	9901      	ldr	r1, [sp, #4]
 8006e22:	9800      	ldr	r0, [sp, #0]
 8006e24:	9f08      	ldr	r7, [sp, #32]
 8006e26:	321a      	adds	r2, #26
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d0e6      	beq.n	8006dfc <_printf_common+0xa8>
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7d1      	b.n	8006dd6 <_printf_common+0x82>
	...

08006e34 <_printf_i>:
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	b08b      	sub	sp, #44	; 0x2c
 8006e38:	9206      	str	r2, [sp, #24]
 8006e3a:	000a      	movs	r2, r1
 8006e3c:	3243      	adds	r2, #67	; 0x43
 8006e3e:	9307      	str	r3, [sp, #28]
 8006e40:	9005      	str	r0, [sp, #20]
 8006e42:	9204      	str	r2, [sp, #16]
 8006e44:	7e0a      	ldrb	r2, [r1, #24]
 8006e46:	000c      	movs	r4, r1
 8006e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e4a:	2a78      	cmp	r2, #120	; 0x78
 8006e4c:	d809      	bhi.n	8006e62 <_printf_i+0x2e>
 8006e4e:	2a62      	cmp	r2, #98	; 0x62
 8006e50:	d80b      	bhi.n	8006e6a <_printf_i+0x36>
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d100      	bne.n	8006e58 <_printf_i+0x24>
 8006e56:	e0be      	b.n	8006fd6 <_printf_i+0x1a2>
 8006e58:	497c      	ldr	r1, [pc, #496]	; (800704c <_printf_i+0x218>)
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	2a58      	cmp	r2, #88	; 0x58
 8006e5e:	d100      	bne.n	8006e62 <_printf_i+0x2e>
 8006e60:	e093      	b.n	8006f8a <_printf_i+0x156>
 8006e62:	0026      	movs	r6, r4
 8006e64:	3642      	adds	r6, #66	; 0x42
 8006e66:	7032      	strb	r2, [r6, #0]
 8006e68:	e022      	b.n	8006eb0 <_printf_i+0x7c>
 8006e6a:	0010      	movs	r0, r2
 8006e6c:	3863      	subs	r0, #99	; 0x63
 8006e6e:	2815      	cmp	r0, #21
 8006e70:	d8f7      	bhi.n	8006e62 <_printf_i+0x2e>
 8006e72:	f7f9 f953 	bl	800011c <__gnu_thumb1_case_shi>
 8006e76:	0016      	.short	0x0016
 8006e78:	fff6001f 	.word	0xfff6001f
 8006e7c:	fff6fff6 	.word	0xfff6fff6
 8006e80:	001ffff6 	.word	0x001ffff6
 8006e84:	fff6fff6 	.word	0xfff6fff6
 8006e88:	fff6fff6 	.word	0xfff6fff6
 8006e8c:	003600a3 	.word	0x003600a3
 8006e90:	fff60083 	.word	0xfff60083
 8006e94:	00b4fff6 	.word	0x00b4fff6
 8006e98:	0036fff6 	.word	0x0036fff6
 8006e9c:	fff6fff6 	.word	0xfff6fff6
 8006ea0:	0087      	.short	0x0087
 8006ea2:	0026      	movs	r6, r4
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	3642      	adds	r6, #66	; 0x42
 8006ea8:	1d11      	adds	r1, r2, #4
 8006eaa:	6019      	str	r1, [r3, #0]
 8006eac:	6813      	ldr	r3, [r2, #0]
 8006eae:	7033      	strb	r3, [r6, #0]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0a2      	b.n	8006ffa <_printf_i+0x1c6>
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	6809      	ldr	r1, [r1, #0]
 8006eb8:	1d02      	adds	r2, r0, #4
 8006eba:	060d      	lsls	r5, r1, #24
 8006ebc:	d50b      	bpl.n	8006ed6 <_printf_i+0xa2>
 8006ebe:	6805      	ldr	r5, [r0, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	da03      	bge.n	8006ece <_printf_i+0x9a>
 8006ec6:	232d      	movs	r3, #45	; 0x2d
 8006ec8:	9a04      	ldr	r2, [sp, #16]
 8006eca:	426d      	negs	r5, r5
 8006ecc:	7013      	strb	r3, [r2, #0]
 8006ece:	4b5f      	ldr	r3, [pc, #380]	; (800704c <_printf_i+0x218>)
 8006ed0:	270a      	movs	r7, #10
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	e01b      	b.n	8006f0e <_printf_i+0xda>
 8006ed6:	6805      	ldr	r5, [r0, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	0649      	lsls	r1, r1, #25
 8006edc:	d5f1      	bpl.n	8006ec2 <_printf_i+0x8e>
 8006ede:	b22d      	sxth	r5, r5
 8006ee0:	e7ef      	b.n	8006ec2 <_printf_i+0x8e>
 8006ee2:	680d      	ldr	r5, [r1, #0]
 8006ee4:	6819      	ldr	r1, [r3, #0]
 8006ee6:	1d08      	adds	r0, r1, #4
 8006ee8:	6018      	str	r0, [r3, #0]
 8006eea:	062e      	lsls	r6, r5, #24
 8006eec:	d501      	bpl.n	8006ef2 <_printf_i+0xbe>
 8006eee:	680d      	ldr	r5, [r1, #0]
 8006ef0:	e003      	b.n	8006efa <_printf_i+0xc6>
 8006ef2:	066d      	lsls	r5, r5, #25
 8006ef4:	d5fb      	bpl.n	8006eee <_printf_i+0xba>
 8006ef6:	680d      	ldr	r5, [r1, #0]
 8006ef8:	b2ad      	uxth	r5, r5
 8006efa:	4b54      	ldr	r3, [pc, #336]	; (800704c <_printf_i+0x218>)
 8006efc:	2708      	movs	r7, #8
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	2a6f      	cmp	r2, #111	; 0x6f
 8006f02:	d000      	beq.n	8006f06 <_printf_i+0xd2>
 8006f04:	3702      	adds	r7, #2
 8006f06:	0023      	movs	r3, r4
 8006f08:	2200      	movs	r2, #0
 8006f0a:	3343      	adds	r3, #67	; 0x43
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db03      	blt.n	8006f1e <_printf_i+0xea>
 8006f16:	2104      	movs	r1, #4
 8006f18:	6822      	ldr	r2, [r4, #0]
 8006f1a:	438a      	bics	r2, r1
 8006f1c:	6022      	str	r2, [r4, #0]
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	d102      	bne.n	8006f28 <_printf_i+0xf4>
 8006f22:	9e04      	ldr	r6, [sp, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <_printf_i+0x10e>
 8006f28:	9e04      	ldr	r6, [sp, #16]
 8006f2a:	0028      	movs	r0, r5
 8006f2c:	0039      	movs	r1, r7
 8006f2e:	f7f9 f985 	bl	800023c <__aeabi_uidivmod>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	3e01      	subs	r6, #1
 8006f36:	5c5b      	ldrb	r3, [r3, r1]
 8006f38:	7033      	strb	r3, [r6, #0]
 8006f3a:	002b      	movs	r3, r5
 8006f3c:	0005      	movs	r5, r0
 8006f3e:	429f      	cmp	r7, r3
 8006f40:	d9f3      	bls.n	8006f2a <_printf_i+0xf6>
 8006f42:	2f08      	cmp	r7, #8
 8006f44:	d109      	bne.n	8006f5a <_printf_i+0x126>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	07db      	lsls	r3, r3, #31
 8006f4a:	d506      	bpl.n	8006f5a <_printf_i+0x126>
 8006f4c:	6862      	ldr	r2, [r4, #4]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	dc02      	bgt.n	8006f5a <_printf_i+0x126>
 8006f54:	2330      	movs	r3, #48	; 0x30
 8006f56:	3e01      	subs	r6, #1
 8006f58:	7033      	strb	r3, [r6, #0]
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	1b9b      	subs	r3, r3, r6
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	9b07      	ldr	r3, [sp, #28]
 8006f62:	0021      	movs	r1, r4
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	9805      	ldr	r0, [sp, #20]
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	aa09      	add	r2, sp, #36	; 0x24
 8006f6c:	f7ff fef2 	bl	8006d54 <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d147      	bne.n	8007004 <_printf_i+0x1d0>
 8006f74:	2001      	movs	r0, #1
 8006f76:	4240      	negs	r0, r0
 8006f78:	b00b      	add	sp, #44	; 0x2c
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	6809      	ldr	r1, [r1, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	6022      	str	r2, [r4, #0]
 8006f84:	2278      	movs	r2, #120	; 0x78
 8006f86:	4932      	ldr	r1, [pc, #200]	; (8007050 <_printf_i+0x21c>)
 8006f88:	9103      	str	r1, [sp, #12]
 8006f8a:	0021      	movs	r1, r4
 8006f8c:	3145      	adds	r1, #69	; 0x45
 8006f8e:	700a      	strb	r2, [r1, #0]
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	c920      	ldmia	r1!, {r5}
 8006f96:	0610      	lsls	r0, r2, #24
 8006f98:	d402      	bmi.n	8006fa0 <_printf_i+0x16c>
 8006f9a:	0650      	lsls	r0, r2, #25
 8006f9c:	d500      	bpl.n	8006fa0 <_printf_i+0x16c>
 8006f9e:	b2ad      	uxth	r5, r5
 8006fa0:	6019      	str	r1, [r3, #0]
 8006fa2:	07d3      	lsls	r3, r2, #31
 8006fa4:	d502      	bpl.n	8006fac <_printf_i+0x178>
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	2710      	movs	r7, #16
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	d1a9      	bne.n	8006f06 <_printf_i+0xd2>
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	4393      	bics	r3, r2
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	e7a4      	b.n	8006f06 <_printf_i+0xd2>
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	680d      	ldr	r5, [r1, #0]
 8006fc0:	1d10      	adds	r0, r2, #4
 8006fc2:	6949      	ldr	r1, [r1, #20]
 8006fc4:	6018      	str	r0, [r3, #0]
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	062e      	lsls	r6, r5, #24
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0x19c>
 8006fcc:	6019      	str	r1, [r3, #0]
 8006fce:	e002      	b.n	8006fd6 <_printf_i+0x1a2>
 8006fd0:	066d      	lsls	r5, r5, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0x198>
 8006fd4:	8019      	strh	r1, [r3, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9e04      	ldr	r6, [sp, #16]
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	e7c0      	b.n	8006f60 <_printf_i+0x12c>
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	1d11      	adds	r1, r2, #4
 8006fe2:	6019      	str	r1, [r3, #0]
 8006fe4:	6816      	ldr	r6, [r2, #0]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	0030      	movs	r0, r6
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	f000 f922 	bl	8007234 <memchr>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d001      	beq.n	8006ff8 <_printf_i+0x1c4>
 8006ff4:	1b80      	subs	r0, r0, r6
 8006ff6:	6060      	str	r0, [r4, #4]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9a04      	ldr	r2, [sp, #16]
 8007000:	7013      	strb	r3, [r2, #0]
 8007002:	e7ad      	b.n	8006f60 <_printf_i+0x12c>
 8007004:	0032      	movs	r2, r6
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	9906      	ldr	r1, [sp, #24]
 800700a:	9805      	ldr	r0, [sp, #20]
 800700c:	9d07      	ldr	r5, [sp, #28]
 800700e:	47a8      	blx	r5
 8007010:	3001      	adds	r0, #1
 8007012:	d0af      	beq.n	8006f74 <_printf_i+0x140>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	079b      	lsls	r3, r3, #30
 8007018:	d415      	bmi.n	8007046 <_printf_i+0x212>
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	68e0      	ldr	r0, [r4, #12]
 800701e:	4298      	cmp	r0, r3
 8007020:	daaa      	bge.n	8006f78 <_printf_i+0x144>
 8007022:	0018      	movs	r0, r3
 8007024:	e7a8      	b.n	8006f78 <_printf_i+0x144>
 8007026:	0022      	movs	r2, r4
 8007028:	2301      	movs	r3, #1
 800702a:	9906      	ldr	r1, [sp, #24]
 800702c:	9805      	ldr	r0, [sp, #20]
 800702e:	9e07      	ldr	r6, [sp, #28]
 8007030:	3219      	adds	r2, #25
 8007032:	47b0      	blx	r6
 8007034:	3001      	adds	r0, #1
 8007036:	d09d      	beq.n	8006f74 <_printf_i+0x140>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf0      	bgt.n	8007026 <_printf_i+0x1f2>
 8007044:	e7e9      	b.n	800701a <_printf_i+0x1e6>
 8007046:	2500      	movs	r5, #0
 8007048:	e7f7      	b.n	800703a <_printf_i+0x206>
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	080076af 	.word	0x080076af
 8007050:	080076c0 	.word	0x080076c0

08007054 <__swbuf_r>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	0006      	movs	r6, r0
 8007058:	000d      	movs	r5, r1
 800705a:	0014      	movs	r4, r2
 800705c:	2800      	cmp	r0, #0
 800705e:	d004      	beq.n	800706a <__swbuf_r+0x16>
 8007060:	6a03      	ldr	r3, [r0, #32]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <__swbuf_r+0x16>
 8007066:	f7ff fa83 	bl	8006570 <__sinit>
 800706a:	69a3      	ldr	r3, [r4, #24]
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	071b      	lsls	r3, r3, #28
 8007072:	d528      	bpl.n	80070c6 <__swbuf_r+0x72>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d025      	beq.n	80070c6 <__swbuf_r+0x72>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	b2ef      	uxtb	r7, r5
 8007080:	1ac0      	subs	r0, r0, r3
 8007082:	6963      	ldr	r3, [r4, #20]
 8007084:	b2ed      	uxtb	r5, r5
 8007086:	4283      	cmp	r3, r0
 8007088:	dc05      	bgt.n	8007096 <__swbuf_r+0x42>
 800708a:	0021      	movs	r1, r4
 800708c:	0030      	movs	r0, r6
 800708e:	f7ff fcdb 	bl	8006a48 <_fflush_r>
 8007092:	2800      	cmp	r0, #0
 8007094:	d11d      	bne.n	80070d2 <__swbuf_r+0x7e>
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	3001      	adds	r0, #1
 800709a:	3b01      	subs	r3, #1
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	6022      	str	r2, [r4, #0]
 80070a4:	701f      	strb	r7, [r3, #0]
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	4283      	cmp	r3, r0
 80070aa:	d004      	beq.n	80070b6 <__swbuf_r+0x62>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	07db      	lsls	r3, r3, #31
 80070b0:	d507      	bpl.n	80070c2 <__swbuf_r+0x6e>
 80070b2:	2d0a      	cmp	r5, #10
 80070b4:	d105      	bne.n	80070c2 <__swbuf_r+0x6e>
 80070b6:	0021      	movs	r1, r4
 80070b8:	0030      	movs	r0, r6
 80070ba:	f7ff fcc5 	bl	8006a48 <_fflush_r>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d107      	bne.n	80070d2 <__swbuf_r+0x7e>
 80070c2:	0028      	movs	r0, r5
 80070c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c6:	0021      	movs	r1, r4
 80070c8:	0030      	movs	r0, r6
 80070ca:	f000 f805 	bl	80070d8 <__swsetup_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0d3      	beq.n	800707a <__swbuf_r+0x26>
 80070d2:	2501      	movs	r5, #1
 80070d4:	426d      	negs	r5, r5
 80070d6:	e7f4      	b.n	80070c2 <__swbuf_r+0x6e>

080070d8 <__swsetup_r>:
 80070d8:	4b30      	ldr	r3, [pc, #192]	; (800719c <__swsetup_r+0xc4>)
 80070da:	b570      	push	{r4, r5, r6, lr}
 80070dc:	0005      	movs	r5, r0
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	000c      	movs	r4, r1
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d004      	beq.n	80070f0 <__swsetup_r+0x18>
 80070e6:	6a03      	ldr	r3, [r0, #32]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <__swsetup_r+0x18>
 80070ec:	f7ff fa40 	bl	8006570 <__sinit>
 80070f0:	230c      	movs	r3, #12
 80070f2:	5ee2      	ldrsh	r2, [r4, r3]
 80070f4:	b293      	uxth	r3, r2
 80070f6:	0711      	lsls	r1, r2, #28
 80070f8:	d423      	bmi.n	8007142 <__swsetup_r+0x6a>
 80070fa:	06d9      	lsls	r1, r3, #27
 80070fc:	d407      	bmi.n	800710e <__swsetup_r+0x36>
 80070fe:	2309      	movs	r3, #9
 8007100:	2001      	movs	r0, #1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	3337      	adds	r3, #55	; 0x37
 8007106:	4313      	orrs	r3, r2
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	4240      	negs	r0, r0
 800710c:	bd70      	pop	{r4, r5, r6, pc}
 800710e:	075b      	lsls	r3, r3, #29
 8007110:	d513      	bpl.n	800713a <__swsetup_r+0x62>
 8007112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007114:	2900      	cmp	r1, #0
 8007116:	d008      	beq.n	800712a <__swsetup_r+0x52>
 8007118:	0023      	movs	r3, r4
 800711a:	3344      	adds	r3, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__swsetup_r+0x4e>
 8007120:	0028      	movs	r0, r5
 8007122:	f7ff fbbd 	bl	80068a0 <_free_r>
 8007126:	2300      	movs	r3, #0
 8007128:	6363      	str	r3, [r4, #52]	; 0x34
 800712a:	2224      	movs	r2, #36	; 0x24
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	4393      	bics	r3, r2
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	2300      	movs	r3, #0
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	2308      	movs	r3, #8
 800713c:	89a2      	ldrh	r2, [r4, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <__swsetup_r+0x88>
 8007148:	21a0      	movs	r1, #160	; 0xa0
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	0089      	lsls	r1, r1, #2
 8007150:	0092      	lsls	r2, r2, #2
 8007152:	400b      	ands	r3, r1
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <__swsetup_r+0x88>
 8007158:	0021      	movs	r1, r4
 800715a:	0028      	movs	r0, r5
 800715c:	f000 f89e 	bl	800729c <__smakebuf_r>
 8007160:	220c      	movs	r2, #12
 8007162:	5ea3      	ldrsh	r3, [r4, r2]
 8007164:	2001      	movs	r0, #1
 8007166:	001a      	movs	r2, r3
 8007168:	b299      	uxth	r1, r3
 800716a:	4002      	ands	r2, r0
 800716c:	4203      	tst	r3, r0
 800716e:	d00f      	beq.n	8007190 <__swsetup_r+0xb8>
 8007170:	2200      	movs	r2, #0
 8007172:	60a2      	str	r2, [r4, #8]
 8007174:	6962      	ldr	r2, [r4, #20]
 8007176:	4252      	negs	r2, r2
 8007178:	61a2      	str	r2, [r4, #24]
 800717a:	2000      	movs	r0, #0
 800717c:	6922      	ldr	r2, [r4, #16]
 800717e:	4282      	cmp	r2, r0
 8007180:	d1c4      	bne.n	800710c <__swsetup_r+0x34>
 8007182:	0609      	lsls	r1, r1, #24
 8007184:	d5c2      	bpl.n	800710c <__swsetup_r+0x34>
 8007186:	2240      	movs	r2, #64	; 0x40
 8007188:	4313      	orrs	r3, r2
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	3801      	subs	r0, #1
 800718e:	e7bd      	b.n	800710c <__swsetup_r+0x34>
 8007190:	0788      	lsls	r0, r1, #30
 8007192:	d400      	bmi.n	8007196 <__swsetup_r+0xbe>
 8007194:	6962      	ldr	r2, [r4, #20]
 8007196:	60a2      	str	r2, [r4, #8]
 8007198:	e7ef      	b.n	800717a <__swsetup_r+0xa2>
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	20000064 	.word	0x20000064

080071a0 <_raise_r>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	0004      	movs	r4, r0
 80071a4:	000d      	movs	r5, r1
 80071a6:	291f      	cmp	r1, #31
 80071a8:	d904      	bls.n	80071b4 <_raise_r+0x14>
 80071aa:	2316      	movs	r3, #22
 80071ac:	6003      	str	r3, [r0, #0]
 80071ae:	2001      	movs	r0, #1
 80071b0:	4240      	negs	r0, r0
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <_raise_r+0x24>
 80071ba:	008a      	lsls	r2, r1, #2
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	d108      	bne.n	80071d6 <_raise_r+0x36>
 80071c4:	0020      	movs	r0, r4
 80071c6:	f000 f831 	bl	800722c <_getpid_r>
 80071ca:	002a      	movs	r2, r5
 80071cc:	0001      	movs	r1, r0
 80071ce:	0020      	movs	r0, r4
 80071d0:	f000 f81a 	bl	8007208 <_kill_r>
 80071d4:	e7ed      	b.n	80071b2 <_raise_r+0x12>
 80071d6:	2000      	movs	r0, #0
 80071d8:	2a01      	cmp	r2, #1
 80071da:	d0ea      	beq.n	80071b2 <_raise_r+0x12>
 80071dc:	1c51      	adds	r1, r2, #1
 80071de:	d103      	bne.n	80071e8 <_raise_r+0x48>
 80071e0:	2316      	movs	r3, #22
 80071e2:	3001      	adds	r0, #1
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	e7e4      	b.n	80071b2 <_raise_r+0x12>
 80071e8:	2400      	movs	r4, #0
 80071ea:	0028      	movs	r0, r5
 80071ec:	601c      	str	r4, [r3, #0]
 80071ee:	4790      	blx	r2
 80071f0:	0020      	movs	r0, r4
 80071f2:	e7de      	b.n	80071b2 <_raise_r+0x12>

080071f4 <raise>:
 80071f4:	b510      	push	{r4, lr}
 80071f6:	4b03      	ldr	r3, [pc, #12]	; (8007204 <raise+0x10>)
 80071f8:	0001      	movs	r1, r0
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f7ff ffd0 	bl	80071a0 <_raise_r>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	20000064 	.word	0x20000064

08007208 <_kill_r>:
 8007208:	2300      	movs	r3, #0
 800720a:	b570      	push	{r4, r5, r6, lr}
 800720c:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_kill_r+0x20>)
 800720e:	0004      	movs	r4, r0
 8007210:	0008      	movs	r0, r1
 8007212:	0011      	movs	r1, r2
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f7f9 fe39 	bl	8000e8c <_kill>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d103      	bne.n	8007226 <_kill_r+0x1e>
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d000      	beq.n	8007226 <_kill_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	200005c8 	.word	0x200005c8

0800722c <_getpid_r>:
 800722c:	b510      	push	{r4, lr}
 800722e:	f7f9 fe27 	bl	8000e80 <_getpid>
 8007232:	bd10      	pop	{r4, pc}

08007234 <memchr>:
 8007234:	b2c9      	uxtb	r1, r1
 8007236:	1882      	adds	r2, r0, r2
 8007238:	4290      	cmp	r0, r2
 800723a:	d101      	bne.n	8007240 <memchr+0xc>
 800723c:	2000      	movs	r0, #0
 800723e:	4770      	bx	lr
 8007240:	7803      	ldrb	r3, [r0, #0]
 8007242:	428b      	cmp	r3, r1
 8007244:	d0fb      	beq.n	800723e <memchr+0xa>
 8007246:	3001      	adds	r0, #1
 8007248:	e7f6      	b.n	8007238 <memchr+0x4>
	...

0800724c <__swhatbuf_r>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	000e      	movs	r6, r1
 8007250:	001d      	movs	r5, r3
 8007252:	230e      	movs	r3, #14
 8007254:	5ec9      	ldrsh	r1, [r1, r3]
 8007256:	0014      	movs	r4, r2
 8007258:	b096      	sub	sp, #88	; 0x58
 800725a:	2900      	cmp	r1, #0
 800725c:	da0c      	bge.n	8007278 <__swhatbuf_r+0x2c>
 800725e:	89b2      	ldrh	r2, [r6, #12]
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	0011      	movs	r1, r2
 8007264:	4019      	ands	r1, r3
 8007266:	421a      	tst	r2, r3
 8007268:	d013      	beq.n	8007292 <__swhatbuf_r+0x46>
 800726a:	2100      	movs	r1, #0
 800726c:	3b40      	subs	r3, #64	; 0x40
 800726e:	2000      	movs	r0, #0
 8007270:	6029      	str	r1, [r5, #0]
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	b016      	add	sp, #88	; 0x58
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	466a      	mov	r2, sp
 800727a:	f000 f84d 	bl	8007318 <_fstat_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	dbed      	blt.n	800725e <__swhatbuf_r+0x12>
 8007282:	23f0      	movs	r3, #240	; 0xf0
 8007284:	9901      	ldr	r1, [sp, #4]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	4019      	ands	r1, r3
 800728a:	4b03      	ldr	r3, [pc, #12]	; (8007298 <__swhatbuf_r+0x4c>)
 800728c:	18c9      	adds	r1, r1, r3
 800728e:	424b      	negs	r3, r1
 8007290:	4159      	adcs	r1, r3
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	e7ea      	b.n	800726e <__swhatbuf_r+0x22>
 8007298:	ffffe000 	.word	0xffffe000

0800729c <__smakebuf_r>:
 800729c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729e:	2602      	movs	r6, #2
 80072a0:	898b      	ldrh	r3, [r1, #12]
 80072a2:	0005      	movs	r5, r0
 80072a4:	000c      	movs	r4, r1
 80072a6:	4233      	tst	r3, r6
 80072a8:	d006      	beq.n	80072b8 <__smakebuf_r+0x1c>
 80072aa:	0023      	movs	r3, r4
 80072ac:	3347      	adds	r3, #71	; 0x47
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2301      	movs	r3, #1
 80072b4:	6163      	str	r3, [r4, #20]
 80072b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80072b8:	466a      	mov	r2, sp
 80072ba:	ab01      	add	r3, sp, #4
 80072bc:	f7ff ffc6 	bl	800724c <__swhatbuf_r>
 80072c0:	9900      	ldr	r1, [sp, #0]
 80072c2:	0007      	movs	r7, r0
 80072c4:	0028      	movs	r0, r5
 80072c6:	f7fe ff9f 	bl	8006208 <_malloc_r>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d108      	bne.n	80072e0 <__smakebuf_r+0x44>
 80072ce:	220c      	movs	r2, #12
 80072d0:	5ea3      	ldrsh	r3, [r4, r2]
 80072d2:	059a      	lsls	r2, r3, #22
 80072d4:	d4ef      	bmi.n	80072b6 <__smakebuf_r+0x1a>
 80072d6:	2203      	movs	r2, #3
 80072d8:	4393      	bics	r3, r2
 80072da:	431e      	orrs	r6, r3
 80072dc:	81a6      	strh	r6, [r4, #12]
 80072de:	e7e4      	b.n	80072aa <__smakebuf_r+0xe>
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	89a2      	ldrh	r2, [r4, #12]
 80072e4:	6020      	str	r0, [r4, #0]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	9b00      	ldr	r3, [sp, #0]
 80072ec:	6120      	str	r0, [r4, #16]
 80072ee:	6163      	str	r3, [r4, #20]
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <__smakebuf_r+0x74>
 80072f6:	0028      	movs	r0, r5
 80072f8:	230e      	movs	r3, #14
 80072fa:	5ee1      	ldrsh	r1, [r4, r3]
 80072fc:	f000 f81e 	bl	800733c <_isatty_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d005      	beq.n	8007310 <__smakebuf_r+0x74>
 8007304:	2303      	movs	r3, #3
 8007306:	89a2      	ldrh	r2, [r4, #12]
 8007308:	439a      	bics	r2, r3
 800730a:	3b02      	subs	r3, #2
 800730c:	4313      	orrs	r3, r2
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	433b      	orrs	r3, r7
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	e7ce      	b.n	80072b6 <__smakebuf_r+0x1a>

08007318 <_fstat_r>:
 8007318:	2300      	movs	r3, #0
 800731a:	b570      	push	{r4, r5, r6, lr}
 800731c:	4d06      	ldr	r5, [pc, #24]	; (8007338 <_fstat_r+0x20>)
 800731e:	0004      	movs	r4, r0
 8007320:	0008      	movs	r0, r1
 8007322:	0011      	movs	r1, r2
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	f7f9 fe10 	bl	8000f4a <_fstat>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d103      	bne.n	8007336 <_fstat_r+0x1e>
 800732e:	682b      	ldr	r3, [r5, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d000      	beq.n	8007336 <_fstat_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd70      	pop	{r4, r5, r6, pc}
 8007338:	200005c8 	.word	0x200005c8

0800733c <_isatty_r>:
 800733c:	2300      	movs	r3, #0
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	4d06      	ldr	r5, [pc, #24]	; (800735c <_isatty_r+0x20>)
 8007342:	0004      	movs	r4, r0
 8007344:	0008      	movs	r0, r1
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	f7f9 fe0d 	bl	8000f66 <_isatty>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d103      	bne.n	8007358 <_isatty_r+0x1c>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d000      	beq.n	8007358 <_isatty_r+0x1c>
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	200005c8 	.word	0x200005c8

08007360 <_init>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007366:	bc08      	pop	{r3}
 8007368:	469e      	mov	lr, r3
 800736a:	4770      	bx	lr

0800736c <_fini>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr
